
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000611

Program Header:
0x70000001 off    0x00015064 vaddr 0x1a005064 paddr 0x1a005064 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c74 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000506c memsz 0x0000506c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00506c align 2**16
         filesz 0x00000184 memsz 0x00000184 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005060  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  10000000  1a00506c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020184  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020184  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020184  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020184  2**2
                  CONTENTS
  6 .bss          00002aec  10000188  10000188  00000188  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020184  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020184  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020184  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020184  2**2
                  CONTENTS
 11 .init_array   00000004  1a005060  1a005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005064  1a005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020184  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020184  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020184  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020184  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020184  2**2
                  CONTENTS
 18 .noinit       00000000  10002c74  10002c74  00020184  2**2
                  CONTENTS
 19 .debug_info   0002e5c7  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005f41  00000000  00000000  0004e74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ac4d  00000000  00000000  0005468c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001070  00000000  00000000  0005f2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001130  00000000  00000000  00060349  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00010f78  00000000  00000000  00061479  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000155df  00000000  00000000  000723f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002eb3e  00000000  00000000  000879d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000b650e  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000b658d  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002f14  00000000  00000000  000b65c4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000188 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005060 l    d  .init_array	00000000 .init_array
1a005064 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c74 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
10000188 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 task2.c
00000000 l    df *ABS*	00000000 task1.c
00000000 l    df *ABS*	00000000 system.c
10000194 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_1.c
1000019c l     O .bss	00002000 ucHeap
10000198 l     O .bss	00000004 pucAlignedHeap.11438
1000219c l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a0007ea l     F .text	0000001e prvIsQueueFull
1a000808 l     F .text	0000001a prvIsQueueEmpty
1a000822 l     F .text	00000076 prvCopyDataToQueue
1a000898 l     F .text	00000024 prvCopyDataFromQueue
1a0008bc l     F .text	0000006e prvUnlockQueue
1a0009b0 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100021a0 l     O .bss	00000168 uxIdleTaskStack.10728
10002308 l     O .bss	000005a0 uxTimerTaskStack.10735
100028a8 l     O .bss	00000060 xIdleTaskTCB.10727
10002908 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000f90 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000fbc l     F .text	00000092 prvInitialiseNewTask
1a001050 l     F .text	00000068 prvInitialiseTaskLists
1a0010b8 l     F .text	000000ac prvAddNewTaskToReadyList
1a001164 l     F .text	00000038 prvDeleteTCB
1a00119c l     F .text	0000004c prvCheckTasksWaitingTermination
1a0011e8 l     F .text	00000028 prvIdleTask
1a001210 l     F .text	00000098 prvAddCurrentTaskToDelayedList
1000296c l     O .bss	00000004 pxDelayedTaskList
10002970 l     O .bss	00000004 pxOverflowDelayedTaskList
10002974 l     O .bss	0000008c pxReadyTasksLists
10002a00 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a04 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a08 l     O .bss	00000004 uxPendedTicks
10002a0c l     O .bss	00000004 uxSchedulerSuspended
10002a10 l     O .bss	00000004 uxTaskNumber
10002a14 l     O .bss	00000004 uxTopReadyPriority
10002a18 l     O .bss	00000014 xDelayedTaskList1
10002a2c l     O .bss	00000014 xDelayedTaskList2
10002a40 l     O .bss	00000004 xNextTaskUnblockTime
10002a44 l     O .bss	00000004 xNumOfOverflows
10002a48 l     O .bss	00000014 xPendingReadyList
10002a5c l     O .bss	00000004 xSchedulerRunning
10002a60 l     O .bss	00000014 xSuspendedTaskList
10002a74 l     O .bss	00000014 xTasksWaitingTermination
10002a88 l     O .bss	00000004 xTickCount
10002a8c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001a10 l     F .text	00000020 prvGetNextExpireTime
1a001a30 l     F .text	00000048 prvInsertTimerInActiveList
1a001a78 l     F .text	00000070 prvCheckForValidListAndQueue
1a001ae8 l     F .text	00000040 prvInitialiseNewTimer
1a001eb8 l     F .text	00000016 prvTimerTask
1a001c44 l     F .text	00000078 prvSwitchTimerLists
1a001cbc l     F .text	0000002c prvSampleTimeNow
1a001ce8 l     F .text	00000060 prvProcessExpiredTimer
1a001d48 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001dbc l     F .text	000000fc prvProcessReceivedCommands
10002a90 l     O .bss	00000004 pxCurrentTimerList
10002a94 l     O .bss	00000004 pxOverflowTimerList
10002a98 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002b38 l     O .bss	00000014 xActiveTimerList1
10002b4c l     O .bss	00000014 xActiveTimerList2
10002b60 l     O .bss	00000004 xLastTime.11777
10002b64 l     O .bss	00000050 xStaticTimerQueue.11827
10002bb4 l     O .bss	00000004 xTimerQueue
10002bb8 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001ed0 l     F .text	00000040 prvTaskExitError
1a001f10 l     F .text	00000022 prvPortStartFirstTask
1a001f38 l     F .text	0000000e vPortEnableVFP
1a001fa0 l       .text	00000000 pxCurrentTCBConst2
1a002080 l       .text	00000000 pxCurrentTCBConst
10002bbc l     O .bss	00000001 ucMaxSysCallPriority
10002bc0 l     O .bss	00000004 ulMaxPRIGROUPValue
10000098 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a002254 l     F .text	00000044 Board_LED_Init
1a002298 l     F .text	00000040 Board_TEC_Init
1a0022d8 l     F .text	00000040 Board_GPIO_Init
1a002318 l     F .text	00000030 Board_ADC_Init
1a002348 l     F .text	00000038 Board_SPI_Init
1a002380 l     F .text	00000024 Board_I2C_Init
1a004cc0 l     O .text	00000008 GpioButtons
1a004cc8 l     O .text	0000000c GpioLeds
1a004cd4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004cec l     O .text	00000004 InitClkStates
1a004cf0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0024f0 l     F .text	0000002c Chip_UART_GetIndex
1a004d64 l     O .text	00000008 UART_BClock
1a004d6c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002698 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0026ac l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002860 l     F .text	000000a4 pll_calc_divs
1a002904 l     F .text	0000010c pll_get_frac
1a002a10 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002c84 l     F .text	00000022 Chip_Clock_GetDivRate
10002bc4 l     O .bss	00000008 audio_usb_pll_freq
1a004d80 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004dec l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0030a8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0030bc l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000009c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
100000d4 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004e34 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_rtc.c
10002bcc l     O .bss	00000001 init.11552
00000000 l    df *ABS*	00000000 sapi_tick.c
10002bd0 l     O .bss	00000004 callBackFuncParams
10002bd8 l     O .bss	00000008 tickCounter
10002be0 l     O .bss	00000004 tickHookFunction
10002be4 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003578 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002c14 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003924 l     F .text	00000010 clearInterrupt
1a003934 l     F .text	0000005c serveInterrupt
100000d8 l     O .data	00000048 ultrasonicSensors
1a004fc4 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004030 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0043dc l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000124 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005064 l       .init_array	00000000 __init_array_end
1a005060 l       .bss_RAM5	00000000 __preinit_array_end
1a005060 l       .init_array	00000000 __init_array_start
1a005060 l       .bss_RAM5	00000000 __preinit_array_start
1a0005c0 g     F .text	0000004c task1_Update
1a002aa8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0006b0 g     F .text	00000012 _isatty_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00325c g     F .text	00000014 uartRxRead
1a0006c2 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a002744 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001fe8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a003300 g     F .text	0000001e uartReadByte
1a003d20 g     F .text	00000030 printf
1a002436 g     F .text	00000008 __stdio_init
1a00300c g     F .text	0000002e Chip_RTC_GetFullTime
1a0049c6 g     F .text	00000024 __sseek
1a0040b0 g     F .text	00000060 __sinit
1a003d50 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000e78 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004084 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a00280a g     F .text	0000000c Chip_ADC_SetResolution
1a004aa2 g     F .text	00000002 __malloc_unlock
1a002084 g     F .text	0000002c SysTick_Handler
1a002570 g     F .text	00000040 Chip_UART_SetBaud
10000190 g     O .bss	00000004 x
1a00060c  w    F .text	00000002 initialise_monitor_handles
1a00390c g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0023dc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a00040c g     F .text	00000002 task2_Init
1a002020 g     F .text	00000064 PendSV_Handler
1a000c2c g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00506c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002968 g     O .bss	00000004 pxCurrentTCB
1a0006a6 g     F .text	0000000a _fstat_r
53ff727e g       *ABS*	00000000 __valid_user_code_checksum
1a00506c g       .ARM.exidx	00000000 _etext
1a003350 g     F .text	00000034 rtcRead
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00189c g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002d26 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0020e8 g     F .text	00000110 xPortStartScheduler
1a003cf8 g     F .text	00000016 memcpy
1a0017a8 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004078 g     F .text	0000000c _cleanup_r
1a0020b0  w    F .text	00000038 vPortSetupTimerInterrupt
1a0039b0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c74 g       .noinit	00000000 _noinit
1a0007d4 g     F .text	00000016 vPortFree
1a003338 g     F .text	00000018 uartWriteString
10002c6c g     O .bss	00000004 SystemCoreClock
1a00251c g     F .text	00000054 Chip_UART_Init
1a0033e8 g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0021f8 g     F .text	0000005c vPortValidateInterruptPriority
1a0026ec g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a002df0 g     F .text	0000004c Chip_Clock_GetRate
1a000ee6 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0038fc g     F .text	00000010 printInitUart
1a002478 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0039e0 g     F .text	000002cc .hidden __udivmoddi4
1a000744 g     F .text	00000020 _sbrk_r
1a004cbc g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a003474 g     F .text	0000000c tickWrite
1a0006cc g     F .text	0000004e _read_r
1a000ee0 g     F .text	00000006 vListInitialiseItem
1a00399a g     F .text	0000000a GPIO1_IRQHandler
1a000cf8 g     F .text	00000158 xQueueReceive
10002c2c g     O .bss	00000040 xQueueRegistry
10002c20 g     O .bss	00000001 ms
1a000f74 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00322c g     F .text	00000018 uartRxReady
1a005064 g       .ARM.exidx	00000000 __exidx_start
1a0033b4 g     F .text	00000034 rtcInit
1a0002fc g     O .text	00000004 CRP_WORD
1a0026de g     F .text	0000000e setStartMode
1a005028 g     O .text	00000004 _global_impure_ptr
1a003cb0 g     F .text	00000048 __libc_init_array
1a003480 g     F .text	000000a0 adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000764 g     F .text	00000070 pvPortMalloc
1a0023f8 g     F .text	0000002c Board_Init
1a00069a  w    F .text	00000002 _init
1a000eca g     F .text	00000016 vListInitialise
10002c21 g     O .bss	00000001 state
1a000114 g       .text	00000000 __data_section_table
1a001424 g     F .text	0000000c xTaskGetTickCount
1a000ab0 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c74 g       .bss	00000000 _ebss
1a002816 g     F .text	00000028 Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000588 g     F .text	00000038 task1_Init
1a000610 g     F .text	00000088 Reset_Handler
1a00341c g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0031a0 g     F .text	00000038 Chip_I2C_SetClockRate
1a001960 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002a5c g     F .text	0000004c Chip_Clock_EnableCrystal
1a002fde g     F .text	0000002e Chip_RTC_SetFullTime
1a00275a g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001810 g     F .text	0000008c xTaskRemoveFromEventList
1a000f8e g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a000528 g     F .text	00000060 clear
1000018c g     O .bss	00000004 queueHandler
1a002fc6 g     F .text	00000018 Chip_RTC_Enable
1a0027b8 g     F .text	00000020 Chip_ADC_SetStartMode
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004fc8 g     O .text	00000020 __sf_fake_stderr
1a00317c g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a003914 g     F .text	00000010 printEnter
1a002c18 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002fa4 g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a004e88 g     O .text	00000136 gpioPinsInit
10000000 g     O .data	00000004 i
1a00331e g     F .text	0000001a uartWriteByte
1a0030d4 g     F .text	00000012 Chip_SSP_SetClockRate
1a00440a g     F .text	00000024 __sfputs_r
1a0039a4 g     F .text	0000000a GPIO2_IRQHandler
1a004a00 g     F .text	00000000 memchr
1a000300 g     F .text	00000048 task1
1a0018b4 g     F .text	00000080 xTaskCheckForTimeOut
1a00428c g     F .text	0000009c _free_r
1a003520 g     F .text	00000058 adcRead
1a002d00 g     F .text	00000026 Chip_Clock_GetBaseClock
10000188 g       .bss	00000000 _bss
1a002762 g     F .text	00000036 Chip_ADC_ReadStatus
1a0027d8 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000348 g     F .text	00000044 task2
1a001414 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0030e6 g     F .text	0000003e Chip_SSP_SetBitRate
1a000f32 g     F .text	00000028 uxListRemove
1a0030a4 g     F .text	00000002 Chip_GPIO_Init
1a004ce8 g     O .text	00000004 OscRateIn
1a003284 g     F .text	0000007c uartInit
1a0012a8 g     F .text	00000072 xTaskCreateStatic
10002c74 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0016e0 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0009d2 g     F .text	00000090 xQueueGenericCreateStatic
1a0017d8 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00069c g     F .text	0000000a _close_r
1a0035ac g     F .text	00000194 gpioInit
1a000f5c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a00305c g     F .text	00000048 Chip_RTC_Init
1a001bd8 g     F .text	0000006c xTimerGenericCommand
1a003df4 g     F .text	000000dc __swsetup_r
1a000f8c g     F .text	00000002 vApplicationStackOverflowHook
1a003cac  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004110 g     F .text	00000078 __sfp
1a00496c g     F .text	00000022 __sread
1a0037ec g     F .text	0000001c USB0_IRQHandler
1a002dbc g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004aa0 g     F .text	00000002 __malloc_lock
1a0023c8 g     F .text	00000014 Board_UARTPutChar
10002c24 g     O .bss	00000008 rtc
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003fdc g     F .text	00000054 _fflush_r
1a004fe8 g     O .text	00000020 __sf_fake_stdin
1a002ac4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003d0e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00038c g     F .text	00000080 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000efe g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
10000018 g     O .data	00000080 vectorTeclas
1a001f80 g     F .text	00000024 SVC_Handler
1a0049ea g     F .text	00000008 __sclose
1a001b28 g     F .text	00000064 xTimerCreateTimerTask
1a004328 g     F .text	000000b4 _malloc_r
1a0004f8 g     F .text	00000030 time
1a003244 g     F .text	00000018 uartTxReady
1a00163c g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002d34 g     F .text	0000003c Chip_Clock_EnableOpts
1a00242e g     F .text	00000008 __stdio_getchar
1a000a62 g     F .text	0000004e xQueueGenericCreate
1a002ae0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002b98 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0031d8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002da4 g     F .text	00000018 Chip_Clock_RTCEnable
1a003740 g     F .text	00000056 gpioWrite
1a000698  w    F .text	00000002 _fini
1a003d20 g     F .text	00000030 iprintf
1a001548 g     F .text	000000f4 xTaskResumeAll
1a001380 g     F .text	00000094 vTaskStartScheduler
1a002704 g     F .text	00000040 Chip_ADC_Init
10002c70 g     O .bss	00000004 g_pUsbApi
1a002440 g     F .text	00000038 Board_SetupMuxing
1a003384 g     F .text	00000030 rtcWrite
1a0025b0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a003468 g     F .text	0000000c tickRead
1a00071a g     F .text	00000028 _write_r
1a00283e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a00465c g     F .text	000000ea _printf_common
10000120 g     O .data	00000004 _impure_ptr
1a003ed0 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003270 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10002c22 g     O .bss	00000001 var
1a001934 g     F .text	0000000c vTaskMissedYield
10002c74 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003124 g     F .text	00000038 Chip_SSP_Init
1a000e50 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001430 g     F .text	00000118 xTaskIncrementTick
1a0041c4 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0023a4 g     F .text	00000024 Board_Debug_Init
1a002424 g     F .text	0000000a __stdio_putchar
1a00092c g     F .text	00000084 xQueueGenericReset
1a000410 g     F .text	000000e8 task2_Update
1a002798 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000184 g       .data	00000000 _edata
1a00315c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00131a g     F .text	00000066 xTaskCreate
1a002e50 g     F .text	00000154 Chip_SetupCoreClock
1a00498e g     F .text	00000038 __swrite
1a003990 g     F .text	0000000a GPIO0_IRQHandler
1a004430 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004188 g     F .text	0000003c _fwalk_reent
1a002e3c g     F .text	00000014 SystemCoreClockUpdate
1a00303a g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005008 g     O .text	00000020 __sf_fake_stdout
1a001940 g     F .text	00000020 xTaskGetSchedulerState
1a003cac  w    F .text	00000002 .hidden __aeabi_idiv0
10000004 g     O .data	00000010 name
1a00017e  w    F .text	00000002 BusFault_Handler
1a00420c g     F .text	00000080 __smakebuf_r
1a001f4c g     F .text	0000002c pxPortInitialiseStack
1a004748 g     F .text	00000224 _printf_i
1a002d70 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002c1c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a001b8c g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a003796 g     F .text	00000054 gpioRead
1a003808 g     F .text	000000f4 boardInit
1a001fa4 g     F .text	00000044 vPortEnterCritical
10002c18 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004430 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002ca8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003210 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0024e4 g     F .text	0000000c Board_SystemInit
10002c23 g     O .bss	00000001 value



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 11 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7e 72 ff 53     }...........~r.S
	...
1a00002c:	81 1f 00 1a 85 01 00 1a 00 00 00 00 21 20 00 1a     ............! ..
1a00003c:	85 20 00 1a                                         . ..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	ed 37 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .7..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	91 39 00 1a 9b 39 00 1a a5 39 00 1a bb 01 00 1a     .9...9...9......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00506c 	.word	0x1a00506c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000184 	.word	0x00000184
1a000120:	1a00506c 	.word	0x1a00506c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00506c 	.word	0x1a00506c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00506c 	.word	0x1a00506c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00506c 	.word	0x1a00506c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000188 	.word	0x10000188
1a000154:	00002aec 	.word	0x00002aec
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <task1>:

/*==================[definiciones de funciones externas]=====================*/

// Implementacion de funcion de las tareas
void task1( void* taskParmPtr )
{
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
   task1_Init();
1a000304:	f000 f940 	bl	1a000588 <task1_Init>
   

   // Tarea periodica cada 500 ms
   portTickType xPeriodicity =  1000 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000308:	f001 f88c 	bl	1a001424 <xTaskGetTickCount>
1a00030c:	9001      	str	r0, [sp, #4]
1a00030e:	e004      	b.n	1a00031a <task1+0x1a>
   uartWriteString(UART_USB,"tas 1 has been updated\n\r");

  }
     
  // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
  vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000310:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000314:	a801      	add	r0, sp, #4
1a000316:	f001 f991 	bl	1a00163c <vTaskDelayUntil>
  task1_Update();
1a00031a:	f000 f951 	bl	1a0005c0 <task1_Update>
  if( !xQueueSend(queueHandler,&i,1000)){
1a00031e:	2300      	movs	r3, #0
1a000320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000324:	4905      	ldr	r1, [pc, #20]	; (1a00033c <task1+0x3c>)
1a000326:	4806      	ldr	r0, [pc, #24]	; (1a000340 <task1+0x40>)
1a000328:	6800      	ldr	r0, [r0, #0]
1a00032a:	f000 fbc1 	bl	1a000ab0 <xQueueGenericSend>
1a00032e:	2800      	cmp	r0, #0
1a000330:	d1ee      	bne.n	1a000310 <task1+0x10>
   uartWriteString(UART_USB,"tas 1 has been updated\n\r");
1a000332:	4904      	ldr	r1, [pc, #16]	; (1a000344 <task1+0x44>)
1a000334:	2003      	movs	r0, #3
1a000336:	f002 ffff 	bl	1a003338 <uartWriteString>
1a00033a:	e7e9      	b.n	1a000310 <task1+0x10>
1a00033c:	10000000 	.word	0x10000000
1a000340:	1000018c 	.word	0x1000018c
1a000344:	1a004ad0 	.word	0x1a004ad0

1a000348 <task2>:
   }
}

void task2( void* taskParmPtr )
{
1a000348:	b500      	push	{lr}
1a00034a:	b083      	sub	sp, #12
   task2_Init();
1a00034c:	f000 f85e 	bl	1a00040c <task2_Init>
  //espera 1 segundo y lea el valor enviado al queue y guardarlo en el variable x si es cierto manda mensaje
    if( xQueueReceive(queueHandler,&x,1000)){
1a000350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000354:	490a      	ldr	r1, [pc, #40]	; (1a000380 <task2+0x38>)
1a000356:	4b0b      	ldr	r3, [pc, #44]	; (1a000384 <task2+0x3c>)
1a000358:	6818      	ldr	r0, [r3, #0]
1a00035a:	f000 fccd 	bl	1a000cf8 <xQueueReceive>
1a00035e:	b948      	cbnz	r0, 1a000374 <task2+0x2c>

    }

   // Tarea periodica cada 500 ms
   portTickType xPeriodicity =  50 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000360:	f001 f860 	bl	1a001424 <xTaskGetTickCount>
1a000364:	9001      	str	r0, [sp, #4]
   
   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
     
  
  task2_Update();
1a000366:	f000 f853 	bl	1a000410 <task2_Update>
     
  // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
  vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a00036a:	2132      	movs	r1, #50	; 0x32
1a00036c:	a801      	add	r0, sp, #4
1a00036e:	f001 f965 	bl	1a00163c <vTaskDelayUntil>
1a000372:	e7f8      	b.n	1a000366 <task2+0x1e>
     uartWriteString(UART_USB,"task 1 was updated successfully\n\r");
1a000374:	4904      	ldr	r1, [pc, #16]	; (1a000388 <task2+0x40>)
1a000376:	2003      	movs	r0, #3
1a000378:	f002 ffde 	bl	1a003338 <uartWriteString>
1a00037c:	e7f0      	b.n	1a000360 <task2+0x18>
1a00037e:	bf00      	nop
1a000380:	10000190 	.word	0x10000190
1a000384:	1000018c 	.word	0x1000018c
1a000388:	1a004aec 	.word	0x1a004aec

1a00038c <main>:
{
1a00038c:	b500      	push	{lr}
1a00038e:	b083      	sub	sp, #12
   boardConfig();
1a000390:	f003 fa3a 	bl	1a003808 <boardInit>
  queueHandler =xQueueCreate(1,sizeof(int)); // reservar espacio en la memoria de 5 elementos de tipo int
1a000394:	2200      	movs	r2, #0
1a000396:	2104      	movs	r1, #4
1a000398:	2001      	movs	r0, #1
1a00039a:	f000 fb62 	bl	1a000a62 <xQueueGenericCreate>
1a00039e:	4b14      	ldr	r3, [pc, #80]	; (1a0003f0 <main+0x64>)
1a0003a0:	6018      	str	r0, [r3, #0]
   debugPrintConfigUart( UART_USB, 115200 );
1a0003a2:	4c14      	ldr	r4, [pc, #80]	; (1a0003f4 <main+0x68>)
1a0003a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a0003a8:	2103      	movs	r1, #3
1a0003aa:	4620      	mov	r0, r4
1a0003ac:	f003 faa6 	bl	1a0038fc <printInitUart>
   debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a0003b0:	4911      	ldr	r1, [pc, #68]	; (1a0003f8 <main+0x6c>)
1a0003b2:	7820      	ldrb	r0, [r4, #0]
1a0003b4:	f003 faaa 	bl	1a00390c <printString>
1a0003b8:	7820      	ldrb	r0, [r4, #0]
1a0003ba:	f003 faab 	bl	1a003914 <printEnter>
   gpioWrite( LED3, ON );
1a0003be:	2101      	movs	r1, #1
1a0003c0:	202d      	movs	r0, #45	; 0x2d
1a0003c2:	f003 f9bd 	bl	1a003740 <gpioWrite>
   xTaskCreate(
1a0003c6:	2400      	movs	r4, #0
1a0003c8:	9401      	str	r4, [sp, #4]
1a0003ca:	2501      	movs	r5, #1
1a0003cc:	9500      	str	r5, [sp, #0]
1a0003ce:	4623      	mov	r3, r4
1a0003d0:	22b4      	movs	r2, #180	; 0xb4
1a0003d2:	490a      	ldr	r1, [pc, #40]	; (1a0003fc <main+0x70>)
1a0003d4:	480a      	ldr	r0, [pc, #40]	; (1a000400 <main+0x74>)
1a0003d6:	f000 ffa0 	bl	1a00131a <xTaskCreate>
   xTaskCreate(
1a0003da:	9401      	str	r4, [sp, #4]
1a0003dc:	9500      	str	r5, [sp, #0]
1a0003de:	4623      	mov	r3, r4
1a0003e0:	22b4      	movs	r2, #180	; 0xb4
1a0003e2:	4908      	ldr	r1, [pc, #32]	; (1a000404 <main+0x78>)
1a0003e4:	4808      	ldr	r0, [pc, #32]	; (1a000408 <main+0x7c>)
1a0003e6:	f000 ff98 	bl	1a00131a <xTaskCreate>
   vTaskStartScheduler();
1a0003ea:	f000 ffc9 	bl	1a001380 <vTaskStartScheduler>
1a0003ee:	e7fe      	b.n	1a0003ee <main+0x62>
1a0003f0:	1000018c 	.word	0x1000018c
1a0003f4:	10000188 	.word	0x10000188
1a0003f8:	1a004aa4 	.word	0x1a004aa4
1a0003fc:	1a004ac0 	.word	0x1a004ac0
1a000400:	1a000301 	.word	0x1a000301
1a000404:	1a004ac8 	.word	0x1a004ac8
1a000408:	1a000349 	.word	0x1a000349

1a00040c <task2_Init>:

/*==================[external functions definition]==========================*/

// Funcion que inicializa la tarea

void task2_Init( void ){}
1a00040c:	4770      	bx	lr
1a00040e:	Address 0x000000001a00040e is out of bounds.


1a000410 <task2_Update>:

// Funcion que se ejecuta periodicamente
void task2_Update(){   
1a000410:	b538      	push	{r3, r4, r5, lr}
     	
// This function checks  if the user input is 1,2,3 or 4 and calls certain functions accordingly 	
	if(uartReadByte(UART_USB,&var)){
1a000412:	492f      	ldr	r1, [pc, #188]	; (1a0004d0 <task2_Update+0xc0>)
1a000414:	2003      	movs	r0, #3
1a000416:	f002 ff73 	bl	1a003300 <uartReadByte>
1a00041a:	b138      	cbz	r0, 1a00042c <task2_Update+0x1c>
  
		switch(var){	
1a00041c:	4b2c      	ldr	r3, [pc, #176]	; (1a0004d0 <task2_Update+0xc0>)
1a00041e:	781b      	ldrb	r3, [r3, #0]
1a000420:	2b6c      	cmp	r3, #108	; 0x6c
1a000422:	d051      	beq.n	1a0004c8 <task2_Update+0xb8>
1a000424:	2b74      	cmp	r3, #116	; 0x74
1a000426:	d002      	beq.n	1a00042e <task2_Update+0x1e>
1a000428:	2b64      	cmp	r3, #100	; 0x64
1a00042a:	d03e      	beq.n	1a0004aa <task2_Update+0x9a>
		}
		
	}


}
1a00042c:	bd38      	pop	{r3, r4, r5, pc}
				clear();
1a00042e:	f000 f87b 	bl	1a000528 <clear>
				for(uint8_t i=0; i<=3;i++){
1a000432:	2400      	movs	r4, #0
1a000434:	e007      	b.n	1a000446 <task2_Update+0x36>
							printf("\nReleased %s\n",name[i]);;
1a000436:	4b27      	ldr	r3, [pc, #156]	; (1a0004d4 <task2_Update+0xc4>)
1a000438:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a00043c:	4826      	ldr	r0, [pc, #152]	; (1a0004d8 <task2_Update+0xc8>)
1a00043e:	f003 fc6f 	bl	1a003d20 <iprintf>
				for(uint8_t i=0; i<=3;i++){
1a000442:	3401      	adds	r4, #1
1a000444:	b2e4      	uxtb	r4, r4
1a000446:	2c03      	cmp	r4, #3
1a000448:	d8f0      	bhi.n	1a00042c <task2_Update+0x1c>
					state=!gpioRead(vectorTeclas[i].tec);
1a00044a:	0163      	lsls	r3, r4, #5
1a00044c:	4a23      	ldr	r2, [pc, #140]	; (1a0004dc <task2_Update+0xcc>)
1a00044e:	5cd0      	ldrb	r0, [r2, r3]
1a000450:	f003 f9a1 	bl	1a003796 <gpioRead>
1a000454:	fab0 f080 	clz	r0, r0
1a000458:	0940      	lsrs	r0, r0, #5
1a00045a:	4b21      	ldr	r3, [pc, #132]	; (1a0004e0 <task2_Update+0xd0>)
1a00045c:	7018      	strb	r0, [r3, #0]
						switch(state){
1a00045e:	2800      	cmp	r0, #0
1a000460:	d0e9      	beq.n	1a000436 <task2_Update+0x26>
							vectorTeclas[i].state=3;
1a000462:	4b1e      	ldr	r3, [pc, #120]	; (1a0004dc <task2_Update+0xcc>)
1a000464:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000468:	2203      	movs	r2, #3
1a00046a:	705a      	strb	r2, [r3, #1]
							printf("\nRising %s\n",name[i]);
1a00046c:	4b19      	ldr	r3, [pc, #100]	; (1a0004d4 <task2_Update+0xc4>)
1a00046e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a000472:	481c      	ldr	r0, [pc, #112]	; (1a0004e4 <task2_Update+0xd4>)
1a000474:	f003 fc54 	bl	1a003d20 <iprintf>
							ms=tickRead();
1a000478:	f002 fff6 	bl	1a003468 <tickRead>
1a00047c:	b2c0      	uxtb	r0, r0
1a00047e:	4b1a      	ldr	r3, [pc, #104]	; (1a0004e8 <task2_Update+0xd8>)
1a000480:	7018      	strb	r0, [r3, #0]
							if(ms>=40){
1a000482:	2827      	cmp	r0, #39	; 0x27
1a000484:	d9dd      	bls.n	1a000442 <task2_Update+0x32>
							  if(!gpioRead(vectorTeclas[i].tec)){
1a000486:	0163      	lsls	r3, r4, #5
1a000488:	4a14      	ldr	r2, [pc, #80]	; (1a0004dc <task2_Update+0xcc>)
1a00048a:	5cd0      	ldrb	r0, [r2, r3]
1a00048c:	f003 f983 	bl	1a003796 <gpioRead>
1a000490:	2800      	cmp	r0, #0
1a000492:	d1d6      	bne.n	1a000442 <task2_Update+0x32>
							  tickWrite(0);
1a000494:	2000      	movs	r0, #0
1a000496:	2100      	movs	r1, #0
1a000498:	f002 ffec 	bl	1a003474 <tickWrite>
							  printf("\nPressed %s\n",name[i]);
1a00049c:	4b0d      	ldr	r3, [pc, #52]	; (1a0004d4 <task2_Update+0xc4>)
1a00049e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a0004a2:	4812      	ldr	r0, [pc, #72]	; (1a0004ec <task2_Update+0xdc>)
1a0004a4:	f003 fc3c 	bl	1a003d20 <iprintf>
1a0004a8:	e7cb      	b.n	1a000442 <task2_Update+0x32>
				clear();
1a0004aa:	f000 f83d 	bl	1a000528 <clear>
				adcConfig(ADC_ENABLE); 
1a0004ae:	2000      	movs	r0, #0
1a0004b0:	f002 ffe6 	bl	1a003480 <adcInit>
				value=adcRead(CH1); 
1a0004b4:	2041      	movs	r0, #65	; 0x41
1a0004b6:	f003 f833 	bl	1a003520 <adcRead>
1a0004ba:	b2c1      	uxtb	r1, r0
1a0004bc:	4b0c      	ldr	r3, [pc, #48]	; (1a0004f0 <task2_Update+0xe0>)
1a0004be:	7019      	strb	r1, [r3, #0]
				printf("\nThe ADC value is  %d\n",value); ;
1a0004c0:	480c      	ldr	r0, [pc, #48]	; (1a0004f4 <task2_Update+0xe4>)
1a0004c2:	f003 fc2d 	bl	1a003d20 <iprintf>
				break;
1a0004c6:	e7b1      	b.n	1a00042c <task2_Update+0x1c>
				clear();
1a0004c8:	f000 f82e 	bl	1a000528 <clear>
}
1a0004cc:	e7ae      	b.n	1a00042c <task2_Update+0x1c>
1a0004ce:	bf00      	nop
1a0004d0:	10002c22 	.word	0x10002c22
1a0004d4:	10000004 	.word	0x10000004
1a0004d8:	1a004b5c 	.word	0x1a004b5c
1a0004dc:	10000018 	.word	0x10000018
1a0004e0:	10002c21 	.word	0x10002c21
1a0004e4:	1a004b40 	.word	0x1a004b40
1a0004e8:	10002c20 	.word	0x10002c20
1a0004ec:	1a004b4c 	.word	0x1a004b4c
1a0004f0:	10002c23 	.word	0x10002c23
1a0004f4:	1a004b6c 	.word	0x1a004b6c

1a0004f8 <time>:
  time();
  uartWriteString(UART_USB,"\n\n**************************************************************\n\r"); 		
}

//This functions shows the current time
void time(){
1a0004f8:	b530      	push	{r4, r5, lr}
1a0004fa:	b085      	sub	sp, #20

  //This funciton takes the rtc address to update the structure enteries      
  rtcRead(&rtc);
1a0004fc:	4c08      	ldr	r4, [pc, #32]	; (1a000520 <time+0x28>)
1a0004fe:	4620      	mov	r0, r4
1a000500:	f002 ff26 	bl	1a003350 <rtcRead>
  //Show date and time 
  printf( "\n\n\n                                       %02d/%02d/%04d,%02d:%02d:%02d\r\n", 
  rtc.mday, rtc.month, rtc.year,rtc.hour, rtc.min, rtc.sec );
1a000504:	78e1      	ldrb	r1, [r4, #3]
1a000506:	78a2      	ldrb	r2, [r4, #2]
1a000508:	8823      	ldrh	r3, [r4, #0]
1a00050a:	7960      	ldrb	r0, [r4, #5]
1a00050c:	79a5      	ldrb	r5, [r4, #6]
1a00050e:	79e4      	ldrb	r4, [r4, #7]
  printf( "\n\n\n                                       %02d/%02d/%04d,%02d:%02d:%02d\r\n", 
1a000510:	9402      	str	r4, [sp, #8]
1a000512:	9501      	str	r5, [sp, #4]
1a000514:	9000      	str	r0, [sp, #0]
1a000516:	4803      	ldr	r0, [pc, #12]	; (1a000524 <time+0x2c>)
1a000518:	f003 fc02 	bl	1a003d20 <iprintf>
}
1a00051c:	b005      	add	sp, #20
1a00051e:	bd30      	pop	{r4, r5, pc}
1a000520:	10002c24 	.word	0x10002c24
1a000524:	1a004c58 	.word	0x1a004c58

1a000528 <clear>:
void clear(){
1a000528:	b508      	push	{r3, lr}
  uartWriteByte(UART_USB,27); 
1a00052a:	211b      	movs	r1, #27
1a00052c:	2003      	movs	r0, #3
1a00052e:	f002 fef6 	bl	1a00331e <uartWriteByte>
  uartWriteString(UART_USB,"[2J"); 
1a000532:	490f      	ldr	r1, [pc, #60]	; (1a000570 <clear+0x48>)
1a000534:	2003      	movs	r0, #3
1a000536:	f002 feff 	bl	1a003338 <uartWriteString>
  uartWriteByte(UART_USB,27);
1a00053a:	211b      	movs	r1, #27
1a00053c:	2003      	movs	r0, #3
1a00053e:	f002 feee 	bl	1a00331e <uartWriteByte>
  uartWriteString(UART_USB,"[H");
1a000542:	490c      	ldr	r1, [pc, #48]	; (1a000574 <clear+0x4c>)
1a000544:	2003      	movs	r0, #3
1a000546:	f002 fef7 	bl	1a003338 <uartWriteString>
  uartWriteString(UART_USB,"Presiona T para visualizar el estado de los pulsadores\n\r");
1a00054a:	490b      	ldr	r1, [pc, #44]	; (1a000578 <clear+0x50>)
1a00054c:	2003      	movs	r0, #3
1a00054e:	f002 fef3 	bl	1a003338 <uartWriteString>
  uartWriteString(UART_USB,"Presiona D para entrar al modo ADC\n\r");
1a000552:	490a      	ldr	r1, [pc, #40]	; (1a00057c <clear+0x54>)
1a000554:	2003      	movs	r0, #3
1a000556:	f002 feef 	bl	1a003338 <uartWriteString>
  uartWriteString(UART_USB,"Presiona L limpiar la pantalla\n\r");
1a00055a:	4909      	ldr	r1, [pc, #36]	; (1a000580 <clear+0x58>)
1a00055c:	2003      	movs	r0, #3
1a00055e:	f002 feeb 	bl	1a003338 <uartWriteString>
  time();
1a000562:	f7ff ffc9 	bl	1a0004f8 <time>
  uartWriteString(UART_USB,"\n\n**************************************************************\n\r"); 		
1a000566:	4907      	ldr	r1, [pc, #28]	; (1a000584 <clear+0x5c>)
1a000568:	2003      	movs	r0, #3
1a00056a:	f002 fee5 	bl	1a003338 <uartWriteString>
}
1a00056e:	bd08      	pop	{r3, pc}
1a000570:	1a004b84 	.word	0x1a004b84
1a000574:	1a004b88 	.word	0x1a004b88
1a000578:	1a004b8c 	.word	0x1a004b8c
1a00057c:	1a004bc8 	.word	0x1a004bc8
1a000580:	1a004bf0 	.word	0x1a004bf0
1a000584:	1a004c14 	.word	0x1a004c14

1a000588 <task1_Init>:


/*==================[external functions definition]==========================*/

// Funcion que inicializa la tarea
void task1_Init( void ){
1a000588:	b510      	push	{r4, lr}

// These definitions must be executed inside the app.c fine and would not work if defined outside
  rtc.year = 2019;
1a00058a:	480c      	ldr	r0, [pc, #48]	; (1a0005bc <task1_Init+0x34>)
1a00058c:	f240 73e3 	movw	r3, #2019	; 0x7e3
1a000590:	8003      	strh	r3, [r0, #0]
  rtc.month = 5;
1a000592:	2305      	movs	r3, #5
1a000594:	7083      	strb	r3, [r0, #2]
  rtc.mday = 7;
1a000596:	2307      	movs	r3, #7
1a000598:	70c3      	strb	r3, [r0, #3]
  rtc.wday = 3;
1a00059a:	2403      	movs	r4, #3
1a00059c:	7104      	strb	r4, [r0, #4]
  rtc.hour = 12;
1a00059e:	230c      	movs	r3, #12
1a0005a0:	7143      	strb	r3, [r0, #5]
  rtc.min = 15;
1a0005a2:	230f      	movs	r3, #15
1a0005a4:	7183      	strb	r3, [r0, #6]
  rtc.sec= 0;
1a0005a6:	2300      	movs	r3, #0
1a0005a8:	71c3      	strb	r3, [r0, #7]
  rtcConfig(&rtc);
1a0005aa:	f002 ff03 	bl	1a0033b4 <rtcInit>
  uartConfig(UART_USB,115200); 
1a0005ae:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005b2:	4620      	mov	r0, r4
1a0005b4:	f002 fe66 	bl	1a003284 <uartInit>
}
1a0005b8:	bd10      	pop	{r4, pc}
1a0005ba:	bf00      	nop
1a0005bc:	10002c24 	.word	0x10002c24

1a0005c0 <task1_Update>:

// Funcion que se ejecuta periodicamente
void task1_Update( void* taskParam ){ 
1a0005c0:	b508      	push	{r3, lr}
 
   uartWriteByte(UART_USB,27);
1a0005c2:	211b      	movs	r1, #27
1a0005c4:	2003      	movs	r0, #3
1a0005c6:	f002 feaa 	bl	1a00331e <uartWriteByte>
  // start move cursor to the begining   
  uartWriteString(UART_USB,"[H"); 
1a0005ca:	490b      	ldr	r1, [pc, #44]	; (1a0005f8 <task1_Update+0x38>)
1a0005cc:	2003      	movs	r0, #3
1a0005ce:	f002 feb3 	bl	1a003338 <uartWriteString>
  uartWriteString(UART_USB,"Presiona T para visualizar el estado de los pulsadores\n\r");
1a0005d2:	490a      	ldr	r1, [pc, #40]	; (1a0005fc <task1_Update+0x3c>)
1a0005d4:	2003      	movs	r0, #3
1a0005d6:	f002 feaf 	bl	1a003338 <uartWriteString>
  uartWriteString(UART_USB,"Presiona D para entrar al modo ADC\n\r");
1a0005da:	4909      	ldr	r1, [pc, #36]	; (1a000600 <task1_Update+0x40>)
1a0005dc:	2003      	movs	r0, #3
1a0005de:	f002 feab 	bl	1a003338 <uartWriteString>
  uartWriteString(UART_USB,"Presiona L limpiar la pantalla\n\r");
1a0005e2:	4908      	ldr	r1, [pc, #32]	; (1a000604 <task1_Update+0x44>)
1a0005e4:	2003      	movs	r0, #3
1a0005e6:	f002 fea7 	bl	1a003338 <uartWriteString>
  //Print a seperation 
  time();
1a0005ea:	f7ff ff85 	bl	1a0004f8 <time>
  uartWriteString(UART_USB,"\n\n**************************************************************\n\r");
1a0005ee:	4906      	ldr	r1, [pc, #24]	; (1a000608 <task1_Update+0x48>)
1a0005f0:	2003      	movs	r0, #3
1a0005f2:	f002 fea1 	bl	1a003338 <uartWriteString>
}
1a0005f6:	bd08      	pop	{r3, pc}
1a0005f8:	1a004b88 	.word	0x1a004b88
1a0005fc:	1a004b8c 	.word	0x1a004b8c
1a000600:	1a004bc8 	.word	0x1a004bc8
1a000604:	1a004bf0 	.word	0x1a004bf0
1a000608:	1a004c14 	.word	0x1a004c14

1a00060c <initialise_monitor_handles>:
}
1a00060c:	4770      	bx	lr
1a00060e:	Address 0x000000001a00060e is out of bounds.


1a000610 <Reset_Handler>:
void Reset_Handler(void) {
1a000610:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000612:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000614:	4b19      	ldr	r3, [pc, #100]	; (1a00067c <Reset_Handler+0x6c>)
1a000616:	4a1a      	ldr	r2, [pc, #104]	; (1a000680 <Reset_Handler+0x70>)
1a000618:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00061a:	3304      	adds	r3, #4
1a00061c:	4a19      	ldr	r2, [pc, #100]	; (1a000684 <Reset_Handler+0x74>)
1a00061e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000620:	2300      	movs	r3, #0
1a000622:	e005      	b.n	1a000630 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000624:	4a18      	ldr	r2, [pc, #96]	; (1a000688 <Reset_Handler+0x78>)
1a000626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00062a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00062e:	3301      	adds	r3, #1
1a000630:	2b07      	cmp	r3, #7
1a000632:	d9f7      	bls.n	1a000624 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000634:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000636:	4b15      	ldr	r3, [pc, #84]	; (1a00068c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000638:	e007      	b.n	1a00064a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00063a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00063e:	689a      	ldr	r2, [r3, #8]
1a000640:	6859      	ldr	r1, [r3, #4]
1a000642:	6818      	ldr	r0, [r3, #0]
1a000644:	f7ff fda1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000648:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00064a:	4a11      	ldr	r2, [pc, #68]	; (1a000690 <Reset_Handler+0x80>)
1a00064c:	4293      	cmp	r3, r2
1a00064e:	d3f4      	bcc.n	1a00063a <Reset_Handler+0x2a>
1a000650:	e006      	b.n	1a000660 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000652:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000654:	6859      	ldr	r1, [r3, #4]
1a000656:	f854 0b08 	ldr.w	r0, [r4], #8
1a00065a:	f7ff fda5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00065e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000660:	4a0c      	ldr	r2, [pc, #48]	; (1a000694 <Reset_Handler+0x84>)
1a000662:	4293      	cmp	r3, r2
1a000664:	d3f5      	bcc.n	1a000652 <Reset_Handler+0x42>
    SystemInit();
1a000666:	f002 fdb7 	bl	1a0031d8 <SystemInit>
    __libc_init_array();
1a00066a:	f003 fb21 	bl	1a003cb0 <__libc_init_array>
    initialise_monitor_handles();
1a00066e:	f7ff ffcd 	bl	1a00060c <initialise_monitor_handles>
    main();
1a000672:	f7ff fe8b 	bl	1a00038c <main>
        __asm__ volatile("wfi");
1a000676:	bf30      	wfi
1a000678:	e7fd      	b.n	1a000676 <Reset_Handler+0x66>
1a00067a:	bf00      	nop
1a00067c:	40053100 	.word	0x40053100
1a000680:	10df1000 	.word	0x10df1000
1a000684:	01dff7ff 	.word	0x01dff7ff
1a000688:	e000e280 	.word	0xe000e280
1a00068c:	1a000114 	.word	0x1a000114
1a000690:	1a000150 	.word	0x1a000150
1a000694:	1a000178 	.word	0x1a000178

1a000698 <_fini>:
void _fini(void) {}
1a000698:	4770      	bx	lr

1a00069a <_init>:
void _init(void) {}
1a00069a:	4770      	bx	lr

1a00069c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00069c:	2309      	movs	r3, #9
1a00069e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006a4:	4770      	bx	lr

1a0006a6 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0006a6:	2358      	movs	r3, #88	; 0x58
1a0006a8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006ae:	4770      	bx	lr

1a0006b0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0006b0:	2902      	cmp	r1, #2
1a0006b2:	d801      	bhi.n	1a0006b8 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0006b4:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0006b6:	4770      	bx	lr
       SET_ERR(EBADF);
1a0006b8:	2309      	movs	r3, #9
1a0006ba:	6003      	str	r3, [r0, #0]
       return -1;
1a0006bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006c0:	4770      	bx	lr

1a0006c2 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0006c2:	2358      	movs	r3, #88	; 0x58
1a0006c4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0006c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0006ca:	4770      	bx	lr

1a0006cc <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0006cc:	2902      	cmp	r1, #2
1a0006ce:	d81f      	bhi.n	1a000710 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0006d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0006d4:	461d      	mov	r5, r3
1a0006d6:	4617      	mov	r7, r2
1a0006d8:	4606      	mov	r6, r0
  size_t i = 0;
1a0006da:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0006dc:	42ac      	cmp	r4, r5
1a0006de:	d211      	bcs.n	1a000704 <_read_r+0x38>
         int c = __stdio_getchar();
1a0006e0:	f001 fea5 	bl	1a00242e <__stdio_getchar>
         if( c != -1 ){
1a0006e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0006e8:	d0f8      	beq.n	1a0006dc <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0006ea:	f104 0801 	add.w	r8, r4, #1
1a0006ee:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0006f0:	280d      	cmp	r0, #13
1a0006f2:	d003      	beq.n	1a0006fc <_read_r+0x30>
1a0006f4:	280a      	cmp	r0, #10
1a0006f6:	d001      	beq.n	1a0006fc <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0006f8:	4644      	mov	r4, r8
1a0006fa:	e7ef      	b.n	1a0006dc <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0006fc:	f001 fe97 	bl	1a00242e <__stdio_getchar>
               return i;
1a000700:	4640      	mov	r0, r8
1a000702:	e003      	b.n	1a00070c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000704:	2313      	movs	r3, #19
1a000706:	6033      	str	r3, [r6, #0]
      return -1;
1a000708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000710:	2313      	movs	r3, #19
1a000712:	6003      	str	r3, [r0, #0]
      return -1;
1a000714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000718:	4770      	bx	lr

1a00071a <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00071a:	2902      	cmp	r1, #2
1a00071c:	d80c      	bhi.n	1a000738 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00071e:	b570      	push	{r4, r5, r6, lr}
1a000720:	461d      	mov	r5, r3
1a000722:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000724:	2400      	movs	r4, #0
1a000726:	e003      	b.n	1a000730 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000728:	5d30      	ldrb	r0, [r6, r4]
1a00072a:	f001 fe7b 	bl	1a002424 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00072e:	3401      	adds	r4, #1
1a000730:	42ac      	cmp	r4, r5
1a000732:	d3f9      	bcc.n	1a000728 <_write_r+0xe>
       return n;
1a000734:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000736:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000738:	2313      	movs	r3, #19
1a00073a:	6003      	str	r3, [r0, #0]
       return -1;
1a00073c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000740:	4770      	bx	lr
1a000742:	Address 0x000000001a000742 is out of bounds.


1a000744 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000744:	4b05      	ldr	r3, [pc, #20]	; (1a00075c <_sbrk_r+0x18>)
1a000746:	681b      	ldr	r3, [r3, #0]
1a000748:	b123      	cbz	r3, 1a000754 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00074a:	4b04      	ldr	r3, [pc, #16]	; (1a00075c <_sbrk_r+0x18>)
1a00074c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00074e:	4401      	add	r1, r0
1a000750:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000752:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000754:	4b01      	ldr	r3, [pc, #4]	; (1a00075c <_sbrk_r+0x18>)
1a000756:	4a02      	ldr	r2, [pc, #8]	; (1a000760 <_sbrk_r+0x1c>)
1a000758:	601a      	str	r2, [r3, #0]
1a00075a:	e7f6      	b.n	1a00074a <_sbrk_r+0x6>
1a00075c:	10000194 	.word	0x10000194
1a000760:	10002c74 	.word	0x10002c74

1a000764 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000764:	b538      	push	{r3, r4, r5, lr}
1a000766:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000768:	f010 0f07 	tst.w	r0, #7
1a00076c:	d002      	beq.n	1a000774 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00076e:	f020 0407 	bic.w	r4, r0, #7
1a000772:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000774:	f000 fe4e 	bl	1a001414 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000778:	4b13      	ldr	r3, [pc, #76]	; (1a0007c8 <pvPortMalloc+0x64>)
1a00077a:	681b      	ldr	r3, [r3, #0]
1a00077c:	b17b      	cbz	r3, 1a00079e <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00077e:	4b13      	ldr	r3, [pc, #76]	; (1a0007cc <pvPortMalloc+0x68>)
1a000780:	681b      	ldr	r3, [r3, #0]
1a000782:	441c      	add	r4, r3
1a000784:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000788:	4294      	cmp	r4, r2
1a00078a:	d80e      	bhi.n	1a0007aa <pvPortMalloc+0x46>
1a00078c:	42a3      	cmp	r3, r4
1a00078e:	d310      	bcc.n	1a0007b2 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000790:	f000 feda 	bl	1a001548 <xTaskResumeAll>
void *pvReturn = NULL;
1a000794:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000796:	f000 fbfa 	bl	1a000f8e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a00079a:	4628      	mov	r0, r5
1a00079c:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00079e:	4b0c      	ldr	r3, [pc, #48]	; (1a0007d0 <pvPortMalloc+0x6c>)
1a0007a0:	f023 0307 	bic.w	r3, r3, #7
1a0007a4:	4a08      	ldr	r2, [pc, #32]	; (1a0007c8 <pvPortMalloc+0x64>)
1a0007a6:	6013      	str	r3, [r2, #0]
1a0007a8:	e7e9      	b.n	1a00077e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a0007aa:	f000 fecd 	bl	1a001548 <xTaskResumeAll>
void *pvReturn = NULL;
1a0007ae:	2500      	movs	r5, #0
1a0007b0:	e7f1      	b.n	1a000796 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0007b2:	4a05      	ldr	r2, [pc, #20]	; (1a0007c8 <pvPortMalloc+0x64>)
1a0007b4:	6815      	ldr	r5, [r2, #0]
1a0007b6:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0007b8:	4b04      	ldr	r3, [pc, #16]	; (1a0007cc <pvPortMalloc+0x68>)
1a0007ba:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a0007bc:	f000 fec4 	bl	1a001548 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0007c0:	2d00      	cmp	r5, #0
1a0007c2:	d1ea      	bne.n	1a00079a <pvPortMalloc+0x36>
1a0007c4:	e7e7      	b.n	1a000796 <pvPortMalloc+0x32>
1a0007c6:	bf00      	nop
1a0007c8:	10000198 	.word	0x10000198
1a0007cc:	1000219c 	.word	0x1000219c
1a0007d0:	100001a4 	.word	0x100001a4

1a0007d4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a0007d4:	b140      	cbz	r0, 1a0007e8 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0007d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007da:	f383 8811 	msr	BASEPRI, r3
1a0007de:	f3bf 8f6f 	isb	sy
1a0007e2:	f3bf 8f4f 	dsb	sy
1a0007e6:	e7fe      	b.n	1a0007e6 <vPortFree+0x12>
}
1a0007e8:	4770      	bx	lr

1a0007ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0007ea:	b510      	push	{r4, lr}
1a0007ec:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0007ee:	f001 fbd9 	bl	1a001fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0007f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0007f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0007f6:	429a      	cmp	r2, r3
1a0007f8:	d004      	beq.n	1a000804 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0007fa:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0007fc:	f001 fbf4 	bl	1a001fe8 <vPortExitCritical>

	return xReturn;
}
1a000800:	4620      	mov	r0, r4
1a000802:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000804:	2401      	movs	r4, #1
1a000806:	e7f9      	b.n	1a0007fc <prvIsQueueFull+0x12>

1a000808 <prvIsQueueEmpty>:
{
1a000808:	b510      	push	{r4, lr}
1a00080a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00080c:	f001 fbca 	bl	1a001fa4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000812:	b123      	cbz	r3, 1a00081e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000814:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000816:	f001 fbe7 	bl	1a001fe8 <vPortExitCritical>
}
1a00081a:	4620      	mov	r0, r4
1a00081c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00081e:	2401      	movs	r4, #1
1a000820:	e7f9      	b.n	1a000816 <prvIsQueueEmpty+0xe>

1a000822 <prvCopyDataToQueue>:
{
1a000822:	b570      	push	{r4, r5, r6, lr}
1a000824:	4604      	mov	r4, r0
1a000826:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000828:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00082a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00082c:	b95a      	cbnz	r2, 1a000846 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00082e:	6803      	ldr	r3, [r0, #0]
1a000830:	b11b      	cbz	r3, 1a00083a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000832:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000834:	3501      	adds	r5, #1
1a000836:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000838:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00083a:	6840      	ldr	r0, [r0, #4]
1a00083c:	f001 f890 	bl	1a001960 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000840:	2300      	movs	r3, #0
1a000842:	6063      	str	r3, [r4, #4]
1a000844:	e7f6      	b.n	1a000834 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000846:	b96e      	cbnz	r6, 1a000864 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000848:	6880      	ldr	r0, [r0, #8]
1a00084a:	f003 fa55 	bl	1a003cf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a00084e:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000850:	68a3      	ldr	r3, [r4, #8]
1a000852:	4413      	add	r3, r2
1a000854:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000856:	6862      	ldr	r2, [r4, #4]
1a000858:	4293      	cmp	r3, r2
1a00085a:	d319      	bcc.n	1a000890 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a00085c:	6823      	ldr	r3, [r4, #0]
1a00085e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000860:	2000      	movs	r0, #0
1a000862:	e7e7      	b.n	1a000834 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000864:	68c0      	ldr	r0, [r0, #12]
1a000866:	f003 fa47 	bl	1a003cf8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a00086a:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00086c:	4252      	negs	r2, r2
1a00086e:	68e3      	ldr	r3, [r4, #12]
1a000870:	4413      	add	r3, r2
1a000872:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000874:	6821      	ldr	r1, [r4, #0]
1a000876:	428b      	cmp	r3, r1
1a000878:	d202      	bcs.n	1a000880 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a00087a:	6863      	ldr	r3, [r4, #4]
1a00087c:	441a      	add	r2, r3
1a00087e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000880:	2e02      	cmp	r6, #2
1a000882:	d001      	beq.n	1a000888 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000884:	2000      	movs	r0, #0
1a000886:	e7d5      	b.n	1a000834 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000888:	b125      	cbz	r5, 1a000894 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a00088a:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a00088c:	2000      	movs	r0, #0
1a00088e:	e7d1      	b.n	1a000834 <prvCopyDataToQueue+0x12>
1a000890:	2000      	movs	r0, #0
1a000892:	e7cf      	b.n	1a000834 <prvCopyDataToQueue+0x12>
1a000894:	2000      	movs	r0, #0
1a000896:	e7cd      	b.n	1a000834 <prvCopyDataToQueue+0x12>

1a000898 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000898:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00089a:	b172      	cbz	r2, 1a0008ba <prvCopyDataFromQueue+0x22>
{
1a00089c:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00089e:	68c3      	ldr	r3, [r0, #12]
1a0008a0:	4413      	add	r3, r2
1a0008a2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0008a4:	6844      	ldr	r4, [r0, #4]
1a0008a6:	42a3      	cmp	r3, r4
1a0008a8:	d301      	bcc.n	1a0008ae <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0008aa:	6803      	ldr	r3, [r0, #0]
1a0008ac:	60c3      	str	r3, [r0, #12]
1a0008ae:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0008b0:	68c1      	ldr	r1, [r0, #12]
1a0008b2:	4620      	mov	r0, r4
1a0008b4:	f003 fa20 	bl	1a003cf8 <memcpy>
}
1a0008b8:	bd10      	pop	{r4, pc}
1a0008ba:	4770      	bx	lr

1a0008bc <prvUnlockQueue>:
{
1a0008bc:	b538      	push	{r3, r4, r5, lr}
1a0008be:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0008c0:	f001 fb70 	bl	1a001fa4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0008c4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0008c8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0008ca:	e003      	b.n	1a0008d4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0008cc:	f001 f832 	bl	1a001934 <vTaskMissedYield>
			--cTxLock;
1a0008d0:	3c01      	subs	r4, #1
1a0008d2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0008d4:	2c00      	cmp	r4, #0
1a0008d6:	dd08      	ble.n	1a0008ea <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0008d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0008da:	b133      	cbz	r3, 1a0008ea <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0008dc:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0008e0:	f000 ff96 	bl	1a001810 <xTaskRemoveFromEventList>
1a0008e4:	2800      	cmp	r0, #0
1a0008e6:	d0f3      	beq.n	1a0008d0 <prvUnlockQueue+0x14>
1a0008e8:	e7f0      	b.n	1a0008cc <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0008ea:	23ff      	movs	r3, #255	; 0xff
1a0008ec:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0008f0:	f001 fb7a 	bl	1a001fe8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0008f4:	f001 fb56 	bl	1a001fa4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0008f8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0008fc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008fe:	e003      	b.n	1a000908 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000900:	f001 f818 	bl	1a001934 <vTaskMissedYield>
				--cRxLock;
1a000904:	3c01      	subs	r4, #1
1a000906:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000908:	2c00      	cmp	r4, #0
1a00090a:	dd08      	ble.n	1a00091e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00090c:	692b      	ldr	r3, [r5, #16]
1a00090e:	b133      	cbz	r3, 1a00091e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000910:	f105 0010 	add.w	r0, r5, #16
1a000914:	f000 ff7c 	bl	1a001810 <xTaskRemoveFromEventList>
1a000918:	2800      	cmp	r0, #0
1a00091a:	d0f3      	beq.n	1a000904 <prvUnlockQueue+0x48>
1a00091c:	e7f0      	b.n	1a000900 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00091e:	23ff      	movs	r3, #255	; 0xff
1a000920:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000924:	f001 fb60 	bl	1a001fe8 <vPortExitCritical>
}
1a000928:	bd38      	pop	{r3, r4, r5, pc}
1a00092a:	Address 0x000000001a00092a is out of bounds.


1a00092c <xQueueGenericReset>:
{
1a00092c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00092e:	b940      	cbnz	r0, 1a000942 <xQueueGenericReset+0x16>
1a000930:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000934:	f383 8811 	msr	BASEPRI, r3
1a000938:	f3bf 8f6f 	isb	sy
1a00093c:	f3bf 8f4f 	dsb	sy
1a000940:	e7fe      	b.n	1a000940 <xQueueGenericReset+0x14>
1a000942:	4604      	mov	r4, r0
1a000944:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000946:	f001 fb2d 	bl	1a001fa4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00094a:	6821      	ldr	r1, [r4, #0]
1a00094c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00094e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000950:	fb03 1002 	mla	r0, r3, r2, r1
1a000954:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000956:	2000      	movs	r0, #0
1a000958:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00095a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a00095c:	3a01      	subs	r2, #1
1a00095e:	fb02 1303 	mla	r3, r2, r3, r1
1a000962:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000964:	23ff      	movs	r3, #255	; 0xff
1a000966:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00096a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a00096e:	b9a5      	cbnz	r5, 1a00099a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000970:	6923      	ldr	r3, [r4, #16]
1a000972:	b91b      	cbnz	r3, 1a00097c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000974:	f001 fb38 	bl	1a001fe8 <vPortExitCritical>
}
1a000978:	2001      	movs	r0, #1
1a00097a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00097c:	f104 0010 	add.w	r0, r4, #16
1a000980:	f000 ff46 	bl	1a001810 <xTaskRemoveFromEventList>
1a000984:	2800      	cmp	r0, #0
1a000986:	d0f5      	beq.n	1a000974 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000988:	4b08      	ldr	r3, [pc, #32]	; (1a0009ac <xQueueGenericReset+0x80>)
1a00098a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00098e:	601a      	str	r2, [r3, #0]
1a000990:	f3bf 8f4f 	dsb	sy
1a000994:	f3bf 8f6f 	isb	sy
1a000998:	e7ec      	b.n	1a000974 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00099a:	f104 0010 	add.w	r0, r4, #16
1a00099e:	f000 fa94 	bl	1a000eca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0009a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0009a6:	f000 fa90 	bl	1a000eca <vListInitialise>
1a0009aa:	e7e3      	b.n	1a000974 <xQueueGenericReset+0x48>
1a0009ac:	e000ed04 	.word	0xe000ed04

1a0009b0 <prvInitialiseNewQueue>:
{
1a0009b0:	b538      	push	{r3, r4, r5, lr}
1a0009b2:	461d      	mov	r5, r3
1a0009b4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0009b6:	460b      	mov	r3, r1
1a0009b8:	b149      	cbz	r1, 1a0009ce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0009ba:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0009bc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0009be:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0009c0:	2101      	movs	r1, #1
1a0009c2:	4620      	mov	r0, r4
1a0009c4:	f7ff ffb2 	bl	1a00092c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0009c8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0009cc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0009ce:	6024      	str	r4, [r4, #0]
1a0009d0:	e7f4      	b.n	1a0009bc <prvInitialiseNewQueue+0xc>

1a0009d2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0009d2:	b940      	cbnz	r0, 1a0009e6 <xQueueGenericCreateStatic+0x14>
1a0009d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009d8:	f383 8811 	msr	BASEPRI, r3
1a0009dc:	f3bf 8f6f 	isb	sy
1a0009e0:	f3bf 8f4f 	dsb	sy
1a0009e4:	e7fe      	b.n	1a0009e4 <xQueueGenericCreateStatic+0x12>
	{
1a0009e6:	b510      	push	{r4, lr}
1a0009e8:	b084      	sub	sp, #16
1a0009ea:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0009ec:	b153      	cbz	r3, 1a000a04 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0009ee:	b192      	cbz	r2, 1a000a16 <xQueueGenericCreateStatic+0x44>
1a0009f0:	b989      	cbnz	r1, 1a000a16 <xQueueGenericCreateStatic+0x44>
1a0009f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f6:	f383 8811 	msr	BASEPRI, r3
1a0009fa:	f3bf 8f6f 	isb	sy
1a0009fe:	f3bf 8f4f 	dsb	sy
1a000a02:	e7fe      	b.n	1a000a02 <xQueueGenericCreateStatic+0x30>
1a000a04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a08:	f383 8811 	msr	BASEPRI, r3
1a000a0c:	f3bf 8f6f 	isb	sy
1a000a10:	f3bf 8f4f 	dsb	sy
1a000a14:	e7fe      	b.n	1a000a14 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000a16:	b94a      	cbnz	r2, 1a000a2c <xQueueGenericCreateStatic+0x5a>
1a000a18:	b141      	cbz	r1, 1a000a2c <xQueueGenericCreateStatic+0x5a>
1a000a1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a1e:	f383 8811 	msr	BASEPRI, r3
1a000a22:	f3bf 8f6f 	isb	sy
1a000a26:	f3bf 8f4f 	dsb	sy
1a000a2a:	e7fe      	b.n	1a000a2a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000a2c:	2050      	movs	r0, #80	; 0x50
1a000a2e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000a30:	9803      	ldr	r0, [sp, #12]
1a000a32:	2850      	cmp	r0, #80	; 0x50
1a000a34:	d008      	beq.n	1a000a48 <xQueueGenericCreateStatic+0x76>
1a000a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a3a:	f383 8811 	msr	BASEPRI, r3
1a000a3e:	f3bf 8f6f 	isb	sy
1a000a42:	f3bf 8f4f 	dsb	sy
1a000a46:	e7fe      	b.n	1a000a46 <xQueueGenericCreateStatic+0x74>
1a000a48:	4620      	mov	r0, r4
1a000a4a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000a4c:	2301      	movs	r3, #1
1a000a4e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a52:	9400      	str	r4, [sp, #0]
1a000a54:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000a58:	f7ff ffaa 	bl	1a0009b0 <prvInitialiseNewQueue>
	}
1a000a5c:	4620      	mov	r0, r4
1a000a5e:	b004      	add	sp, #16
1a000a60:	bd10      	pop	{r4, pc}

1a000a62 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a62:	b940      	cbnz	r0, 1a000a76 <xQueueGenericCreate+0x14>
1a000a64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a68:	f383 8811 	msr	BASEPRI, r3
1a000a6c:	f3bf 8f6f 	isb	sy
1a000a70:	f3bf 8f4f 	dsb	sy
1a000a74:	e7fe      	b.n	1a000a74 <xQueueGenericCreate+0x12>
	{
1a000a76:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a78:	b083      	sub	sp, #12
1a000a7a:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000a7c:	b111      	cbz	r1, 1a000a84 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a7e:	fb01 f000 	mul.w	r0, r1, r0
1a000a82:	e000      	b.n	1a000a86 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000a84:	2000      	movs	r0, #0
1a000a86:	4617      	mov	r7, r2
1a000a88:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000a8a:	3050      	adds	r0, #80	; 0x50
1a000a8c:	f7ff fe6a 	bl	1a000764 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000a90:	4605      	mov	r5, r0
1a000a92:	b150      	cbz	r0, 1a000aaa <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000a94:	2300      	movs	r3, #0
1a000a96:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a9a:	9000      	str	r0, [sp, #0]
1a000a9c:	463b      	mov	r3, r7
1a000a9e:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000aa2:	4621      	mov	r1, r4
1a000aa4:	4630      	mov	r0, r6
1a000aa6:	f7ff ff83 	bl	1a0009b0 <prvInitialiseNewQueue>
	}
1a000aaa:	4628      	mov	r0, r5
1a000aac:	b003      	add	sp, #12
1a000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000ab0 <xQueueGenericSend>:
{
1a000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ab2:	b085      	sub	sp, #20
1a000ab4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000ab6:	b160      	cbz	r0, 1a000ad2 <xQueueGenericSend+0x22>
1a000ab8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000aba:	b999      	cbnz	r1, 1a000ae4 <xQueueGenericSend+0x34>
1a000abc:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000abe:	b18a      	cbz	r2, 1a000ae4 <xQueueGenericSend+0x34>
1a000ac0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ac4:	f383 8811 	msr	BASEPRI, r3
1a000ac8:	f3bf 8f6f 	isb	sy
1a000acc:	f3bf 8f4f 	dsb	sy
1a000ad0:	e7fe      	b.n	1a000ad0 <xQueueGenericSend+0x20>
1a000ad2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ad6:	f383 8811 	msr	BASEPRI, r3
1a000ada:	f3bf 8f6f 	isb	sy
1a000ade:	f3bf 8f4f 	dsb	sy
1a000ae2:	e7fe      	b.n	1a000ae2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000ae4:	2b02      	cmp	r3, #2
1a000ae6:	d10b      	bne.n	1a000b00 <xQueueGenericSend+0x50>
1a000ae8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000aea:	2a01      	cmp	r2, #1
1a000aec:	d008      	beq.n	1a000b00 <xQueueGenericSend+0x50>
1a000aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000af2:	f383 8811 	msr	BASEPRI, r3
1a000af6:	f3bf 8f6f 	isb	sy
1a000afa:	f3bf 8f4f 	dsb	sy
1a000afe:	e7fe      	b.n	1a000afe <xQueueGenericSend+0x4e>
1a000b00:	461e      	mov	r6, r3
1a000b02:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000b04:	f000 ff1c 	bl	1a001940 <xTaskGetSchedulerState>
1a000b08:	b950      	cbnz	r0, 1a000b20 <xQueueGenericSend+0x70>
1a000b0a:	9b01      	ldr	r3, [sp, #4]
1a000b0c:	b153      	cbz	r3, 1a000b24 <xQueueGenericSend+0x74>
1a000b0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b12:	f383 8811 	msr	BASEPRI, r3
1a000b16:	f3bf 8f6f 	isb	sy
1a000b1a:	f3bf 8f4f 	dsb	sy
1a000b1e:	e7fe      	b.n	1a000b1e <xQueueGenericSend+0x6e>
1a000b20:	2500      	movs	r5, #0
1a000b22:	e03a      	b.n	1a000b9a <xQueueGenericSend+0xea>
1a000b24:	2500      	movs	r5, #0
1a000b26:	e038      	b.n	1a000b9a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000b28:	4632      	mov	r2, r6
1a000b2a:	4639      	mov	r1, r7
1a000b2c:	4620      	mov	r0, r4
1a000b2e:	f7ff fe78 	bl	1a000822 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b34:	b94b      	cbnz	r3, 1a000b4a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000b36:	b1a8      	cbz	r0, 1a000b64 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000b38:	4b3b      	ldr	r3, [pc, #236]	; (1a000c28 <xQueueGenericSend+0x178>)
1a000b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b3e:	601a      	str	r2, [r3, #0]
1a000b40:	f3bf 8f4f 	dsb	sy
1a000b44:	f3bf 8f6f 	isb	sy
1a000b48:	e00c      	b.n	1a000b64 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b4e:	f000 fe5f 	bl	1a001810 <xTaskRemoveFromEventList>
1a000b52:	b138      	cbz	r0, 1a000b64 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000b54:	4b34      	ldr	r3, [pc, #208]	; (1a000c28 <xQueueGenericSend+0x178>)
1a000b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b5a:	601a      	str	r2, [r3, #0]
1a000b5c:	f3bf 8f4f 	dsb	sy
1a000b60:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000b64:	f001 fa40 	bl	1a001fe8 <vPortExitCritical>
				return pdPASS;
1a000b68:	2001      	movs	r0, #1
}
1a000b6a:	b005      	add	sp, #20
1a000b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000b6e:	f001 fa3b 	bl	1a001fe8 <vPortExitCritical>
					return errQUEUE_FULL;
1a000b72:	2000      	movs	r0, #0
1a000b74:	e7f9      	b.n	1a000b6a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000b76:	a802      	add	r0, sp, #8
1a000b78:	f000 fe90 	bl	1a00189c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000b7c:	2501      	movs	r5, #1
1a000b7e:	e019      	b.n	1a000bb4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000b80:	2300      	movs	r3, #0
1a000b82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b86:	e021      	b.n	1a000bcc <xQueueGenericSend+0x11c>
1a000b88:	2300      	movs	r3, #0
1a000b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b8e:	e023      	b.n	1a000bd8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000b90:	4620      	mov	r0, r4
1a000b92:	f7ff fe93 	bl	1a0008bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000b96:	f000 fcd7 	bl	1a001548 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000b9a:	f001 fa03 	bl	1a001fa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000ba2:	429a      	cmp	r2, r3
1a000ba4:	d3c0      	bcc.n	1a000b28 <xQueueGenericSend+0x78>
1a000ba6:	2e02      	cmp	r6, #2
1a000ba8:	d0be      	beq.n	1a000b28 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000baa:	9b01      	ldr	r3, [sp, #4]
1a000bac:	2b00      	cmp	r3, #0
1a000bae:	d0de      	beq.n	1a000b6e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000bb0:	2d00      	cmp	r5, #0
1a000bb2:	d0e0      	beq.n	1a000b76 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000bb4:	f001 fa18 	bl	1a001fe8 <vPortExitCritical>
		vTaskSuspendAll();
1a000bb8:	f000 fc2c 	bl	1a001414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000bbc:	f001 f9f2 	bl	1a001fa4 <vPortEnterCritical>
1a000bc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000bc4:	b25b      	sxtb	r3, r3
1a000bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bca:	d0d9      	beq.n	1a000b80 <xQueueGenericSend+0xd0>
1a000bcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000bd0:	b25b      	sxtb	r3, r3
1a000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bd6:	d0d7      	beq.n	1a000b88 <xQueueGenericSend+0xd8>
1a000bd8:	f001 fa06 	bl	1a001fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000bdc:	a901      	add	r1, sp, #4
1a000bde:	a802      	add	r0, sp, #8
1a000be0:	f000 fe68 	bl	1a0018b4 <xTaskCheckForTimeOut>
1a000be4:	b9c8      	cbnz	r0, 1a000c1a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000be6:	4620      	mov	r0, r4
1a000be8:	f7ff fdff 	bl	1a0007ea <prvIsQueueFull>
1a000bec:	2800      	cmp	r0, #0
1a000bee:	d0cf      	beq.n	1a000b90 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000bf0:	9901      	ldr	r1, [sp, #4]
1a000bf2:	f104 0010 	add.w	r0, r4, #16
1a000bf6:	f000 fdd7 	bl	1a0017a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000bfa:	4620      	mov	r0, r4
1a000bfc:	f7ff fe5e 	bl	1a0008bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000c00:	f000 fca2 	bl	1a001548 <xTaskResumeAll>
1a000c04:	2800      	cmp	r0, #0
1a000c06:	d1c8      	bne.n	1a000b9a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000c08:	4b07      	ldr	r3, [pc, #28]	; (1a000c28 <xQueueGenericSend+0x178>)
1a000c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c0e:	601a      	str	r2, [r3, #0]
1a000c10:	f3bf 8f4f 	dsb	sy
1a000c14:	f3bf 8f6f 	isb	sy
1a000c18:	e7bf      	b.n	1a000b9a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000c1a:	4620      	mov	r0, r4
1a000c1c:	f7ff fe4e 	bl	1a0008bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000c20:	f000 fc92 	bl	1a001548 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000c24:	2000      	movs	r0, #0
1a000c26:	e7a0      	b.n	1a000b6a <xQueueGenericSend+0xba>
1a000c28:	e000ed04 	.word	0xe000ed04

1a000c2c <xQueueGenericSendFromISR>:
{
1a000c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000c30:	b160      	cbz	r0, 1a000c4c <xQueueGenericSendFromISR+0x20>
1a000c32:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c34:	b999      	cbnz	r1, 1a000c5e <xQueueGenericSendFromISR+0x32>
1a000c36:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000c38:	b188      	cbz	r0, 1a000c5e <xQueueGenericSendFromISR+0x32>
1a000c3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c3e:	f383 8811 	msr	BASEPRI, r3
1a000c42:	f3bf 8f6f 	isb	sy
1a000c46:	f3bf 8f4f 	dsb	sy
1a000c4a:	e7fe      	b.n	1a000c4a <xQueueGenericSendFromISR+0x1e>
1a000c4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c50:	f383 8811 	msr	BASEPRI, r3
1a000c54:	f3bf 8f6f 	isb	sy
1a000c58:	f3bf 8f4f 	dsb	sy
1a000c5c:	e7fe      	b.n	1a000c5c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c5e:	2b02      	cmp	r3, #2
1a000c60:	d10b      	bne.n	1a000c7a <xQueueGenericSendFromISR+0x4e>
1a000c62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000c64:	2801      	cmp	r0, #1
1a000c66:	d008      	beq.n	1a000c7a <xQueueGenericSendFromISR+0x4e>
1a000c68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c6c:	f383 8811 	msr	BASEPRI, r3
1a000c70:	f3bf 8f6f 	isb	sy
1a000c74:	f3bf 8f4f 	dsb	sy
1a000c78:	e7fe      	b.n	1a000c78 <xQueueGenericSendFromISR+0x4c>
1a000c7a:	461f      	mov	r7, r3
1a000c7c:	4690      	mov	r8, r2
1a000c7e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000c80:	f001 faba 	bl	1a0021f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000c84:	f3ef 8611 	mrs	r6, BASEPRI
1a000c88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c8c:	f383 8811 	msr	BASEPRI, r3
1a000c90:	f3bf 8f6f 	isb	sy
1a000c94:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c9c:	429a      	cmp	r2, r3
1a000c9e:	d303      	bcc.n	1a000ca8 <xQueueGenericSendFromISR+0x7c>
1a000ca0:	2f02      	cmp	r7, #2
1a000ca2:	d001      	beq.n	1a000ca8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000ca4:	2000      	movs	r0, #0
1a000ca6:	e00f      	b.n	1a000cc8 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000ca8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000cac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000cae:	463a      	mov	r2, r7
1a000cb0:	4649      	mov	r1, r9
1a000cb2:	4620      	mov	r0, r4
1a000cb4:	f7ff fdb5 	bl	1a000822 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000cb8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000cbc:	d008      	beq.n	1a000cd0 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000cbe:	1c6b      	adds	r3, r5, #1
1a000cc0:	b25b      	sxtb	r3, r3
1a000cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000cc6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000cc8:	f386 8811 	msr	BASEPRI, r6
}
1a000ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000cd2:	b15b      	cbz	r3, 1a000cec <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000cd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000cd8:	f000 fd9a 	bl	1a001810 <xTaskRemoveFromEventList>
1a000cdc:	b140      	cbz	r0, 1a000cf0 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000cde:	f1b8 0f00 	cmp.w	r8, #0
1a000ce2:	d007      	beq.n	1a000cf4 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000ce4:	2001      	movs	r0, #1
1a000ce6:	f8c8 0000 	str.w	r0, [r8]
1a000cea:	e7ed      	b.n	1a000cc8 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000cec:	2001      	movs	r0, #1
1a000cee:	e7eb      	b.n	1a000cc8 <xQueueGenericSendFromISR+0x9c>
1a000cf0:	2001      	movs	r0, #1
1a000cf2:	e7e9      	b.n	1a000cc8 <xQueueGenericSendFromISR+0x9c>
1a000cf4:	2001      	movs	r0, #1
1a000cf6:	e7e7      	b.n	1a000cc8 <xQueueGenericSendFromISR+0x9c>

1a000cf8 <xQueueReceive>:
{
1a000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cfa:	b085      	sub	sp, #20
1a000cfc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000cfe:	b160      	cbz	r0, 1a000d1a <xQueueReceive+0x22>
1a000d00:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d02:	b999      	cbnz	r1, 1a000d2c <xQueueReceive+0x34>
1a000d04:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000d06:	b18b      	cbz	r3, 1a000d2c <xQueueReceive+0x34>
	__asm volatile
1a000d08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d0c:	f383 8811 	msr	BASEPRI, r3
1a000d10:	f3bf 8f6f 	isb	sy
1a000d14:	f3bf 8f4f 	dsb	sy
1a000d18:	e7fe      	b.n	1a000d18 <xQueueReceive+0x20>
1a000d1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d1e:	f383 8811 	msr	BASEPRI, r3
1a000d22:	f3bf 8f6f 	isb	sy
1a000d26:	f3bf 8f4f 	dsb	sy
1a000d2a:	e7fe      	b.n	1a000d2a <xQueueReceive+0x32>
1a000d2c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d2e:	f000 fe07 	bl	1a001940 <xTaskGetSchedulerState>
1a000d32:	b950      	cbnz	r0, 1a000d4a <xQueueReceive+0x52>
1a000d34:	9b01      	ldr	r3, [sp, #4]
1a000d36:	b153      	cbz	r3, 1a000d4e <xQueueReceive+0x56>
1a000d38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d3c:	f383 8811 	msr	BASEPRI, r3
1a000d40:	f3bf 8f6f 	isb	sy
1a000d44:	f3bf 8f4f 	dsb	sy
1a000d48:	e7fe      	b.n	1a000d48 <xQueueReceive+0x50>
1a000d4a:	2600      	movs	r6, #0
1a000d4c:	e03e      	b.n	1a000dcc <xQueueReceive+0xd4>
1a000d4e:	2600      	movs	r6, #0
1a000d50:	e03c      	b.n	1a000dcc <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000d52:	4639      	mov	r1, r7
1a000d54:	4620      	mov	r0, r4
1a000d56:	f7ff fd9f 	bl	1a000898 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000d5a:	3d01      	subs	r5, #1
1a000d5c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d5e:	6923      	ldr	r3, [r4, #16]
1a000d60:	b923      	cbnz	r3, 1a000d6c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000d62:	f001 f941 	bl	1a001fe8 <vPortExitCritical>
				return pdPASS;
1a000d66:	2001      	movs	r0, #1
}
1a000d68:	b005      	add	sp, #20
1a000d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d6c:	f104 0010 	add.w	r0, r4, #16
1a000d70:	f000 fd4e 	bl	1a001810 <xTaskRemoveFromEventList>
1a000d74:	2800      	cmp	r0, #0
1a000d76:	d0f4      	beq.n	1a000d62 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000d78:	4b34      	ldr	r3, [pc, #208]	; (1a000e4c <xQueueReceive+0x154>)
1a000d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d7e:	601a      	str	r2, [r3, #0]
1a000d80:	f3bf 8f4f 	dsb	sy
1a000d84:	f3bf 8f6f 	isb	sy
1a000d88:	e7eb      	b.n	1a000d62 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000d8a:	f001 f92d 	bl	1a001fe8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000d8e:	2000      	movs	r0, #0
1a000d90:	e7ea      	b.n	1a000d68 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d92:	a802      	add	r0, sp, #8
1a000d94:	f000 fd82 	bl	1a00189c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000d98:	2601      	movs	r6, #1
1a000d9a:	e021      	b.n	1a000de0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000d9c:	2300      	movs	r3, #0
1a000d9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000da2:	e029      	b.n	1a000df8 <xQueueReceive+0x100>
1a000da4:	2300      	movs	r3, #0
1a000da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000daa:	e02b      	b.n	1a000e04 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000dac:	4620      	mov	r0, r4
1a000dae:	f7ff fd85 	bl	1a0008bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000db2:	f000 fbc9 	bl	1a001548 <xTaskResumeAll>
1a000db6:	e009      	b.n	1a000dcc <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000db8:	4620      	mov	r0, r4
1a000dba:	f7ff fd7f 	bl	1a0008bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000dbe:	f000 fbc3 	bl	1a001548 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000dc2:	4620      	mov	r0, r4
1a000dc4:	f7ff fd20 	bl	1a000808 <prvIsQueueEmpty>
1a000dc8:	2800      	cmp	r0, #0
1a000dca:	d13d      	bne.n	1a000e48 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000dcc:	f001 f8ea 	bl	1a001fa4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000dd0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000dd2:	2d00      	cmp	r5, #0
1a000dd4:	d1bd      	bne.n	1a000d52 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dd6:	9b01      	ldr	r3, [sp, #4]
1a000dd8:	2b00      	cmp	r3, #0
1a000dda:	d0d6      	beq.n	1a000d8a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000ddc:	2e00      	cmp	r6, #0
1a000dde:	d0d8      	beq.n	1a000d92 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000de0:	f001 f902 	bl	1a001fe8 <vPortExitCritical>
		vTaskSuspendAll();
1a000de4:	f000 fb16 	bl	1a001414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000de8:	f001 f8dc 	bl	1a001fa4 <vPortEnterCritical>
1a000dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000df0:	b25b      	sxtb	r3, r3
1a000df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000df6:	d0d1      	beq.n	1a000d9c <xQueueReceive+0xa4>
1a000df8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000dfc:	b25b      	sxtb	r3, r3
1a000dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e02:	d0cf      	beq.n	1a000da4 <xQueueReceive+0xac>
1a000e04:	f001 f8f0 	bl	1a001fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e08:	a901      	add	r1, sp, #4
1a000e0a:	a802      	add	r0, sp, #8
1a000e0c:	f000 fd52 	bl	1a0018b4 <xTaskCheckForTimeOut>
1a000e10:	2800      	cmp	r0, #0
1a000e12:	d1d1      	bne.n	1a000db8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e14:	4620      	mov	r0, r4
1a000e16:	f7ff fcf7 	bl	1a000808 <prvIsQueueEmpty>
1a000e1a:	2800      	cmp	r0, #0
1a000e1c:	d0c6      	beq.n	1a000dac <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000e1e:	9901      	ldr	r1, [sp, #4]
1a000e20:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e24:	f000 fcc0 	bl	1a0017a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e28:	4620      	mov	r0, r4
1a000e2a:	f7ff fd47 	bl	1a0008bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e2e:	f000 fb8b 	bl	1a001548 <xTaskResumeAll>
1a000e32:	2800      	cmp	r0, #0
1a000e34:	d1ca      	bne.n	1a000dcc <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000e36:	4b05      	ldr	r3, [pc, #20]	; (1a000e4c <xQueueReceive+0x154>)
1a000e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e3c:	601a      	str	r2, [r3, #0]
1a000e3e:	f3bf 8f4f 	dsb	sy
1a000e42:	f3bf 8f6f 	isb	sy
1a000e46:	e7c1      	b.n	1a000dcc <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000e48:	2000      	movs	r0, #0
1a000e4a:	e78d      	b.n	1a000d68 <xQueueReceive+0x70>
1a000e4c:	e000ed04 	.word	0xe000ed04

1a000e50 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e50:	2300      	movs	r3, #0
1a000e52:	2b07      	cmp	r3, #7
1a000e54:	d80c      	bhi.n	1a000e70 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000e56:	4a07      	ldr	r2, [pc, #28]	; (1a000e74 <vQueueAddToRegistry+0x24>)
1a000e58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000e5c:	b10a      	cbz	r2, 1a000e62 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e5e:	3301      	adds	r3, #1
1a000e60:	e7f7      	b.n	1a000e52 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000e62:	4a04      	ldr	r2, [pc, #16]	; (1a000e74 <vQueueAddToRegistry+0x24>)
1a000e64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000e6c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000e6e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000e70:	4770      	bx	lr
1a000e72:	bf00      	nop
1a000e74:	10002c2c 	.word	0x10002c2c

1a000e78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000e78:	b570      	push	{r4, r5, r6, lr}
1a000e7a:	4604      	mov	r4, r0
1a000e7c:	460d      	mov	r5, r1
1a000e7e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000e80:	f001 f890 	bl	1a001fa4 <vPortEnterCritical>
1a000e84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e88:	b25b      	sxtb	r3, r3
1a000e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e8e:	d00d      	beq.n	1a000eac <vQueueWaitForMessageRestricted+0x34>
1a000e90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e94:	b25b      	sxtb	r3, r3
1a000e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e9a:	d00b      	beq.n	1a000eb4 <vQueueWaitForMessageRestricted+0x3c>
1a000e9c:	f001 f8a4 	bl	1a001fe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000ea2:	b15b      	cbz	r3, 1a000ebc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000ea4:	4620      	mov	r0, r4
1a000ea6:	f7ff fd09 	bl	1a0008bc <prvUnlockQueue>
	}
1a000eaa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000eac:	2300      	movs	r3, #0
1a000eae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000eb2:	e7ed      	b.n	1a000e90 <vQueueWaitForMessageRestricted+0x18>
1a000eb4:	2300      	movs	r3, #0
1a000eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000eba:	e7ef      	b.n	1a000e9c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000ebc:	4632      	mov	r2, r6
1a000ebe:	4629      	mov	r1, r5
1a000ec0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ec4:	f000 fc88 	bl	1a0017d8 <vTaskPlaceOnEventListRestricted>
1a000ec8:	e7ec      	b.n	1a000ea4 <vQueueWaitForMessageRestricted+0x2c>

1a000eca <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000eca:	f100 0308 	add.w	r3, r0, #8
1a000ece:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ed4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ed6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ed8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000eda:	2300      	movs	r3, #0
1a000edc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000ede:	4770      	bx	lr

1a000ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000ee0:	2300      	movs	r3, #0
1a000ee2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000ee4:	4770      	bx	lr

1a000ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000ee6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000ee8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000eea:	689a      	ldr	r2, [r3, #8]
1a000eec:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000eee:	689a      	ldr	r2, [r3, #8]
1a000ef0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000ef2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000ef4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000ef6:	6803      	ldr	r3, [r0, #0]
1a000ef8:	3301      	adds	r3, #1
1a000efa:	6003      	str	r3, [r0, #0]
}
1a000efc:	4770      	bx	lr

1a000efe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000efe:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000f00:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000f02:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000f06:	d002      	beq.n	1a000f0e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f08:	f100 0208 	add.w	r2, r0, #8
1a000f0c:	e002      	b.n	1a000f14 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000f0e:	6902      	ldr	r2, [r0, #16]
1a000f10:	e004      	b.n	1a000f1c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f12:	461a      	mov	r2, r3
1a000f14:	6853      	ldr	r3, [r2, #4]
1a000f16:	681c      	ldr	r4, [r3, #0]
1a000f18:	42ac      	cmp	r4, r5
1a000f1a:	d9fa      	bls.n	1a000f12 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000f1c:	6853      	ldr	r3, [r2, #4]
1a000f1e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000f20:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000f22:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000f24:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f26:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f28:	6803      	ldr	r3, [r0, #0]
1a000f2a:	3301      	adds	r3, #1
1a000f2c:	6003      	str	r3, [r0, #0]
}
1a000f2e:	bc30      	pop	{r4, r5}
1a000f30:	4770      	bx	lr

1a000f32 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000f32:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000f34:	6842      	ldr	r2, [r0, #4]
1a000f36:	6881      	ldr	r1, [r0, #8]
1a000f38:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000f3a:	6882      	ldr	r2, [r0, #8]
1a000f3c:	6841      	ldr	r1, [r0, #4]
1a000f3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000f40:	685a      	ldr	r2, [r3, #4]
1a000f42:	4282      	cmp	r2, r0
1a000f44:	d006      	beq.n	1a000f54 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000f46:	2200      	movs	r2, #0
1a000f48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000f4a:	681a      	ldr	r2, [r3, #0]
1a000f4c:	3a01      	subs	r2, #1
1a000f4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000f50:	6818      	ldr	r0, [r3, #0]
}
1a000f52:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000f54:	6882      	ldr	r2, [r0, #8]
1a000f56:	605a      	str	r2, [r3, #4]
1a000f58:	e7f5      	b.n	1a000f46 <uxListRemove+0x14>
1a000f5a:	Address 0x000000001a000f5a is out of bounds.


1a000f5c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000f5c:	4b03      	ldr	r3, [pc, #12]	; (1a000f6c <vApplicationGetIdleTaskMemory+0x10>)
1a000f5e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000f60:	4b03      	ldr	r3, [pc, #12]	; (1a000f70 <vApplicationGetIdleTaskMemory+0x14>)
1a000f62:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000f64:	235a      	movs	r3, #90	; 0x5a
1a000f66:	6013      	str	r3, [r2, #0]
}
1a000f68:	4770      	bx	lr
1a000f6a:	bf00      	nop
1a000f6c:	100028a8 	.word	0x100028a8
1a000f70:	100021a0 	.word	0x100021a0

1a000f74 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000f74:	4b03      	ldr	r3, [pc, #12]	; (1a000f84 <vApplicationGetTimerTaskMemory+0x10>)
1a000f76:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000f78:	4b03      	ldr	r3, [pc, #12]	; (1a000f88 <vApplicationGetTimerTaskMemory+0x14>)
1a000f7a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000f7c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000f80:	6013      	str	r3, [r2, #0]
1a000f82:	4770      	bx	lr
1a000f84:	10002908 	.word	0x10002908
1a000f88:	10002308 	.word	0x10002308

1a000f8c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000f8c:	e7fe      	b.n	1a000f8c <vApplicationStackOverflowHook>

1a000f8e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000f8e:	e7fe      	b.n	1a000f8e <vApplicationMallocFailedHook>

1a000f90 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000f90:	4b08      	ldr	r3, [pc, #32]	; (1a000fb4 <prvResetNextTaskUnblockTime+0x24>)
1a000f92:	681b      	ldr	r3, [r3, #0]
1a000f94:	681b      	ldr	r3, [r3, #0]
1a000f96:	b13b      	cbz	r3, 1a000fa8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000f98:	4b06      	ldr	r3, [pc, #24]	; (1a000fb4 <prvResetNextTaskUnblockTime+0x24>)
1a000f9a:	681b      	ldr	r3, [r3, #0]
1a000f9c:	68db      	ldr	r3, [r3, #12]
1a000f9e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000fa0:	685a      	ldr	r2, [r3, #4]
1a000fa2:	4b05      	ldr	r3, [pc, #20]	; (1a000fb8 <prvResetNextTaskUnblockTime+0x28>)
1a000fa4:	601a      	str	r2, [r3, #0]
	}
}
1a000fa6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000fa8:	4b03      	ldr	r3, [pc, #12]	; (1a000fb8 <prvResetNextTaskUnblockTime+0x28>)
1a000faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000fae:	601a      	str	r2, [r3, #0]
1a000fb0:	4770      	bx	lr
1a000fb2:	bf00      	nop
1a000fb4:	1000296c 	.word	0x1000296c
1a000fb8:	10002a40 	.word	0x10002a40

1a000fbc <prvInitialiseNewTask>:
{
1a000fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000fc0:	4681      	mov	r9, r0
1a000fc2:	460d      	mov	r5, r1
1a000fc4:	4617      	mov	r7, r2
1a000fc6:	469a      	mov	sl, r3
1a000fc8:	9e08      	ldr	r6, [sp, #32]
1a000fca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000fce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000fd0:	0092      	lsls	r2, r2, #2
1a000fd2:	21a5      	movs	r1, #165	; 0xa5
1a000fd4:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000fd6:	f002 fe9a 	bl	1a003d0e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000fdc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000fe0:	3a01      	subs	r2, #1
1a000fe2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000fe6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000fea:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000fec:	2300      	movs	r3, #0
1a000fee:	2b0f      	cmp	r3, #15
1a000ff0:	d807      	bhi.n	1a001002 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000ff2:	5ce9      	ldrb	r1, [r5, r3]
1a000ff4:	18e2      	adds	r2, r4, r3
1a000ff6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000ffa:	5cea      	ldrb	r2, [r5, r3]
1a000ffc:	b10a      	cbz	r2, 1a001002 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000ffe:	3301      	adds	r3, #1
1a001000:	e7f5      	b.n	1a000fee <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001002:	2300      	movs	r3, #0
1a001004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001008:	2e06      	cmp	r6, #6
1a00100a:	d900      	bls.n	1a00100e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a00100c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00100e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001010:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001012:	2500      	movs	r5, #0
1a001014:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001016:	1d20      	adds	r0, r4, #4
1a001018:	f7ff ff62 	bl	1a000ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a00101c:	f104 0018 	add.w	r0, r4, #24
1a001020:	f7ff ff5e 	bl	1a000ee0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001024:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001026:	f1c6 0607 	rsb	r6, r6, #7
1a00102a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a00102c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a00102e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001030:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001034:	4652      	mov	r2, sl
1a001036:	4649      	mov	r1, r9
1a001038:	4638      	mov	r0, r7
1a00103a:	f000 ff87 	bl	1a001f4c <pxPortInitialiseStack>
1a00103e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001040:	f1b8 0f00 	cmp.w	r8, #0
1a001044:	d001      	beq.n	1a00104a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001046:	f8c8 4000 	str.w	r4, [r8]
}
1a00104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00104e:	Address 0x000000001a00104e is out of bounds.


1a001050 <prvInitialiseTaskLists>:
{
1a001050:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001052:	2400      	movs	r4, #0
1a001054:	e007      	b.n	1a001066 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001056:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00105a:	0093      	lsls	r3, r2, #2
1a00105c:	480e      	ldr	r0, [pc, #56]	; (1a001098 <prvInitialiseTaskLists+0x48>)
1a00105e:	4418      	add	r0, r3
1a001060:	f7ff ff33 	bl	1a000eca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001064:	3401      	adds	r4, #1
1a001066:	2c06      	cmp	r4, #6
1a001068:	d9f5      	bls.n	1a001056 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00106a:	4d0c      	ldr	r5, [pc, #48]	; (1a00109c <prvInitialiseTaskLists+0x4c>)
1a00106c:	4628      	mov	r0, r5
1a00106e:	f7ff ff2c 	bl	1a000eca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001072:	4c0b      	ldr	r4, [pc, #44]	; (1a0010a0 <prvInitialiseTaskLists+0x50>)
1a001074:	4620      	mov	r0, r4
1a001076:	f7ff ff28 	bl	1a000eca <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00107a:	480a      	ldr	r0, [pc, #40]	; (1a0010a4 <prvInitialiseTaskLists+0x54>)
1a00107c:	f7ff ff25 	bl	1a000eca <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001080:	4809      	ldr	r0, [pc, #36]	; (1a0010a8 <prvInitialiseTaskLists+0x58>)
1a001082:	f7ff ff22 	bl	1a000eca <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001086:	4809      	ldr	r0, [pc, #36]	; (1a0010ac <prvInitialiseTaskLists+0x5c>)
1a001088:	f7ff ff1f 	bl	1a000eca <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00108c:	4b08      	ldr	r3, [pc, #32]	; (1a0010b0 <prvInitialiseTaskLists+0x60>)
1a00108e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001090:	4b08      	ldr	r3, [pc, #32]	; (1a0010b4 <prvInitialiseTaskLists+0x64>)
1a001092:	601c      	str	r4, [r3, #0]
}
1a001094:	bd38      	pop	{r3, r4, r5, pc}
1a001096:	bf00      	nop
1a001098:	10002974 	.word	0x10002974
1a00109c:	10002a18 	.word	0x10002a18
1a0010a0:	10002a2c 	.word	0x10002a2c
1a0010a4:	10002a48 	.word	0x10002a48
1a0010a8:	10002a74 	.word	0x10002a74
1a0010ac:	10002a60 	.word	0x10002a60
1a0010b0:	1000296c 	.word	0x1000296c
1a0010b4:	10002970 	.word	0x10002970

1a0010b8 <prvAddNewTaskToReadyList>:
{
1a0010b8:	b510      	push	{r4, lr}
1a0010ba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0010bc:	f000 ff72 	bl	1a001fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0010c0:	4a21      	ldr	r2, [pc, #132]	; (1a001148 <prvAddNewTaskToReadyList+0x90>)
1a0010c2:	6813      	ldr	r3, [r2, #0]
1a0010c4:	3301      	adds	r3, #1
1a0010c6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0010c8:	4b20      	ldr	r3, [pc, #128]	; (1a00114c <prvAddNewTaskToReadyList+0x94>)
1a0010ca:	681b      	ldr	r3, [r3, #0]
1a0010cc:	b15b      	cbz	r3, 1a0010e6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0010ce:	4b20      	ldr	r3, [pc, #128]	; (1a001150 <prvAddNewTaskToReadyList+0x98>)
1a0010d0:	681b      	ldr	r3, [r3, #0]
1a0010d2:	b96b      	cbnz	r3, 1a0010f0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0010d4:	4b1d      	ldr	r3, [pc, #116]	; (1a00114c <prvAddNewTaskToReadyList+0x94>)
1a0010d6:	681b      	ldr	r3, [r3, #0]
1a0010d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0010da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010dc:	429a      	cmp	r2, r3
1a0010de:	d807      	bhi.n	1a0010f0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0010e0:	4b1a      	ldr	r3, [pc, #104]	; (1a00114c <prvAddNewTaskToReadyList+0x94>)
1a0010e2:	601c      	str	r4, [r3, #0]
1a0010e4:	e004      	b.n	1a0010f0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0010e6:	4b19      	ldr	r3, [pc, #100]	; (1a00114c <prvAddNewTaskToReadyList+0x94>)
1a0010e8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0010ea:	6813      	ldr	r3, [r2, #0]
1a0010ec:	2b01      	cmp	r3, #1
1a0010ee:	d027      	beq.n	1a001140 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0010f0:	4a18      	ldr	r2, [pc, #96]	; (1a001154 <prvAddNewTaskToReadyList+0x9c>)
1a0010f2:	6813      	ldr	r3, [r2, #0]
1a0010f4:	3301      	adds	r3, #1
1a0010f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0010f8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0010fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010fc:	2201      	movs	r2, #1
1a0010fe:	409a      	lsls	r2, r3
1a001100:	4915      	ldr	r1, [pc, #84]	; (1a001158 <prvAddNewTaskToReadyList+0xa0>)
1a001102:	6808      	ldr	r0, [r1, #0]
1a001104:	4302      	orrs	r2, r0
1a001106:	600a      	str	r2, [r1, #0]
1a001108:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00110c:	009a      	lsls	r2, r3, #2
1a00110e:	1d21      	adds	r1, r4, #4
1a001110:	4812      	ldr	r0, [pc, #72]	; (1a00115c <prvAddNewTaskToReadyList+0xa4>)
1a001112:	4410      	add	r0, r2
1a001114:	f7ff fee7 	bl	1a000ee6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001118:	f000 ff66 	bl	1a001fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a00111c:	4b0c      	ldr	r3, [pc, #48]	; (1a001150 <prvAddNewTaskToReadyList+0x98>)
1a00111e:	681b      	ldr	r3, [r3, #0]
1a001120:	b16b      	cbz	r3, 1a00113e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001122:	4b0a      	ldr	r3, [pc, #40]	; (1a00114c <prvAddNewTaskToReadyList+0x94>)
1a001124:	681b      	ldr	r3, [r3, #0]
1a001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00112a:	429a      	cmp	r2, r3
1a00112c:	d207      	bcs.n	1a00113e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00112e:	4b0c      	ldr	r3, [pc, #48]	; (1a001160 <prvAddNewTaskToReadyList+0xa8>)
1a001130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001134:	601a      	str	r2, [r3, #0]
1a001136:	f3bf 8f4f 	dsb	sy
1a00113a:	f3bf 8f6f 	isb	sy
}
1a00113e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001140:	f7ff ff86 	bl	1a001050 <prvInitialiseTaskLists>
1a001144:	e7d4      	b.n	1a0010f0 <prvAddNewTaskToReadyList+0x38>
1a001146:	bf00      	nop
1a001148:	10002a00 	.word	0x10002a00
1a00114c:	10002968 	.word	0x10002968
1a001150:	10002a5c 	.word	0x10002a5c
1a001154:	10002a10 	.word	0x10002a10
1a001158:	10002a14 	.word	0x10002a14
1a00115c:	10002974 	.word	0x10002974
1a001160:	e000ed04 	.word	0xe000ed04

1a001164 <prvDeleteTCB>:
	{
1a001164:	b510      	push	{r4, lr}
1a001166:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001168:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00116c:	b933      	cbnz	r3, 1a00117c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a00116e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001170:	f7ff fb30 	bl	1a0007d4 <vPortFree>
				vPortFree( pxTCB );
1a001174:	4620      	mov	r0, r4
1a001176:	f7ff fb2d 	bl	1a0007d4 <vPortFree>
	}
1a00117a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00117c:	2b01      	cmp	r3, #1
1a00117e:	d00a      	beq.n	1a001196 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001180:	2b02      	cmp	r3, #2
1a001182:	d0fa      	beq.n	1a00117a <prvDeleteTCB+0x16>
1a001184:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001188:	f383 8811 	msr	BASEPRI, r3
1a00118c:	f3bf 8f6f 	isb	sy
1a001190:	f3bf 8f4f 	dsb	sy
1a001194:	e7fe      	b.n	1a001194 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001196:	f7ff fb1d 	bl	1a0007d4 <vPortFree>
1a00119a:	e7ee      	b.n	1a00117a <prvDeleteTCB+0x16>

1a00119c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00119c:	4b0f      	ldr	r3, [pc, #60]	; (1a0011dc <prvCheckTasksWaitingTermination+0x40>)
1a00119e:	681b      	ldr	r3, [r3, #0]
1a0011a0:	b1d3      	cbz	r3, 1a0011d8 <prvCheckTasksWaitingTermination+0x3c>
{
1a0011a2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0011a4:	f000 fefe 	bl	1a001fa4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0011a8:	4b0d      	ldr	r3, [pc, #52]	; (1a0011e0 <prvCheckTasksWaitingTermination+0x44>)
1a0011aa:	68db      	ldr	r3, [r3, #12]
1a0011ac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0011ae:	1d20      	adds	r0, r4, #4
1a0011b0:	f7ff febf 	bl	1a000f32 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0011b4:	4a0b      	ldr	r2, [pc, #44]	; (1a0011e4 <prvCheckTasksWaitingTermination+0x48>)
1a0011b6:	6813      	ldr	r3, [r2, #0]
1a0011b8:	3b01      	subs	r3, #1
1a0011ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0011bc:	4a07      	ldr	r2, [pc, #28]	; (1a0011dc <prvCheckTasksWaitingTermination+0x40>)
1a0011be:	6813      	ldr	r3, [r2, #0]
1a0011c0:	3b01      	subs	r3, #1
1a0011c2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0011c4:	f000 ff10 	bl	1a001fe8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0011c8:	4620      	mov	r0, r4
1a0011ca:	f7ff ffcb 	bl	1a001164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0011ce:	4b03      	ldr	r3, [pc, #12]	; (1a0011dc <prvCheckTasksWaitingTermination+0x40>)
1a0011d0:	681b      	ldr	r3, [r3, #0]
1a0011d2:	2b00      	cmp	r3, #0
1a0011d4:	d1e6      	bne.n	1a0011a4 <prvCheckTasksWaitingTermination+0x8>
}
1a0011d6:	bd10      	pop	{r4, pc}
1a0011d8:	4770      	bx	lr
1a0011da:	bf00      	nop
1a0011dc:	10002a04 	.word	0x10002a04
1a0011e0:	10002a74 	.word	0x10002a74
1a0011e4:	10002a00 	.word	0x10002a00

1a0011e8 <prvIdleTask>:
{
1a0011e8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0011ea:	f7ff ffd7 	bl	1a00119c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0011ee:	4b06      	ldr	r3, [pc, #24]	; (1a001208 <prvIdleTask+0x20>)
1a0011f0:	681b      	ldr	r3, [r3, #0]
1a0011f2:	2b01      	cmp	r3, #1
1a0011f4:	d9f9      	bls.n	1a0011ea <prvIdleTask+0x2>
				taskYIELD();
1a0011f6:	4b05      	ldr	r3, [pc, #20]	; (1a00120c <prvIdleTask+0x24>)
1a0011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011fc:	601a      	str	r2, [r3, #0]
1a0011fe:	f3bf 8f4f 	dsb	sy
1a001202:	f3bf 8f6f 	isb	sy
1a001206:	e7f0      	b.n	1a0011ea <prvIdleTask+0x2>
1a001208:	10002974 	.word	0x10002974
1a00120c:	e000ed04 	.word	0xe000ed04

1a001210 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001210:	b570      	push	{r4, r5, r6, lr}
1a001212:	4604      	mov	r4, r0
1a001214:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001216:	4b1d      	ldr	r3, [pc, #116]	; (1a00128c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001218:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00121a:	4b1d      	ldr	r3, [pc, #116]	; (1a001290 <prvAddCurrentTaskToDelayedList+0x80>)
1a00121c:	6818      	ldr	r0, [r3, #0]
1a00121e:	3004      	adds	r0, #4
1a001220:	f7ff fe87 	bl	1a000f32 <uxListRemove>
1a001224:	b950      	cbnz	r0, 1a00123c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001226:	4b1a      	ldr	r3, [pc, #104]	; (1a001290 <prvAddCurrentTaskToDelayedList+0x80>)
1a001228:	681b      	ldr	r3, [r3, #0]
1a00122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00122c:	2301      	movs	r3, #1
1a00122e:	fa03 f202 	lsl.w	r2, r3, r2
1a001232:	4918      	ldr	r1, [pc, #96]	; (1a001294 <prvAddCurrentTaskToDelayedList+0x84>)
1a001234:	680b      	ldr	r3, [r1, #0]
1a001236:	ea23 0302 	bic.w	r3, r3, r2
1a00123a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00123c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001240:	d013      	beq.n	1a00126a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001242:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001244:	4b12      	ldr	r3, [pc, #72]	; (1a001290 <prvAddCurrentTaskToDelayedList+0x80>)
1a001246:	681b      	ldr	r3, [r3, #0]
1a001248:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00124a:	42a5      	cmp	r5, r4
1a00124c:	d816      	bhi.n	1a00127c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00124e:	4b12      	ldr	r3, [pc, #72]	; (1a001298 <prvAddCurrentTaskToDelayedList+0x88>)
1a001250:	6818      	ldr	r0, [r3, #0]
1a001252:	4b0f      	ldr	r3, [pc, #60]	; (1a001290 <prvAddCurrentTaskToDelayedList+0x80>)
1a001254:	6819      	ldr	r1, [r3, #0]
1a001256:	3104      	adds	r1, #4
1a001258:	f7ff fe51 	bl	1a000efe <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a00125c:	4b0f      	ldr	r3, [pc, #60]	; (1a00129c <prvAddCurrentTaskToDelayedList+0x8c>)
1a00125e:	681b      	ldr	r3, [r3, #0]
1a001260:	42a3      	cmp	r3, r4
1a001262:	d912      	bls.n	1a00128a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001264:	4b0d      	ldr	r3, [pc, #52]	; (1a00129c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001266:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001268:	e00f      	b.n	1a00128a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00126a:	2e00      	cmp	r6, #0
1a00126c:	d0e9      	beq.n	1a001242 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00126e:	4b08      	ldr	r3, [pc, #32]	; (1a001290 <prvAddCurrentTaskToDelayedList+0x80>)
1a001270:	6819      	ldr	r1, [r3, #0]
1a001272:	3104      	adds	r1, #4
1a001274:	480a      	ldr	r0, [pc, #40]	; (1a0012a0 <prvAddCurrentTaskToDelayedList+0x90>)
1a001276:	f7ff fe36 	bl	1a000ee6 <vListInsertEnd>
1a00127a:	e006      	b.n	1a00128a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00127c:	4b09      	ldr	r3, [pc, #36]	; (1a0012a4 <prvAddCurrentTaskToDelayedList+0x94>)
1a00127e:	6818      	ldr	r0, [r3, #0]
1a001280:	4b03      	ldr	r3, [pc, #12]	; (1a001290 <prvAddCurrentTaskToDelayedList+0x80>)
1a001282:	6819      	ldr	r1, [r3, #0]
1a001284:	3104      	adds	r1, #4
1a001286:	f7ff fe3a 	bl	1a000efe <vListInsert>
}
1a00128a:	bd70      	pop	{r4, r5, r6, pc}
1a00128c:	10002a88 	.word	0x10002a88
1a001290:	10002968 	.word	0x10002968
1a001294:	10002a14 	.word	0x10002a14
1a001298:	1000296c 	.word	0x1000296c
1a00129c:	10002a40 	.word	0x10002a40
1a0012a0:	10002a60 	.word	0x10002a60
1a0012a4:	10002970 	.word	0x10002970

1a0012a8 <xTaskCreateStatic>:
	{
1a0012a8:	b570      	push	{r4, r5, r6, lr}
1a0012aa:	b086      	sub	sp, #24
1a0012ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0012ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0012b0:	b945      	cbnz	r5, 1a0012c4 <xTaskCreateStatic+0x1c>
1a0012b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012b6:	f383 8811 	msr	BASEPRI, r3
1a0012ba:	f3bf 8f6f 	isb	sy
1a0012be:	f3bf 8f4f 	dsb	sy
1a0012c2:	e7fe      	b.n	1a0012c2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0012c4:	b944      	cbnz	r4, 1a0012d8 <xTaskCreateStatic+0x30>
1a0012c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ca:	f383 8811 	msr	BASEPRI, r3
1a0012ce:	f3bf 8f6f 	isb	sy
1a0012d2:	f3bf 8f4f 	dsb	sy
1a0012d6:	e7fe      	b.n	1a0012d6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0012d8:	2660      	movs	r6, #96	; 0x60
1a0012da:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0012dc:	9e04      	ldr	r6, [sp, #16]
1a0012de:	2e60      	cmp	r6, #96	; 0x60
1a0012e0:	d008      	beq.n	1a0012f4 <xTaskCreateStatic+0x4c>
1a0012e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012e6:	f383 8811 	msr	BASEPRI, r3
1a0012ea:	f3bf 8f6f 	isb	sy
1a0012ee:	f3bf 8f4f 	dsb	sy
1a0012f2:	e7fe      	b.n	1a0012f2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0012f4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0012f6:	2502      	movs	r5, #2
1a0012f8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0012fc:	2500      	movs	r5, #0
1a0012fe:	9503      	str	r5, [sp, #12]
1a001300:	9402      	str	r4, [sp, #8]
1a001302:	ad05      	add	r5, sp, #20
1a001304:	9501      	str	r5, [sp, #4]
1a001306:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001308:	9500      	str	r5, [sp, #0]
1a00130a:	f7ff fe57 	bl	1a000fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00130e:	4620      	mov	r0, r4
1a001310:	f7ff fed2 	bl	1a0010b8 <prvAddNewTaskToReadyList>
	}
1a001314:	9805      	ldr	r0, [sp, #20]
1a001316:	b006      	add	sp, #24
1a001318:	bd70      	pop	{r4, r5, r6, pc}

1a00131a <xTaskCreate>:
	{
1a00131a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00131e:	b085      	sub	sp, #20
1a001320:	4607      	mov	r7, r0
1a001322:	4688      	mov	r8, r1
1a001324:	4615      	mov	r5, r2
1a001326:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001328:	0090      	lsls	r0, r2, #2
1a00132a:	f7ff fa1b 	bl	1a000764 <pvPortMalloc>
			if( pxStack != NULL )
1a00132e:	b308      	cbz	r0, 1a001374 <xTaskCreate+0x5a>
1a001330:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001332:	2060      	movs	r0, #96	; 0x60
1a001334:	f7ff fa16 	bl	1a000764 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001338:	4604      	mov	r4, r0
1a00133a:	b1b8      	cbz	r0, 1a00136c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a00133c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00133e:	b1e4      	cbz	r4, 1a00137a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001340:	2300      	movs	r3, #0
1a001342:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001346:	9303      	str	r3, [sp, #12]
1a001348:	9402      	str	r4, [sp, #8]
1a00134a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00134c:	9301      	str	r3, [sp, #4]
1a00134e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001350:	9300      	str	r3, [sp, #0]
1a001352:	464b      	mov	r3, r9
1a001354:	462a      	mov	r2, r5
1a001356:	4641      	mov	r1, r8
1a001358:	4638      	mov	r0, r7
1a00135a:	f7ff fe2f 	bl	1a000fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00135e:	4620      	mov	r0, r4
1a001360:	f7ff feaa 	bl	1a0010b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001364:	2001      	movs	r0, #1
	}
1a001366:	b005      	add	sp, #20
1a001368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a00136c:	4630      	mov	r0, r6
1a00136e:	f7ff fa31 	bl	1a0007d4 <vPortFree>
1a001372:	e7e4      	b.n	1a00133e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001378:	e7f5      	b.n	1a001366 <xTaskCreate+0x4c>
1a00137a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00137e:	e7f2      	b.n	1a001366 <xTaskCreate+0x4c>

1a001380 <vTaskStartScheduler>:
{
1a001380:	b510      	push	{r4, lr}
1a001382:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001384:	2400      	movs	r4, #0
1a001386:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001388:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00138a:	aa07      	add	r2, sp, #28
1a00138c:	a906      	add	r1, sp, #24
1a00138e:	a805      	add	r0, sp, #20
1a001390:	f7ff fde4 	bl	1a000f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001394:	9b05      	ldr	r3, [sp, #20]
1a001396:	9302      	str	r3, [sp, #8]
1a001398:	9b06      	ldr	r3, [sp, #24]
1a00139a:	9301      	str	r3, [sp, #4]
1a00139c:	9400      	str	r4, [sp, #0]
1a00139e:	4623      	mov	r3, r4
1a0013a0:	9a07      	ldr	r2, [sp, #28]
1a0013a2:	4917      	ldr	r1, [pc, #92]	; (1a001400 <vTaskStartScheduler+0x80>)
1a0013a4:	4817      	ldr	r0, [pc, #92]	; (1a001404 <vTaskStartScheduler+0x84>)
1a0013a6:	f7ff ff7f 	bl	1a0012a8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0013aa:	b140      	cbz	r0, 1a0013be <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0013ac:	f000 fbbc 	bl	1a001b28 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0013b0:	2801      	cmp	r0, #1
1a0013b2:	d006      	beq.n	1a0013c2 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0013b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0013b8:	d018      	beq.n	1a0013ec <vTaskStartScheduler+0x6c>
}
1a0013ba:	b008      	add	sp, #32
1a0013bc:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0013be:	2000      	movs	r0, #0
1a0013c0:	e7f6      	b.n	1a0013b0 <vTaskStartScheduler+0x30>
1a0013c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013c6:	f383 8811 	msr	BASEPRI, r3
1a0013ca:	f3bf 8f6f 	isb	sy
1a0013ce:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0013d2:	4b0d      	ldr	r3, [pc, #52]	; (1a001408 <vTaskStartScheduler+0x88>)
1a0013d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0013da:	4b0c      	ldr	r3, [pc, #48]	; (1a00140c <vTaskStartScheduler+0x8c>)
1a0013dc:	2201      	movs	r2, #1
1a0013de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0013e0:	4b0b      	ldr	r3, [pc, #44]	; (1a001410 <vTaskStartScheduler+0x90>)
1a0013e2:	2200      	movs	r2, #0
1a0013e4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0013e6:	f000 fe7f 	bl	1a0020e8 <xPortStartScheduler>
1a0013ea:	e7e6      	b.n	1a0013ba <vTaskStartScheduler+0x3a>
1a0013ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013f0:	f383 8811 	msr	BASEPRI, r3
1a0013f4:	f3bf 8f6f 	isb	sy
1a0013f8:	f3bf 8f4f 	dsb	sy
1a0013fc:	e7fe      	b.n	1a0013fc <vTaskStartScheduler+0x7c>
1a0013fe:	bf00      	nop
1a001400:	1a004ca4 	.word	0x1a004ca4
1a001404:	1a0011e9 	.word	0x1a0011e9
1a001408:	10002a40 	.word	0x10002a40
1a00140c:	10002a5c 	.word	0x10002a5c
1a001410:	10002a88 	.word	0x10002a88

1a001414 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001414:	4a02      	ldr	r2, [pc, #8]	; (1a001420 <vTaskSuspendAll+0xc>)
1a001416:	6813      	ldr	r3, [r2, #0]
1a001418:	3301      	adds	r3, #1
1a00141a:	6013      	str	r3, [r2, #0]
}
1a00141c:	4770      	bx	lr
1a00141e:	bf00      	nop
1a001420:	10002a0c 	.word	0x10002a0c

1a001424 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001424:	4b01      	ldr	r3, [pc, #4]	; (1a00142c <xTaskGetTickCount+0x8>)
1a001426:	6818      	ldr	r0, [r3, #0]
}
1a001428:	4770      	bx	lr
1a00142a:	bf00      	nop
1a00142c:	10002a88 	.word	0x10002a88

1a001430 <xTaskIncrementTick>:
{
1a001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001432:	4b3a      	ldr	r3, [pc, #232]	; (1a00151c <xTaskIncrementTick+0xec>)
1a001434:	681b      	ldr	r3, [r3, #0]
1a001436:	2b00      	cmp	r3, #0
1a001438:	d164      	bne.n	1a001504 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00143a:	4b39      	ldr	r3, [pc, #228]	; (1a001520 <xTaskIncrementTick+0xf0>)
1a00143c:	681d      	ldr	r5, [r3, #0]
1a00143e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001440:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001442:	b9c5      	cbnz	r5, 1a001476 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001444:	4b37      	ldr	r3, [pc, #220]	; (1a001524 <xTaskIncrementTick+0xf4>)
1a001446:	681b      	ldr	r3, [r3, #0]
1a001448:	681b      	ldr	r3, [r3, #0]
1a00144a:	b143      	cbz	r3, 1a00145e <xTaskIncrementTick+0x2e>
1a00144c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001450:	f383 8811 	msr	BASEPRI, r3
1a001454:	f3bf 8f6f 	isb	sy
1a001458:	f3bf 8f4f 	dsb	sy
1a00145c:	e7fe      	b.n	1a00145c <xTaskIncrementTick+0x2c>
1a00145e:	4a31      	ldr	r2, [pc, #196]	; (1a001524 <xTaskIncrementTick+0xf4>)
1a001460:	6811      	ldr	r1, [r2, #0]
1a001462:	4b31      	ldr	r3, [pc, #196]	; (1a001528 <xTaskIncrementTick+0xf8>)
1a001464:	6818      	ldr	r0, [r3, #0]
1a001466:	6010      	str	r0, [r2, #0]
1a001468:	6019      	str	r1, [r3, #0]
1a00146a:	4a30      	ldr	r2, [pc, #192]	; (1a00152c <xTaskIncrementTick+0xfc>)
1a00146c:	6813      	ldr	r3, [r2, #0]
1a00146e:	3301      	adds	r3, #1
1a001470:	6013      	str	r3, [r2, #0]
1a001472:	f7ff fd8d 	bl	1a000f90 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001476:	4b2e      	ldr	r3, [pc, #184]	; (1a001530 <xTaskIncrementTick+0x100>)
1a001478:	681b      	ldr	r3, [r3, #0]
1a00147a:	42ab      	cmp	r3, r5
1a00147c:	d938      	bls.n	1a0014f0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00147e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001480:	4b2c      	ldr	r3, [pc, #176]	; (1a001534 <xTaskIncrementTick+0x104>)
1a001482:	681b      	ldr	r3, [r3, #0]
1a001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001486:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00148a:	009a      	lsls	r2, r3, #2
1a00148c:	4b2a      	ldr	r3, [pc, #168]	; (1a001538 <xTaskIncrementTick+0x108>)
1a00148e:	589b      	ldr	r3, [r3, r2]
1a001490:	2b01      	cmp	r3, #1
1a001492:	d93c      	bls.n	1a00150e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001494:	2401      	movs	r4, #1
1a001496:	e03a      	b.n	1a00150e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001498:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00149a:	4b22      	ldr	r3, [pc, #136]	; (1a001524 <xTaskIncrementTick+0xf4>)
1a00149c:	681b      	ldr	r3, [r3, #0]
1a00149e:	681b      	ldr	r3, [r3, #0]
1a0014a0:	b343      	cbz	r3, 1a0014f4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0014a2:	4b20      	ldr	r3, [pc, #128]	; (1a001524 <xTaskIncrementTick+0xf4>)
1a0014a4:	681b      	ldr	r3, [r3, #0]
1a0014a6:	68db      	ldr	r3, [r3, #12]
1a0014a8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0014aa:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0014ac:	429d      	cmp	r5, r3
1a0014ae:	d326      	bcc.n	1a0014fe <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0014b0:	1d37      	adds	r7, r6, #4
1a0014b2:	4638      	mov	r0, r7
1a0014b4:	f7ff fd3d 	bl	1a000f32 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0014b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0014ba:	b11b      	cbz	r3, 1a0014c4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0014bc:	f106 0018 	add.w	r0, r6, #24
1a0014c0:	f7ff fd37 	bl	1a000f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0014c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0014c6:	2201      	movs	r2, #1
1a0014c8:	409a      	lsls	r2, r3
1a0014ca:	491c      	ldr	r1, [pc, #112]	; (1a00153c <xTaskIncrementTick+0x10c>)
1a0014cc:	6808      	ldr	r0, [r1, #0]
1a0014ce:	4302      	orrs	r2, r0
1a0014d0:	600a      	str	r2, [r1, #0]
1a0014d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014d6:	009a      	lsls	r2, r3, #2
1a0014d8:	4639      	mov	r1, r7
1a0014da:	4817      	ldr	r0, [pc, #92]	; (1a001538 <xTaskIncrementTick+0x108>)
1a0014dc:	4410      	add	r0, r2
1a0014de:	f7ff fd02 	bl	1a000ee6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0014e2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0014e4:	4b13      	ldr	r3, [pc, #76]	; (1a001534 <xTaskIncrementTick+0x104>)
1a0014e6:	681b      	ldr	r3, [r3, #0]
1a0014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014ea:	429a      	cmp	r2, r3
1a0014ec:	d2d4      	bcs.n	1a001498 <xTaskIncrementTick+0x68>
1a0014ee:	e7d4      	b.n	1a00149a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0014f0:	2400      	movs	r4, #0
1a0014f2:	e7d2      	b.n	1a00149a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014f4:	4b0e      	ldr	r3, [pc, #56]	; (1a001530 <xTaskIncrementTick+0x100>)
1a0014f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014fa:	601a      	str	r2, [r3, #0]
					break;
1a0014fc:	e7c0      	b.n	1a001480 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0014fe:	4a0c      	ldr	r2, [pc, #48]	; (1a001530 <xTaskIncrementTick+0x100>)
1a001500:	6013      	str	r3, [r2, #0]
						break;
1a001502:	e7bd      	b.n	1a001480 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001504:	4a0e      	ldr	r2, [pc, #56]	; (1a001540 <xTaskIncrementTick+0x110>)
1a001506:	6813      	ldr	r3, [r2, #0]
1a001508:	3301      	adds	r3, #1
1a00150a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a00150c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00150e:	4b0d      	ldr	r3, [pc, #52]	; (1a001544 <xTaskIncrementTick+0x114>)
1a001510:	681b      	ldr	r3, [r3, #0]
1a001512:	b103      	cbz	r3, 1a001516 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001514:	2401      	movs	r4, #1
}
1a001516:	4620      	mov	r0, r4
1a001518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00151a:	bf00      	nop
1a00151c:	10002a0c 	.word	0x10002a0c
1a001520:	10002a88 	.word	0x10002a88
1a001524:	1000296c 	.word	0x1000296c
1a001528:	10002970 	.word	0x10002970
1a00152c:	10002a44 	.word	0x10002a44
1a001530:	10002a40 	.word	0x10002a40
1a001534:	10002968 	.word	0x10002968
1a001538:	10002974 	.word	0x10002974
1a00153c:	10002a14 	.word	0x10002a14
1a001540:	10002a08 	.word	0x10002a08
1a001544:	10002a8c 	.word	0x10002a8c

1a001548 <xTaskResumeAll>:
{
1a001548:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00154a:	4b33      	ldr	r3, [pc, #204]	; (1a001618 <xTaskResumeAll+0xd0>)
1a00154c:	681b      	ldr	r3, [r3, #0]
1a00154e:	b943      	cbnz	r3, 1a001562 <xTaskResumeAll+0x1a>
1a001550:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001554:	f383 8811 	msr	BASEPRI, r3
1a001558:	f3bf 8f6f 	isb	sy
1a00155c:	f3bf 8f4f 	dsb	sy
1a001560:	e7fe      	b.n	1a001560 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001562:	f000 fd1f 	bl	1a001fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001566:	4b2c      	ldr	r3, [pc, #176]	; (1a001618 <xTaskResumeAll+0xd0>)
1a001568:	681a      	ldr	r2, [r3, #0]
1a00156a:	3a01      	subs	r2, #1
1a00156c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00156e:	681b      	ldr	r3, [r3, #0]
1a001570:	2b00      	cmp	r3, #0
1a001572:	d14d      	bne.n	1a001610 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001574:	4b29      	ldr	r3, [pc, #164]	; (1a00161c <xTaskResumeAll+0xd4>)
1a001576:	681b      	ldr	r3, [r3, #0]
1a001578:	b923      	cbnz	r3, 1a001584 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00157a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00157c:	f000 fd34 	bl	1a001fe8 <vPortExitCritical>
}
1a001580:	4620      	mov	r0, r4
1a001582:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001584:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001586:	4b26      	ldr	r3, [pc, #152]	; (1a001620 <xTaskResumeAll+0xd8>)
1a001588:	681b      	ldr	r3, [r3, #0]
1a00158a:	b31b      	cbz	r3, 1a0015d4 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00158c:	4b24      	ldr	r3, [pc, #144]	; (1a001620 <xTaskResumeAll+0xd8>)
1a00158e:	68db      	ldr	r3, [r3, #12]
1a001590:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001592:	f104 0018 	add.w	r0, r4, #24
1a001596:	f7ff fccc 	bl	1a000f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00159a:	1d25      	adds	r5, r4, #4
1a00159c:	4628      	mov	r0, r5
1a00159e:	f7ff fcc8 	bl	1a000f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0015a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0015a4:	2201      	movs	r2, #1
1a0015a6:	409a      	lsls	r2, r3
1a0015a8:	491e      	ldr	r1, [pc, #120]	; (1a001624 <xTaskResumeAll+0xdc>)
1a0015aa:	6808      	ldr	r0, [r1, #0]
1a0015ac:	4302      	orrs	r2, r0
1a0015ae:	600a      	str	r2, [r1, #0]
1a0015b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0015b4:	009a      	lsls	r2, r3, #2
1a0015b6:	4629      	mov	r1, r5
1a0015b8:	481b      	ldr	r0, [pc, #108]	; (1a001628 <xTaskResumeAll+0xe0>)
1a0015ba:	4410      	add	r0, r2
1a0015bc:	f7ff fc93 	bl	1a000ee6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0015c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015c2:	4b1a      	ldr	r3, [pc, #104]	; (1a00162c <xTaskResumeAll+0xe4>)
1a0015c4:	681b      	ldr	r3, [r3, #0]
1a0015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0015c8:	429a      	cmp	r2, r3
1a0015ca:	d3dc      	bcc.n	1a001586 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0015cc:	4b18      	ldr	r3, [pc, #96]	; (1a001630 <xTaskResumeAll+0xe8>)
1a0015ce:	2201      	movs	r2, #1
1a0015d0:	601a      	str	r2, [r3, #0]
1a0015d2:	e7d8      	b.n	1a001586 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0015d4:	b10c      	cbz	r4, 1a0015da <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0015d6:	f7ff fcdb 	bl	1a000f90 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0015da:	4b16      	ldr	r3, [pc, #88]	; (1a001634 <xTaskResumeAll+0xec>)
1a0015dc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0015de:	b154      	cbz	r4, 1a0015f6 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0015e0:	f7ff ff26 	bl	1a001430 <xTaskIncrementTick>
1a0015e4:	b110      	cbz	r0, 1a0015ec <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0015e6:	4b12      	ldr	r3, [pc, #72]	; (1a001630 <xTaskResumeAll+0xe8>)
1a0015e8:	2201      	movs	r2, #1
1a0015ea:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0015ec:	3c01      	subs	r4, #1
1a0015ee:	d1f7      	bne.n	1a0015e0 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0015f0:	4b10      	ldr	r3, [pc, #64]	; (1a001634 <xTaskResumeAll+0xec>)
1a0015f2:	2200      	movs	r2, #0
1a0015f4:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0015f6:	4b0e      	ldr	r3, [pc, #56]	; (1a001630 <xTaskResumeAll+0xe8>)
1a0015f8:	681b      	ldr	r3, [r3, #0]
1a0015fa:	b15b      	cbz	r3, 1a001614 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0015fc:	4b0e      	ldr	r3, [pc, #56]	; (1a001638 <xTaskResumeAll+0xf0>)
1a0015fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001602:	601a      	str	r2, [r3, #0]
1a001604:	f3bf 8f4f 	dsb	sy
1a001608:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00160c:	2401      	movs	r4, #1
1a00160e:	e7b5      	b.n	1a00157c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001610:	2400      	movs	r4, #0
1a001612:	e7b3      	b.n	1a00157c <xTaskResumeAll+0x34>
1a001614:	2400      	movs	r4, #0
1a001616:	e7b1      	b.n	1a00157c <xTaskResumeAll+0x34>
1a001618:	10002a0c 	.word	0x10002a0c
1a00161c:	10002a00 	.word	0x10002a00
1a001620:	10002a48 	.word	0x10002a48
1a001624:	10002a14 	.word	0x10002a14
1a001628:	10002974 	.word	0x10002974
1a00162c:	10002968 	.word	0x10002968
1a001630:	10002a8c 	.word	0x10002a8c
1a001634:	10002a08 	.word	0x10002a08
1a001638:	e000ed04 	.word	0xe000ed04

1a00163c <vTaskDelayUntil>:
	{
1a00163c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a00163e:	b150      	cbz	r0, 1a001656 <vTaskDelayUntil+0x1a>
1a001640:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001642:	b989      	cbnz	r1, 1a001668 <vTaskDelayUntil+0x2c>
1a001644:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001648:	f383 8811 	msr	BASEPRI, r3
1a00164c:	f3bf 8f6f 	isb	sy
1a001650:	f3bf 8f4f 	dsb	sy
1a001654:	e7fe      	b.n	1a001654 <vTaskDelayUntil+0x18>
1a001656:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00165a:	f383 8811 	msr	BASEPRI, r3
1a00165e:	f3bf 8f6f 	isb	sy
1a001662:	f3bf 8f4f 	dsb	sy
1a001666:	e7fe      	b.n	1a001666 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001668:	4b1a      	ldr	r3, [pc, #104]	; (1a0016d4 <vTaskDelayUntil+0x98>)
1a00166a:	681b      	ldr	r3, [r3, #0]
1a00166c:	b143      	cbz	r3, 1a001680 <vTaskDelayUntil+0x44>
1a00166e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001672:	f383 8811 	msr	BASEPRI, r3
1a001676:	f3bf 8f6f 	isb	sy
1a00167a:	f3bf 8f4f 	dsb	sy
1a00167e:	e7fe      	b.n	1a00167e <vTaskDelayUntil+0x42>
1a001680:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001682:	f7ff fec7 	bl	1a001414 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001686:	4b14      	ldr	r3, [pc, #80]	; (1a0016d8 <vTaskDelayUntil+0x9c>)
1a001688:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00168a:	682a      	ldr	r2, [r5, #0]
1a00168c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00168e:	4282      	cmp	r2, r0
1a001690:	d918      	bls.n	1a0016c4 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001692:	42a2      	cmp	r2, r4
1a001694:	d80c      	bhi.n	1a0016b0 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001696:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001698:	f7ff ff56 	bl	1a001548 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00169c:	b938      	cbnz	r0, 1a0016ae <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a00169e:	4b0f      	ldr	r3, [pc, #60]	; (1a0016dc <vTaskDelayUntil+0xa0>)
1a0016a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016a4:	601a      	str	r2, [r3, #0]
1a0016a6:	f3bf 8f4f 	dsb	sy
1a0016aa:	f3bf 8f6f 	isb	sy
	}
1a0016ae:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0016b0:	42a0      	cmp	r0, r4
1a0016b2:	d301      	bcc.n	1a0016b8 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0016b4:	602c      	str	r4, [r5, #0]
1a0016b6:	e7ef      	b.n	1a001698 <vTaskDelayUntil+0x5c>
1a0016b8:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0016ba:	2100      	movs	r1, #0
1a0016bc:	1a20      	subs	r0, r4, r0
1a0016be:	f7ff fda7 	bl	1a001210 <prvAddCurrentTaskToDelayedList>
1a0016c2:	e7e9      	b.n	1a001698 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0016c4:	42a2      	cmp	r2, r4
1a0016c6:	d801      	bhi.n	1a0016cc <vTaskDelayUntil+0x90>
1a0016c8:	42a0      	cmp	r0, r4
1a0016ca:	d201      	bcs.n	1a0016d0 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0016cc:	602c      	str	r4, [r5, #0]
1a0016ce:	e7f4      	b.n	1a0016ba <vTaskDelayUntil+0x7e>
1a0016d0:	602c      	str	r4, [r5, #0]
1a0016d2:	e7e1      	b.n	1a001698 <vTaskDelayUntil+0x5c>
1a0016d4:	10002a0c 	.word	0x10002a0c
1a0016d8:	10002a88 	.word	0x10002a88
1a0016dc:	e000ed04 	.word	0xe000ed04

1a0016e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0016e0:	4b2c      	ldr	r3, [pc, #176]	; (1a001794 <vTaskSwitchContext+0xb4>)
1a0016e2:	681b      	ldr	r3, [r3, #0]
1a0016e4:	b11b      	cbz	r3, 1a0016ee <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0016e6:	4b2c      	ldr	r3, [pc, #176]	; (1a001798 <vTaskSwitchContext+0xb8>)
1a0016e8:	2201      	movs	r2, #1
1a0016ea:	601a      	str	r2, [r3, #0]
1a0016ec:	4770      	bx	lr
{
1a0016ee:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0016f0:	4b29      	ldr	r3, [pc, #164]	; (1a001798 <vTaskSwitchContext+0xb8>)
1a0016f2:	2200      	movs	r2, #0
1a0016f4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0016f6:	4b29      	ldr	r3, [pc, #164]	; (1a00179c <vTaskSwitchContext+0xbc>)
1a0016f8:	681b      	ldr	r3, [r3, #0]
1a0016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0016fc:	681a      	ldr	r2, [r3, #0]
1a0016fe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001702:	d103      	bne.n	1a00170c <vTaskSwitchContext+0x2c>
1a001704:	685a      	ldr	r2, [r3, #4]
1a001706:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00170a:	d01b      	beq.n	1a001744 <vTaskSwitchContext+0x64>
1a00170c:	4b23      	ldr	r3, [pc, #140]	; (1a00179c <vTaskSwitchContext+0xbc>)
1a00170e:	6818      	ldr	r0, [r3, #0]
1a001710:	6819      	ldr	r1, [r3, #0]
1a001712:	3134      	adds	r1, #52	; 0x34
1a001714:	f7ff fc3a 	bl	1a000f8c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001718:	4b21      	ldr	r3, [pc, #132]	; (1a0017a0 <vTaskSwitchContext+0xc0>)
1a00171a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a00171c:	fab3 f383 	clz	r3, r3
1a001720:	b2db      	uxtb	r3, r3
1a001722:	f1c3 031f 	rsb	r3, r3, #31
1a001726:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00172a:	008a      	lsls	r2, r1, #2
1a00172c:	491d      	ldr	r1, [pc, #116]	; (1a0017a4 <vTaskSwitchContext+0xc4>)
1a00172e:	588a      	ldr	r2, [r1, r2]
1a001730:	b98a      	cbnz	r2, 1a001756 <vTaskSwitchContext+0x76>
	__asm volatile
1a001732:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001736:	f383 8811 	msr	BASEPRI, r3
1a00173a:	f3bf 8f6f 	isb	sy
1a00173e:	f3bf 8f4f 	dsb	sy
1a001742:	e7fe      	b.n	1a001742 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001744:	689a      	ldr	r2, [r3, #8]
1a001746:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00174a:	d1df      	bne.n	1a00170c <vTaskSwitchContext+0x2c>
1a00174c:	68db      	ldr	r3, [r3, #12]
1a00174e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001752:	d1db      	bne.n	1a00170c <vTaskSwitchContext+0x2c>
1a001754:	e7e0      	b.n	1a001718 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001756:	4813      	ldr	r0, [pc, #76]	; (1a0017a4 <vTaskSwitchContext+0xc4>)
1a001758:	009a      	lsls	r2, r3, #2
1a00175a:	18d4      	adds	r4, r2, r3
1a00175c:	00a1      	lsls	r1, r4, #2
1a00175e:	4401      	add	r1, r0
1a001760:	684c      	ldr	r4, [r1, #4]
1a001762:	6864      	ldr	r4, [r4, #4]
1a001764:	604c      	str	r4, [r1, #4]
1a001766:	441a      	add	r2, r3
1a001768:	0091      	lsls	r1, r2, #2
1a00176a:	3108      	adds	r1, #8
1a00176c:	4408      	add	r0, r1
1a00176e:	4284      	cmp	r4, r0
1a001770:	d009      	beq.n	1a001786 <vTaskSwitchContext+0xa6>
1a001772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001776:	009a      	lsls	r2, r3, #2
1a001778:	4b0a      	ldr	r3, [pc, #40]	; (1a0017a4 <vTaskSwitchContext+0xc4>)
1a00177a:	4413      	add	r3, r2
1a00177c:	685b      	ldr	r3, [r3, #4]
1a00177e:	68da      	ldr	r2, [r3, #12]
1a001780:	4b06      	ldr	r3, [pc, #24]	; (1a00179c <vTaskSwitchContext+0xbc>)
1a001782:	601a      	str	r2, [r3, #0]
}
1a001784:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001786:	6861      	ldr	r1, [r4, #4]
1a001788:	4806      	ldr	r0, [pc, #24]	; (1a0017a4 <vTaskSwitchContext+0xc4>)
1a00178a:	2214      	movs	r2, #20
1a00178c:	fb02 0203 	mla	r2, r2, r3, r0
1a001790:	6051      	str	r1, [r2, #4]
1a001792:	e7ee      	b.n	1a001772 <vTaskSwitchContext+0x92>
1a001794:	10002a0c 	.word	0x10002a0c
1a001798:	10002a8c 	.word	0x10002a8c
1a00179c:	10002968 	.word	0x10002968
1a0017a0:	10002a14 	.word	0x10002a14
1a0017a4:	10002974 	.word	0x10002974

1a0017a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0017a8:	b940      	cbnz	r0, 1a0017bc <vTaskPlaceOnEventList+0x14>
1a0017aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017ae:	f383 8811 	msr	BASEPRI, r3
1a0017b2:	f3bf 8f6f 	isb	sy
1a0017b6:	f3bf 8f4f 	dsb	sy
1a0017ba:	e7fe      	b.n	1a0017ba <vTaskPlaceOnEventList+0x12>
{
1a0017bc:	b510      	push	{r4, lr}
1a0017be:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017c0:	4b04      	ldr	r3, [pc, #16]	; (1a0017d4 <vTaskPlaceOnEventList+0x2c>)
1a0017c2:	6819      	ldr	r1, [r3, #0]
1a0017c4:	3118      	adds	r1, #24
1a0017c6:	f7ff fb9a 	bl	1a000efe <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0017ca:	2101      	movs	r1, #1
1a0017cc:	4620      	mov	r0, r4
1a0017ce:	f7ff fd1f 	bl	1a001210 <prvAddCurrentTaskToDelayedList>
}
1a0017d2:	bd10      	pop	{r4, pc}
1a0017d4:	10002968 	.word	0x10002968

1a0017d8 <vTaskPlaceOnEventListRestricted>:
	{
1a0017d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0017da:	b940      	cbnz	r0, 1a0017ee <vTaskPlaceOnEventListRestricted+0x16>
1a0017dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e0:	f383 8811 	msr	BASEPRI, r3
1a0017e4:	f3bf 8f6f 	isb	sy
1a0017e8:	f3bf 8f4f 	dsb	sy
1a0017ec:	e7fe      	b.n	1a0017ec <vTaskPlaceOnEventListRestricted+0x14>
1a0017ee:	460c      	mov	r4, r1
1a0017f0:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017f2:	4a06      	ldr	r2, [pc, #24]	; (1a00180c <vTaskPlaceOnEventListRestricted+0x34>)
1a0017f4:	6811      	ldr	r1, [r2, #0]
1a0017f6:	3118      	adds	r1, #24
1a0017f8:	f7ff fb75 	bl	1a000ee6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0017fc:	b10d      	cbz	r5, 1a001802 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0017fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001802:	4629      	mov	r1, r5
1a001804:	4620      	mov	r0, r4
1a001806:	f7ff fd03 	bl	1a001210 <prvAddCurrentTaskToDelayedList>
	}
1a00180a:	bd38      	pop	{r3, r4, r5, pc}
1a00180c:	10002968 	.word	0x10002968

1a001810 <xTaskRemoveFromEventList>:
{
1a001810:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001812:	68c3      	ldr	r3, [r0, #12]
1a001814:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001816:	b944      	cbnz	r4, 1a00182a <xTaskRemoveFromEventList+0x1a>
1a001818:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00181c:	f383 8811 	msr	BASEPRI, r3
1a001820:	f3bf 8f6f 	isb	sy
1a001824:	f3bf 8f4f 	dsb	sy
1a001828:	e7fe      	b.n	1a001828 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a00182a:	f104 0518 	add.w	r5, r4, #24
1a00182e:	4628      	mov	r0, r5
1a001830:	f7ff fb7f 	bl	1a000f32 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001834:	4b13      	ldr	r3, [pc, #76]	; (1a001884 <xTaskRemoveFromEventList+0x74>)
1a001836:	681b      	ldr	r3, [r3, #0]
1a001838:	b9e3      	cbnz	r3, 1a001874 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a00183a:	1d25      	adds	r5, r4, #4
1a00183c:	4628      	mov	r0, r5
1a00183e:	f7ff fb78 	bl	1a000f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001844:	2201      	movs	r2, #1
1a001846:	409a      	lsls	r2, r3
1a001848:	490f      	ldr	r1, [pc, #60]	; (1a001888 <xTaskRemoveFromEventList+0x78>)
1a00184a:	6808      	ldr	r0, [r1, #0]
1a00184c:	4302      	orrs	r2, r0
1a00184e:	600a      	str	r2, [r1, #0]
1a001850:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001854:	009a      	lsls	r2, r3, #2
1a001856:	4629      	mov	r1, r5
1a001858:	480c      	ldr	r0, [pc, #48]	; (1a00188c <xTaskRemoveFromEventList+0x7c>)
1a00185a:	4410      	add	r0, r2
1a00185c:	f7ff fb43 	bl	1a000ee6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001862:	4b0b      	ldr	r3, [pc, #44]	; (1a001890 <xTaskRemoveFromEventList+0x80>)
1a001864:	681b      	ldr	r3, [r3, #0]
1a001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001868:	429a      	cmp	r2, r3
1a00186a:	d908      	bls.n	1a00187e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a00186c:	2001      	movs	r0, #1
1a00186e:	4b09      	ldr	r3, [pc, #36]	; (1a001894 <xTaskRemoveFromEventList+0x84>)
1a001870:	6018      	str	r0, [r3, #0]
}
1a001872:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001874:	4629      	mov	r1, r5
1a001876:	4808      	ldr	r0, [pc, #32]	; (1a001898 <xTaskRemoveFromEventList+0x88>)
1a001878:	f7ff fb35 	bl	1a000ee6 <vListInsertEnd>
1a00187c:	e7f0      	b.n	1a001860 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00187e:	2000      	movs	r0, #0
	return xReturn;
1a001880:	e7f7      	b.n	1a001872 <xTaskRemoveFromEventList+0x62>
1a001882:	bf00      	nop
1a001884:	10002a0c 	.word	0x10002a0c
1a001888:	10002a14 	.word	0x10002a14
1a00188c:	10002974 	.word	0x10002974
1a001890:	10002968 	.word	0x10002968
1a001894:	10002a8c 	.word	0x10002a8c
1a001898:	10002a48 	.word	0x10002a48

1a00189c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a00189c:	4b03      	ldr	r3, [pc, #12]	; (1a0018ac <vTaskInternalSetTimeOutState+0x10>)
1a00189e:	681b      	ldr	r3, [r3, #0]
1a0018a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0018a2:	4b03      	ldr	r3, [pc, #12]	; (1a0018b0 <vTaskInternalSetTimeOutState+0x14>)
1a0018a4:	681b      	ldr	r3, [r3, #0]
1a0018a6:	6043      	str	r3, [r0, #4]
}
1a0018a8:	4770      	bx	lr
1a0018aa:	bf00      	nop
1a0018ac:	10002a44 	.word	0x10002a44
1a0018b0:	10002a88 	.word	0x10002a88

1a0018b4 <xTaskCheckForTimeOut>:
{
1a0018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0018b6:	b150      	cbz	r0, 1a0018ce <xTaskCheckForTimeOut+0x1a>
1a0018b8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0018ba:	b989      	cbnz	r1, 1a0018e0 <xTaskCheckForTimeOut+0x2c>
1a0018bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018c0:	f383 8811 	msr	BASEPRI, r3
1a0018c4:	f3bf 8f6f 	isb	sy
1a0018c8:	f3bf 8f4f 	dsb	sy
1a0018cc:	e7fe      	b.n	1a0018cc <xTaskCheckForTimeOut+0x18>
1a0018ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018d2:	f383 8811 	msr	BASEPRI, r3
1a0018d6:	f3bf 8f6f 	isb	sy
1a0018da:	f3bf 8f4f 	dsb	sy
1a0018de:	e7fe      	b.n	1a0018de <xTaskCheckForTimeOut+0x2a>
1a0018e0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0018e2:	f000 fb5f 	bl	1a001fa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0018e6:	4b11      	ldr	r3, [pc, #68]	; (1a00192c <xTaskCheckForTimeOut+0x78>)
1a0018e8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0018ea:	6868      	ldr	r0, [r5, #4]
1a0018ec:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0018ee:	6823      	ldr	r3, [r4, #0]
1a0018f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018f4:	d016      	beq.n	1a001924 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0018f6:	682f      	ldr	r7, [r5, #0]
1a0018f8:	4e0d      	ldr	r6, [pc, #52]	; (1a001930 <xTaskCheckForTimeOut+0x7c>)
1a0018fa:	6836      	ldr	r6, [r6, #0]
1a0018fc:	42b7      	cmp	r7, r6
1a0018fe:	d001      	beq.n	1a001904 <xTaskCheckForTimeOut+0x50>
1a001900:	4288      	cmp	r0, r1
1a001902:	d911      	bls.n	1a001928 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001904:	4293      	cmp	r3, r2
1a001906:	d803      	bhi.n	1a001910 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001908:	2300      	movs	r3, #0
1a00190a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a00190c:	2401      	movs	r4, #1
1a00190e:	e005      	b.n	1a00191c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001910:	1a9b      	subs	r3, r3, r2
1a001912:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001914:	4628      	mov	r0, r5
1a001916:	f7ff ffc1 	bl	1a00189c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00191a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00191c:	f000 fb64 	bl	1a001fe8 <vPortExitCritical>
}
1a001920:	4620      	mov	r0, r4
1a001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001924:	2400      	movs	r4, #0
1a001926:	e7f9      	b.n	1a00191c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001928:	2401      	movs	r4, #1
1a00192a:	e7f7      	b.n	1a00191c <xTaskCheckForTimeOut+0x68>
1a00192c:	10002a88 	.word	0x10002a88
1a001930:	10002a44 	.word	0x10002a44

1a001934 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001934:	4b01      	ldr	r3, [pc, #4]	; (1a00193c <vTaskMissedYield+0x8>)
1a001936:	2201      	movs	r2, #1
1a001938:	601a      	str	r2, [r3, #0]
}
1a00193a:	4770      	bx	lr
1a00193c:	10002a8c 	.word	0x10002a8c

1a001940 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001940:	4b05      	ldr	r3, [pc, #20]	; (1a001958 <xTaskGetSchedulerState+0x18>)
1a001942:	681b      	ldr	r3, [r3, #0]
1a001944:	b133      	cbz	r3, 1a001954 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001946:	4b05      	ldr	r3, [pc, #20]	; (1a00195c <xTaskGetSchedulerState+0x1c>)
1a001948:	681b      	ldr	r3, [r3, #0]
1a00194a:	b10b      	cbz	r3, 1a001950 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a00194c:	2000      	movs	r0, #0
	}
1a00194e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001950:	2002      	movs	r0, #2
1a001952:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001954:	2001      	movs	r0, #1
1a001956:	4770      	bx	lr
1a001958:	10002a5c 	.word	0x10002a5c
1a00195c:	10002a0c 	.word	0x10002a0c

1a001960 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001960:	2800      	cmp	r0, #0
1a001962:	d049      	beq.n	1a0019f8 <xTaskPriorityDisinherit+0x98>
	{
1a001964:	b538      	push	{r3, r4, r5, lr}
1a001966:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001968:	4a26      	ldr	r2, [pc, #152]	; (1a001a04 <xTaskPriorityDisinherit+0xa4>)
1a00196a:	6812      	ldr	r2, [r2, #0]
1a00196c:	4282      	cmp	r2, r0
1a00196e:	d008      	beq.n	1a001982 <xTaskPriorityDisinherit+0x22>
1a001970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001974:	f383 8811 	msr	BASEPRI, r3
1a001978:	f3bf 8f6f 	isb	sy
1a00197c:	f3bf 8f4f 	dsb	sy
1a001980:	e7fe      	b.n	1a001980 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001982:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001984:	b942      	cbnz	r2, 1a001998 <xTaskPriorityDisinherit+0x38>
1a001986:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00198a:	f383 8811 	msr	BASEPRI, r3
1a00198e:	f3bf 8f6f 	isb	sy
1a001992:	f3bf 8f4f 	dsb	sy
1a001996:	e7fe      	b.n	1a001996 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001998:	3a01      	subs	r2, #1
1a00199a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a00199c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00199e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0019a0:	4288      	cmp	r0, r1
1a0019a2:	d02b      	beq.n	1a0019fc <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0019a4:	bb62      	cbnz	r2, 1a001a00 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019a6:	1d25      	adds	r5, r4, #4
1a0019a8:	4628      	mov	r0, r5
1a0019aa:	f7ff fac2 	bl	1a000f32 <uxListRemove>
1a0019ae:	b970      	cbnz	r0, 1a0019ce <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0019b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019b2:	2314      	movs	r3, #20
1a0019b4:	fb03 f302 	mul.w	r3, r3, r2
1a0019b8:	4913      	ldr	r1, [pc, #76]	; (1a001a08 <xTaskPriorityDisinherit+0xa8>)
1a0019ba:	58cb      	ldr	r3, [r1, r3]
1a0019bc:	b93b      	cbnz	r3, 1a0019ce <xTaskPriorityDisinherit+0x6e>
1a0019be:	2301      	movs	r3, #1
1a0019c0:	fa03 f202 	lsl.w	r2, r3, r2
1a0019c4:	4911      	ldr	r1, [pc, #68]	; (1a001a0c <xTaskPriorityDisinherit+0xac>)
1a0019c6:	680b      	ldr	r3, [r1, #0]
1a0019c8:	ea23 0302 	bic.w	r3, r3, r2
1a0019cc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0019ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0019d0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0019d2:	f1c3 0207 	rsb	r2, r3, #7
1a0019d6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0019d8:	2401      	movs	r4, #1
1a0019da:	fa04 f203 	lsl.w	r2, r4, r3
1a0019de:	490b      	ldr	r1, [pc, #44]	; (1a001a0c <xTaskPriorityDisinherit+0xac>)
1a0019e0:	6808      	ldr	r0, [r1, #0]
1a0019e2:	4302      	orrs	r2, r0
1a0019e4:	600a      	str	r2, [r1, #0]
1a0019e6:	4629      	mov	r1, r5
1a0019e8:	4a07      	ldr	r2, [pc, #28]	; (1a001a08 <xTaskPriorityDisinherit+0xa8>)
1a0019ea:	2014      	movs	r0, #20
1a0019ec:	fb00 2003 	mla	r0, r0, r3, r2
1a0019f0:	f7ff fa79 	bl	1a000ee6 <vListInsertEnd>
					xReturn = pdTRUE;
1a0019f4:	4620      	mov	r0, r4
	}
1a0019f6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0019f8:	2000      	movs	r0, #0
	}
1a0019fa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0019fc:	2000      	movs	r0, #0
1a0019fe:	e7fa      	b.n	1a0019f6 <xTaskPriorityDisinherit+0x96>
1a001a00:	2000      	movs	r0, #0
		return xReturn;
1a001a02:	e7f8      	b.n	1a0019f6 <xTaskPriorityDisinherit+0x96>
1a001a04:	10002968 	.word	0x10002968
1a001a08:	10002974 	.word	0x10002974
1a001a0c:	10002a14 	.word	0x10002a14

1a001a10 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001a10:	4b06      	ldr	r3, [pc, #24]	; (1a001a2c <prvGetNextExpireTime+0x1c>)
1a001a12:	681a      	ldr	r2, [r3, #0]
1a001a14:	6813      	ldr	r3, [r2, #0]
1a001a16:	fab3 f383 	clz	r3, r3
1a001a1a:	095b      	lsrs	r3, r3, #5
1a001a1c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001a1e:	b913      	cbnz	r3, 1a001a26 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001a20:	68d3      	ldr	r3, [r2, #12]
1a001a22:	6818      	ldr	r0, [r3, #0]
1a001a24:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001a26:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001a28:	4770      	bx	lr
1a001a2a:	bf00      	nop
1a001a2c:	10002a90 	.word	0x10002a90

1a001a30 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001a30:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001a32:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001a34:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001a36:	4291      	cmp	r1, r2
1a001a38:	d80c      	bhi.n	1a001a54 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a3a:	1ad2      	subs	r2, r2, r3
1a001a3c:	6983      	ldr	r3, [r0, #24]
1a001a3e:	429a      	cmp	r2, r3
1a001a40:	d301      	bcc.n	1a001a46 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001a42:	2001      	movs	r0, #1
1a001a44:	e010      	b.n	1a001a68 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001a46:	1d01      	adds	r1, r0, #4
1a001a48:	4b09      	ldr	r3, [pc, #36]	; (1a001a70 <prvInsertTimerInActiveList+0x40>)
1a001a4a:	6818      	ldr	r0, [r3, #0]
1a001a4c:	f7ff fa57 	bl	1a000efe <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a50:	2000      	movs	r0, #0
1a001a52:	e009      	b.n	1a001a68 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001a54:	429a      	cmp	r2, r3
1a001a56:	d201      	bcs.n	1a001a5c <prvInsertTimerInActiveList+0x2c>
1a001a58:	4299      	cmp	r1, r3
1a001a5a:	d206      	bcs.n	1a001a6a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001a5c:	1d01      	adds	r1, r0, #4
1a001a5e:	4b05      	ldr	r3, [pc, #20]	; (1a001a74 <prvInsertTimerInActiveList+0x44>)
1a001a60:	6818      	ldr	r0, [r3, #0]
1a001a62:	f7ff fa4c 	bl	1a000efe <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a66:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001a68:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001a6a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001a6c:	e7fc      	b.n	1a001a68 <prvInsertTimerInActiveList+0x38>
1a001a6e:	bf00      	nop
1a001a70:	10002a94 	.word	0x10002a94
1a001a74:	10002a90 	.word	0x10002a90

1a001a78 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001a78:	b530      	push	{r4, r5, lr}
1a001a7a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001a7c:	f000 fa92 	bl	1a001fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001a80:	4b11      	ldr	r3, [pc, #68]	; (1a001ac8 <prvCheckForValidListAndQueue+0x50>)
1a001a82:	681b      	ldr	r3, [r3, #0]
1a001a84:	b11b      	cbz	r3, 1a001a8e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001a86:	f000 faaf 	bl	1a001fe8 <vPortExitCritical>
}
1a001a8a:	b003      	add	sp, #12
1a001a8c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001a8e:	4d0f      	ldr	r5, [pc, #60]	; (1a001acc <prvCheckForValidListAndQueue+0x54>)
1a001a90:	4628      	mov	r0, r5
1a001a92:	f7ff fa1a 	bl	1a000eca <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001a96:	4c0e      	ldr	r4, [pc, #56]	; (1a001ad0 <prvCheckForValidListAndQueue+0x58>)
1a001a98:	4620      	mov	r0, r4
1a001a9a:	f7ff fa16 	bl	1a000eca <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001a9e:	4b0d      	ldr	r3, [pc, #52]	; (1a001ad4 <prvCheckForValidListAndQueue+0x5c>)
1a001aa0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001aa2:	4b0d      	ldr	r3, [pc, #52]	; (1a001ad8 <prvCheckForValidListAndQueue+0x60>)
1a001aa4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001aa6:	2300      	movs	r3, #0
1a001aa8:	9300      	str	r3, [sp, #0]
1a001aaa:	4b0c      	ldr	r3, [pc, #48]	; (1a001adc <prvCheckForValidListAndQueue+0x64>)
1a001aac:	4a0c      	ldr	r2, [pc, #48]	; (1a001ae0 <prvCheckForValidListAndQueue+0x68>)
1a001aae:	2110      	movs	r1, #16
1a001ab0:	200a      	movs	r0, #10
1a001ab2:	f7fe ff8e 	bl	1a0009d2 <xQueueGenericCreateStatic>
1a001ab6:	4b04      	ldr	r3, [pc, #16]	; (1a001ac8 <prvCheckForValidListAndQueue+0x50>)
1a001ab8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001aba:	2800      	cmp	r0, #0
1a001abc:	d0e3      	beq.n	1a001a86 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001abe:	4909      	ldr	r1, [pc, #36]	; (1a001ae4 <prvCheckForValidListAndQueue+0x6c>)
1a001ac0:	f7ff f9c6 	bl	1a000e50 <vQueueAddToRegistry>
1a001ac4:	e7df      	b.n	1a001a86 <prvCheckForValidListAndQueue+0xe>
1a001ac6:	bf00      	nop
1a001ac8:	10002bb4 	.word	0x10002bb4
1a001acc:	10002b38 	.word	0x10002b38
1a001ad0:	10002b4c 	.word	0x10002b4c
1a001ad4:	10002a90 	.word	0x10002a90
1a001ad8:	10002a94 	.word	0x10002a94
1a001adc:	10002b64 	.word	0x10002b64
1a001ae0:	10002a98 	.word	0x10002a98
1a001ae4:	1a004cac 	.word	0x1a004cac

1a001ae8 <prvInitialiseNewTimer>:
{
1a001ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001aec:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001aee:	b941      	cbnz	r1, 1a001b02 <prvInitialiseNewTimer+0x1a>
1a001af0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001af4:	f383 8811 	msr	BASEPRI, r3
1a001af8:	f3bf 8f6f 	isb	sy
1a001afc:	f3bf 8f4f 	dsb	sy
1a001b00:	e7fe      	b.n	1a001b00 <prvInitialiseNewTimer+0x18>
1a001b02:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001b04:	b174      	cbz	r4, 1a001b24 <prvInitialiseNewTimer+0x3c>
1a001b06:	461d      	mov	r5, r3
1a001b08:	4616      	mov	r6, r2
1a001b0a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001b0c:	f7ff ffb4 	bl	1a001a78 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001b10:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001b14:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001b16:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001b18:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001b1a:	9b06      	ldr	r3, [sp, #24]
1a001b1c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001b1e:	1d20      	adds	r0, r4, #4
1a001b20:	f7ff f9de 	bl	1a000ee0 <vListInitialiseItem>
}
1a001b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001b28 <xTimerCreateTimerTask>:
{
1a001b28:	b510      	push	{r4, lr}
1a001b2a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001b2c:	f7ff ffa4 	bl	1a001a78 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001b30:	4b12      	ldr	r3, [pc, #72]	; (1a001b7c <xTimerCreateTimerTask+0x54>)
1a001b32:	681b      	ldr	r3, [r3, #0]
1a001b34:	b1cb      	cbz	r3, 1a001b6a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001b36:	2400      	movs	r4, #0
1a001b38:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001b3a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001b3c:	aa07      	add	r2, sp, #28
1a001b3e:	a906      	add	r1, sp, #24
1a001b40:	a805      	add	r0, sp, #20
1a001b42:	f7ff fa17 	bl	1a000f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001b46:	9b05      	ldr	r3, [sp, #20]
1a001b48:	9302      	str	r3, [sp, #8]
1a001b4a:	9b06      	ldr	r3, [sp, #24]
1a001b4c:	9301      	str	r3, [sp, #4]
1a001b4e:	2304      	movs	r3, #4
1a001b50:	9300      	str	r3, [sp, #0]
1a001b52:	4623      	mov	r3, r4
1a001b54:	9a07      	ldr	r2, [sp, #28]
1a001b56:	490a      	ldr	r1, [pc, #40]	; (1a001b80 <xTimerCreateTimerTask+0x58>)
1a001b58:	480a      	ldr	r0, [pc, #40]	; (1a001b84 <xTimerCreateTimerTask+0x5c>)
1a001b5a:	f7ff fba5 	bl	1a0012a8 <xTaskCreateStatic>
1a001b5e:	4b0a      	ldr	r3, [pc, #40]	; (1a001b88 <xTimerCreateTimerTask+0x60>)
1a001b60:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001b62:	b110      	cbz	r0, 1a001b6a <xTimerCreateTimerTask+0x42>
}
1a001b64:	2001      	movs	r0, #1
1a001b66:	b008      	add	sp, #32
1a001b68:	bd10      	pop	{r4, pc}
1a001b6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b6e:	f383 8811 	msr	BASEPRI, r3
1a001b72:	f3bf 8f6f 	isb	sy
1a001b76:	f3bf 8f4f 	dsb	sy
1a001b7a:	e7fe      	b.n	1a001b7a <xTimerCreateTimerTask+0x52>
1a001b7c:	10002bb4 	.word	0x10002bb4
1a001b80:	1a004cb4 	.word	0x1a004cb4
1a001b84:	1a001eb9 	.word	0x1a001eb9
1a001b88:	10002bb8 	.word	0x10002bb8

1a001b8c <xTimerCreateStatic>:
	{
1a001b8c:	b530      	push	{r4, r5, lr}
1a001b8e:	b085      	sub	sp, #20
1a001b90:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001b92:	2530      	movs	r5, #48	; 0x30
1a001b94:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001b96:	9d03      	ldr	r5, [sp, #12]
1a001b98:	2d30      	cmp	r5, #48	; 0x30
1a001b9a:	d008      	beq.n	1a001bae <xTimerCreateStatic+0x22>
1a001b9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba0:	f383 8811 	msr	BASEPRI, r3
1a001ba4:	f3bf 8f6f 	isb	sy
1a001ba8:	f3bf 8f4f 	dsb	sy
1a001bac:	e7fe      	b.n	1a001bac <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a001bae:	b944      	cbnz	r4, 1a001bc2 <xTimerCreateStatic+0x36>
1a001bb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb4:	f383 8811 	msr	BASEPRI, r3
1a001bb8:	f3bf 8f6f 	isb	sy
1a001bbc:	f3bf 8f4f 	dsb	sy
1a001bc0:	e7fe      	b.n	1a001bc0 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001bc2:	9401      	str	r4, [sp, #4]
1a001bc4:	9d08      	ldr	r5, [sp, #32]
1a001bc6:	9500      	str	r5, [sp, #0]
1a001bc8:	f7ff ff8e 	bl	1a001ae8 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001bcc:	2301      	movs	r3, #1
1a001bce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a001bd2:	4620      	mov	r0, r4
1a001bd4:	b005      	add	sp, #20
1a001bd6:	bd30      	pop	{r4, r5, pc}

1a001bd8 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001bd8:	b1c8      	cbz	r0, 1a001c0e <xTimerGenericCommand+0x36>
{
1a001bda:	b530      	push	{r4, r5, lr}
1a001bdc:	b085      	sub	sp, #20
1a001bde:	4615      	mov	r5, r2
1a001be0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001be2:	4a17      	ldr	r2, [pc, #92]	; (1a001c40 <xTimerGenericCommand+0x68>)
1a001be4:	6810      	ldr	r0, [r2, #0]
1a001be6:	b340      	cbz	r0, 1a001c3a <xTimerGenericCommand+0x62>
1a001be8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001bea:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001bec:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001bee:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001bf0:	2905      	cmp	r1, #5
1a001bf2:	dc1d      	bgt.n	1a001c30 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001bf4:	f7ff fea4 	bl	1a001940 <xTaskGetSchedulerState>
1a001bf8:	2802      	cmp	r0, #2
1a001bfa:	d011      	beq.n	1a001c20 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001bfc:	2300      	movs	r3, #0
1a001bfe:	461a      	mov	r2, r3
1a001c00:	4669      	mov	r1, sp
1a001c02:	480f      	ldr	r0, [pc, #60]	; (1a001c40 <xTimerGenericCommand+0x68>)
1a001c04:	6800      	ldr	r0, [r0, #0]
1a001c06:	f7fe ff53 	bl	1a000ab0 <xQueueGenericSend>
}
1a001c0a:	b005      	add	sp, #20
1a001c0c:	bd30      	pop	{r4, r5, pc}
1a001c0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c12:	f383 8811 	msr	BASEPRI, r3
1a001c16:	f3bf 8f6f 	isb	sy
1a001c1a:	f3bf 8f4f 	dsb	sy
1a001c1e:	e7fe      	b.n	1a001c1e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001c20:	2300      	movs	r3, #0
1a001c22:	9a08      	ldr	r2, [sp, #32]
1a001c24:	4669      	mov	r1, sp
1a001c26:	4806      	ldr	r0, [pc, #24]	; (1a001c40 <xTimerGenericCommand+0x68>)
1a001c28:	6800      	ldr	r0, [r0, #0]
1a001c2a:	f7fe ff41 	bl	1a000ab0 <xQueueGenericSend>
1a001c2e:	e7ec      	b.n	1a001c0a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001c30:	2300      	movs	r3, #0
1a001c32:	4669      	mov	r1, sp
1a001c34:	f7fe fffa 	bl	1a000c2c <xQueueGenericSendFromISR>
1a001c38:	e7e7      	b.n	1a001c0a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001c3a:	2000      	movs	r0, #0
	return xReturn;
1a001c3c:	e7e5      	b.n	1a001c0a <xTimerGenericCommand+0x32>
1a001c3e:	bf00      	nop
1a001c40:	10002bb4 	.word	0x10002bb4

1a001c44 <prvSwitchTimerLists>:
{
1a001c44:	b570      	push	{r4, r5, r6, lr}
1a001c46:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001c48:	4b1a      	ldr	r3, [pc, #104]	; (1a001cb4 <prvSwitchTimerLists+0x70>)
1a001c4a:	681b      	ldr	r3, [r3, #0]
1a001c4c:	681a      	ldr	r2, [r3, #0]
1a001c4e:	b352      	cbz	r2, 1a001ca6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c50:	68db      	ldr	r3, [r3, #12]
1a001c52:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c54:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001c56:	1d25      	adds	r5, r4, #4
1a001c58:	4628      	mov	r0, r5
1a001c5a:	f7ff f96a 	bl	1a000f32 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001c60:	4620      	mov	r0, r4
1a001c62:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001c64:	69e3      	ldr	r3, [r4, #28]
1a001c66:	2b01      	cmp	r3, #1
1a001c68:	d1ee      	bne.n	1a001c48 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001c6a:	69a3      	ldr	r3, [r4, #24]
1a001c6c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001c6e:	429e      	cmp	r6, r3
1a001c70:	d207      	bcs.n	1a001c82 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001c72:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001c74:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001c76:	4629      	mov	r1, r5
1a001c78:	4b0e      	ldr	r3, [pc, #56]	; (1a001cb4 <prvSwitchTimerLists+0x70>)
1a001c7a:	6818      	ldr	r0, [r3, #0]
1a001c7c:	f7ff f93f 	bl	1a000efe <vListInsert>
1a001c80:	e7e2      	b.n	1a001c48 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001c82:	2100      	movs	r1, #0
1a001c84:	9100      	str	r1, [sp, #0]
1a001c86:	460b      	mov	r3, r1
1a001c88:	4632      	mov	r2, r6
1a001c8a:	4620      	mov	r0, r4
1a001c8c:	f7ff ffa4 	bl	1a001bd8 <xTimerGenericCommand>
				configASSERT( xResult );
1a001c90:	2800      	cmp	r0, #0
1a001c92:	d1d9      	bne.n	1a001c48 <prvSwitchTimerLists+0x4>
1a001c94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c98:	f383 8811 	msr	BASEPRI, r3
1a001c9c:	f3bf 8f6f 	isb	sy
1a001ca0:	f3bf 8f4f 	dsb	sy
1a001ca4:	e7fe      	b.n	1a001ca4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001ca6:	4a04      	ldr	r2, [pc, #16]	; (1a001cb8 <prvSwitchTimerLists+0x74>)
1a001ca8:	6810      	ldr	r0, [r2, #0]
1a001caa:	4902      	ldr	r1, [pc, #8]	; (1a001cb4 <prvSwitchTimerLists+0x70>)
1a001cac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001cae:	6013      	str	r3, [r2, #0]
}
1a001cb0:	b002      	add	sp, #8
1a001cb2:	bd70      	pop	{r4, r5, r6, pc}
1a001cb4:	10002a90 	.word	0x10002a90
1a001cb8:	10002a94 	.word	0x10002a94

1a001cbc <prvSampleTimeNow>:
{
1a001cbc:	b538      	push	{r3, r4, r5, lr}
1a001cbe:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001cc0:	f7ff fbb0 	bl	1a001424 <xTaskGetTickCount>
1a001cc4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001cc6:	4b07      	ldr	r3, [pc, #28]	; (1a001ce4 <prvSampleTimeNow+0x28>)
1a001cc8:	681b      	ldr	r3, [r3, #0]
1a001cca:	4283      	cmp	r3, r0
1a001ccc:	d805      	bhi.n	1a001cda <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001cce:	2300      	movs	r3, #0
1a001cd0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001cd2:	4b04      	ldr	r3, [pc, #16]	; (1a001ce4 <prvSampleTimeNow+0x28>)
1a001cd4:	601c      	str	r4, [r3, #0]
}
1a001cd6:	4620      	mov	r0, r4
1a001cd8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001cda:	f7ff ffb3 	bl	1a001c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001cde:	2301      	movs	r3, #1
1a001ce0:	602b      	str	r3, [r5, #0]
1a001ce2:	e7f6      	b.n	1a001cd2 <prvSampleTimeNow+0x16>
1a001ce4:	10002b60 	.word	0x10002b60

1a001ce8 <prvProcessExpiredTimer>:
{
1a001ce8:	b570      	push	{r4, r5, r6, lr}
1a001cea:	b082      	sub	sp, #8
1a001cec:	4605      	mov	r5, r0
1a001cee:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001cf0:	4b14      	ldr	r3, [pc, #80]	; (1a001d44 <prvProcessExpiredTimer+0x5c>)
1a001cf2:	681b      	ldr	r3, [r3, #0]
1a001cf4:	68db      	ldr	r3, [r3, #12]
1a001cf6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001cf8:	1d20      	adds	r0, r4, #4
1a001cfa:	f7ff f91a 	bl	1a000f32 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001cfe:	69e3      	ldr	r3, [r4, #28]
1a001d00:	2b01      	cmp	r3, #1
1a001d02:	d004      	beq.n	1a001d0e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d06:	4620      	mov	r0, r4
1a001d08:	4798      	blx	r3
}
1a001d0a:	b002      	add	sp, #8
1a001d0c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001d0e:	69a1      	ldr	r1, [r4, #24]
1a001d10:	462b      	mov	r3, r5
1a001d12:	4632      	mov	r2, r6
1a001d14:	4429      	add	r1, r5
1a001d16:	4620      	mov	r0, r4
1a001d18:	f7ff fe8a 	bl	1a001a30 <prvInsertTimerInActiveList>
1a001d1c:	2800      	cmp	r0, #0
1a001d1e:	d0f1      	beq.n	1a001d04 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001d20:	2100      	movs	r1, #0
1a001d22:	9100      	str	r1, [sp, #0]
1a001d24:	460b      	mov	r3, r1
1a001d26:	462a      	mov	r2, r5
1a001d28:	4620      	mov	r0, r4
1a001d2a:	f7ff ff55 	bl	1a001bd8 <xTimerGenericCommand>
			configASSERT( xResult );
1a001d2e:	2800      	cmp	r0, #0
1a001d30:	d1e8      	bne.n	1a001d04 <prvProcessExpiredTimer+0x1c>
1a001d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d36:	f383 8811 	msr	BASEPRI, r3
1a001d3a:	f3bf 8f6f 	isb	sy
1a001d3e:	f3bf 8f4f 	dsb	sy
1a001d42:	e7fe      	b.n	1a001d42 <prvProcessExpiredTimer+0x5a>
1a001d44:	10002a90 	.word	0x10002a90

1a001d48 <prvProcessTimerOrBlockTask>:
{
1a001d48:	b570      	push	{r4, r5, r6, lr}
1a001d4a:	b082      	sub	sp, #8
1a001d4c:	4606      	mov	r6, r0
1a001d4e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001d50:	f7ff fb60 	bl	1a001414 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001d54:	a801      	add	r0, sp, #4
1a001d56:	f7ff ffb1 	bl	1a001cbc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001d5a:	9b01      	ldr	r3, [sp, #4]
1a001d5c:	bb1b      	cbnz	r3, 1a001da6 <prvProcessTimerOrBlockTask+0x5e>
1a001d5e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001d60:	b90c      	cbnz	r4, 1a001d66 <prvProcessTimerOrBlockTask+0x1e>
1a001d62:	42b0      	cmp	r0, r6
1a001d64:	d218      	bcs.n	1a001d98 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001d66:	b12c      	cbz	r4, 1a001d74 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001d68:	4b11      	ldr	r3, [pc, #68]	; (1a001db0 <prvProcessTimerOrBlockTask+0x68>)
1a001d6a:	681b      	ldr	r3, [r3, #0]
1a001d6c:	681c      	ldr	r4, [r3, #0]
1a001d6e:	fab4 f484 	clz	r4, r4
1a001d72:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001d74:	4622      	mov	r2, r4
1a001d76:	1b71      	subs	r1, r6, r5
1a001d78:	4b0e      	ldr	r3, [pc, #56]	; (1a001db4 <prvProcessTimerOrBlockTask+0x6c>)
1a001d7a:	6818      	ldr	r0, [r3, #0]
1a001d7c:	f7ff f87c 	bl	1a000e78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001d80:	f7ff fbe2 	bl	1a001548 <xTaskResumeAll>
1a001d84:	b988      	cbnz	r0, 1a001daa <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001d86:	4b0c      	ldr	r3, [pc, #48]	; (1a001db8 <prvProcessTimerOrBlockTask+0x70>)
1a001d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d8c:	601a      	str	r2, [r3, #0]
1a001d8e:	f3bf 8f4f 	dsb	sy
1a001d92:	f3bf 8f6f 	isb	sy
1a001d96:	e008      	b.n	1a001daa <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001d98:	f7ff fbd6 	bl	1a001548 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001d9c:	4629      	mov	r1, r5
1a001d9e:	4630      	mov	r0, r6
1a001da0:	f7ff ffa2 	bl	1a001ce8 <prvProcessExpiredTimer>
1a001da4:	e001      	b.n	1a001daa <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001da6:	f7ff fbcf 	bl	1a001548 <xTaskResumeAll>
}
1a001daa:	b002      	add	sp, #8
1a001dac:	bd70      	pop	{r4, r5, r6, pc}
1a001dae:	bf00      	nop
1a001db0:	10002a94 	.word	0x10002a94
1a001db4:	10002bb4 	.word	0x10002bb4
1a001db8:	e000ed04 	.word	0xe000ed04

1a001dbc <prvProcessReceivedCommands>:
{
1a001dbc:	b530      	push	{r4, r5, lr}
1a001dbe:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001dc0:	e002      	b.n	1a001dc8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001dc2:	9b04      	ldr	r3, [sp, #16]
1a001dc4:	2b00      	cmp	r3, #0
1a001dc6:	da0f      	bge.n	1a001de8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001dc8:	2200      	movs	r2, #0
1a001dca:	a904      	add	r1, sp, #16
1a001dcc:	4b39      	ldr	r3, [pc, #228]	; (1a001eb4 <prvProcessReceivedCommands+0xf8>)
1a001dce:	6818      	ldr	r0, [r3, #0]
1a001dd0:	f7fe ff92 	bl	1a000cf8 <xQueueReceive>
1a001dd4:	2800      	cmp	r0, #0
1a001dd6:	d06a      	beq.n	1a001eae <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001dd8:	9b04      	ldr	r3, [sp, #16]
1a001dda:	2b00      	cmp	r3, #0
1a001ddc:	daf1      	bge.n	1a001dc2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001dde:	9907      	ldr	r1, [sp, #28]
1a001de0:	9806      	ldr	r0, [sp, #24]
1a001de2:	9b05      	ldr	r3, [sp, #20]
1a001de4:	4798      	blx	r3
1a001de6:	e7ec      	b.n	1a001dc2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001de8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001dea:	6963      	ldr	r3, [r4, #20]
1a001dec:	b113      	cbz	r3, 1a001df4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001dee:	1d20      	adds	r0, r4, #4
1a001df0:	f7ff f89f 	bl	1a000f32 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001df4:	a803      	add	r0, sp, #12
1a001df6:	f7ff ff61 	bl	1a001cbc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001dfa:	9b04      	ldr	r3, [sp, #16]
1a001dfc:	2b09      	cmp	r3, #9
1a001dfe:	d8e3      	bhi.n	1a001dc8 <prvProcessReceivedCommands+0xc>
1a001e00:	a201      	add	r2, pc, #4	; (adr r2, 1a001e08 <prvProcessReceivedCommands+0x4c>)
1a001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001e06:	bf00      	nop
1a001e08:	1a001e31 	.word	0x1a001e31
1a001e0c:	1a001e31 	.word	0x1a001e31
1a001e10:	1a001e31 	.word	0x1a001e31
1a001e14:	1a001dc9 	.word	0x1a001dc9
1a001e18:	1a001e79 	.word	0x1a001e79
1a001e1c:	1a001e9f 	.word	0x1a001e9f
1a001e20:	1a001e31 	.word	0x1a001e31
1a001e24:	1a001e31 	.word	0x1a001e31
1a001e28:	1a001dc9 	.word	0x1a001dc9
1a001e2c:	1a001e79 	.word	0x1a001e79
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001e30:	9905      	ldr	r1, [sp, #20]
1a001e32:	69a5      	ldr	r5, [r4, #24]
1a001e34:	460b      	mov	r3, r1
1a001e36:	4602      	mov	r2, r0
1a001e38:	4429      	add	r1, r5
1a001e3a:	4620      	mov	r0, r4
1a001e3c:	f7ff fdf8 	bl	1a001a30 <prvInsertTimerInActiveList>
1a001e40:	2800      	cmp	r0, #0
1a001e42:	d0c1      	beq.n	1a001dc8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001e46:	4620      	mov	r0, r4
1a001e48:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001e4a:	69e3      	ldr	r3, [r4, #28]
1a001e4c:	2b01      	cmp	r3, #1
1a001e4e:	d1bb      	bne.n	1a001dc8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001e50:	69a2      	ldr	r2, [r4, #24]
1a001e52:	2100      	movs	r1, #0
1a001e54:	9100      	str	r1, [sp, #0]
1a001e56:	460b      	mov	r3, r1
1a001e58:	9805      	ldr	r0, [sp, #20]
1a001e5a:	4402      	add	r2, r0
1a001e5c:	4620      	mov	r0, r4
1a001e5e:	f7ff febb 	bl	1a001bd8 <xTimerGenericCommand>
							configASSERT( xResult );
1a001e62:	2800      	cmp	r0, #0
1a001e64:	d1b0      	bne.n	1a001dc8 <prvProcessReceivedCommands+0xc>
1a001e66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e6a:	f383 8811 	msr	BASEPRI, r3
1a001e6e:	f3bf 8f6f 	isb	sy
1a001e72:	f3bf 8f4f 	dsb	sy
1a001e76:	e7fe      	b.n	1a001e76 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001e78:	9905      	ldr	r1, [sp, #20]
1a001e7a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001e7c:	b131      	cbz	r1, 1a001e8c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001e7e:	4603      	mov	r3, r0
1a001e80:	4602      	mov	r2, r0
1a001e82:	4401      	add	r1, r0
1a001e84:	4620      	mov	r0, r4
1a001e86:	f7ff fdd3 	bl	1a001a30 <prvInsertTimerInActiveList>
					break;
1a001e8a:	e79d      	b.n	1a001dc8 <prvProcessReceivedCommands+0xc>
1a001e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e90:	f383 8811 	msr	BASEPRI, r3
1a001e94:	f3bf 8f6f 	isb	sy
1a001e98:	f3bf 8f4f 	dsb	sy
1a001e9c:	e7fe      	b.n	1a001e9c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001e9e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001ea2:	2b00      	cmp	r3, #0
1a001ea4:	d190      	bne.n	1a001dc8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001ea6:	4620      	mov	r0, r4
1a001ea8:	f7fe fc94 	bl	1a0007d4 <vPortFree>
1a001eac:	e78c      	b.n	1a001dc8 <prvProcessReceivedCommands+0xc>
}
1a001eae:	b009      	add	sp, #36	; 0x24
1a001eb0:	bd30      	pop	{r4, r5, pc}
1a001eb2:	bf00      	nop
1a001eb4:	10002bb4 	.word	0x10002bb4

1a001eb8 <prvTimerTask>:
{
1a001eb8:	b500      	push	{lr}
1a001eba:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001ebc:	a801      	add	r0, sp, #4
1a001ebe:	f7ff fda7 	bl	1a001a10 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001ec2:	9901      	ldr	r1, [sp, #4]
1a001ec4:	f7ff ff40 	bl	1a001d48 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001ec8:	f7ff ff78 	bl	1a001dbc <prvProcessReceivedCommands>
1a001ecc:	e7f6      	b.n	1a001ebc <prvTimerTask+0x4>
1a001ece:	Address 0x000000001a001ece is out of bounds.


1a001ed0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001ed0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001ed2:	2300      	movs	r3, #0
1a001ed4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001ed6:	4b0d      	ldr	r3, [pc, #52]	; (1a001f0c <prvTaskExitError+0x3c>)
1a001ed8:	681b      	ldr	r3, [r3, #0]
1a001eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001ede:	d008      	beq.n	1a001ef2 <prvTaskExitError+0x22>
1a001ee0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ee4:	f383 8811 	msr	BASEPRI, r3
1a001ee8:	f3bf 8f6f 	isb	sy
1a001eec:	f3bf 8f4f 	dsb	sy
1a001ef0:	e7fe      	b.n	1a001ef0 <prvTaskExitError+0x20>
1a001ef2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ef6:	f383 8811 	msr	BASEPRI, r3
1a001efa:	f3bf 8f6f 	isb	sy
1a001efe:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001f02:	9b01      	ldr	r3, [sp, #4]
1a001f04:	2b00      	cmp	r3, #0
1a001f06:	d0fc      	beq.n	1a001f02 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001f08:	b002      	add	sp, #8
1a001f0a:	4770      	bx	lr
1a001f0c:	10000098 	.word	0x10000098

1a001f10 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001f10:	4808      	ldr	r0, [pc, #32]	; (1a001f34 <prvPortStartFirstTask+0x24>)
1a001f12:	6800      	ldr	r0, [r0, #0]
1a001f14:	6800      	ldr	r0, [r0, #0]
1a001f16:	f380 8808 	msr	MSP, r0
1a001f1a:	f04f 0000 	mov.w	r0, #0
1a001f1e:	f380 8814 	msr	CONTROL, r0
1a001f22:	b662      	cpsie	i
1a001f24:	b661      	cpsie	f
1a001f26:	f3bf 8f4f 	dsb	sy
1a001f2a:	f3bf 8f6f 	isb	sy
1a001f2e:	df00      	svc	0
1a001f30:	bf00      	nop
1a001f32:	0000      	.short	0x0000
1a001f34:	e000ed08 	.word	0xe000ed08

1a001f38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001f38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001f48 <vPortEnableVFP+0x10>
1a001f3c:	6801      	ldr	r1, [r0, #0]
1a001f3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001f42:	6001      	str	r1, [r0, #0]
1a001f44:	4770      	bx	lr
1a001f46:	0000      	.short	0x0000
1a001f48:	e000ed88 	.word	0xe000ed88

1a001f4c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001f50:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001f54:	f021 0101 	bic.w	r1, r1, #1
1a001f58:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001f5c:	4b05      	ldr	r3, [pc, #20]	; (1a001f74 <pxPortInitialiseStack+0x28>)
1a001f5e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001f62:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001f66:	f06f 0302 	mvn.w	r3, #2
1a001f6a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001f6e:	3844      	subs	r0, #68	; 0x44
1a001f70:	4770      	bx	lr
1a001f72:	bf00      	nop
1a001f74:	1a001ed1 	.word	0x1a001ed1
1a001f78:	ffffffff 	.word	0xffffffff
1a001f7c:	ffffffff 	.word	0xffffffff

1a001f80 <SVC_Handler>:
	__asm volatile (
1a001f80:	4b07      	ldr	r3, [pc, #28]	; (1a001fa0 <pxCurrentTCBConst2>)
1a001f82:	6819      	ldr	r1, [r3, #0]
1a001f84:	6808      	ldr	r0, [r1, #0]
1a001f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001f8a:	f380 8809 	msr	PSP, r0
1a001f8e:	f3bf 8f6f 	isb	sy
1a001f92:	f04f 0000 	mov.w	r0, #0
1a001f96:	f380 8811 	msr	BASEPRI, r0
1a001f9a:	4770      	bx	lr
1a001f9c:	f3af 8000 	nop.w

1a001fa0 <pxCurrentTCBConst2>:
1a001fa0:	10002968 	.word	0x10002968

1a001fa4 <vPortEnterCritical>:
1a001fa4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fa8:	f383 8811 	msr	BASEPRI, r3
1a001fac:	f3bf 8f6f 	isb	sy
1a001fb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001fb4:	4a0a      	ldr	r2, [pc, #40]	; (1a001fe0 <vPortEnterCritical+0x3c>)
1a001fb6:	6813      	ldr	r3, [r2, #0]
1a001fb8:	3301      	adds	r3, #1
1a001fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001fbc:	2b01      	cmp	r3, #1
1a001fbe:	d000      	beq.n	1a001fc2 <vPortEnterCritical+0x1e>
}
1a001fc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001fc2:	4b08      	ldr	r3, [pc, #32]	; (1a001fe4 <vPortEnterCritical+0x40>)
1a001fc4:	681b      	ldr	r3, [r3, #0]
1a001fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001fca:	d0f9      	beq.n	1a001fc0 <vPortEnterCritical+0x1c>
1a001fcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fd0:	f383 8811 	msr	BASEPRI, r3
1a001fd4:	f3bf 8f6f 	isb	sy
1a001fd8:	f3bf 8f4f 	dsb	sy
1a001fdc:	e7fe      	b.n	1a001fdc <vPortEnterCritical+0x38>
1a001fde:	bf00      	nop
1a001fe0:	10000098 	.word	0x10000098
1a001fe4:	e000ed04 	.word	0xe000ed04

1a001fe8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001fe8:	4b09      	ldr	r3, [pc, #36]	; (1a002010 <vPortExitCritical+0x28>)
1a001fea:	681b      	ldr	r3, [r3, #0]
1a001fec:	b943      	cbnz	r3, 1a002000 <vPortExitCritical+0x18>
1a001fee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ff2:	f383 8811 	msr	BASEPRI, r3
1a001ff6:	f3bf 8f6f 	isb	sy
1a001ffa:	f3bf 8f4f 	dsb	sy
1a001ffe:	e7fe      	b.n	1a001ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002000:	3b01      	subs	r3, #1
1a002002:	4a03      	ldr	r2, [pc, #12]	; (1a002010 <vPortExitCritical+0x28>)
1a002004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002006:	b90b      	cbnz	r3, 1a00200c <vPortExitCritical+0x24>
	__asm volatile
1a002008:	f383 8811 	msr	BASEPRI, r3
}
1a00200c:	4770      	bx	lr
1a00200e:	bf00      	nop
1a002010:	10000098 	.word	0x10000098
1a002014:	ffffffff 	.word	0xffffffff
1a002018:	ffffffff 	.word	0xffffffff
1a00201c:	ffffffff 	.word	0xffffffff

1a002020 <PendSV_Handler>:
	__asm volatile
1a002020:	f3ef 8009 	mrs	r0, PSP
1a002024:	f3bf 8f6f 	isb	sy
1a002028:	4b15      	ldr	r3, [pc, #84]	; (1a002080 <pxCurrentTCBConst>)
1a00202a:	681a      	ldr	r2, [r3, #0]
1a00202c:	f01e 0f10 	tst.w	lr, #16
1a002030:	bf08      	it	eq
1a002032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00203a:	6010      	str	r0, [r2, #0]
1a00203c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002040:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002044:	f380 8811 	msr	BASEPRI, r0
1a002048:	f3bf 8f4f 	dsb	sy
1a00204c:	f3bf 8f6f 	isb	sy
1a002050:	f7ff fb46 	bl	1a0016e0 <vTaskSwitchContext>
1a002054:	f04f 0000 	mov.w	r0, #0
1a002058:	f380 8811 	msr	BASEPRI, r0
1a00205c:	bc09      	pop	{r0, r3}
1a00205e:	6819      	ldr	r1, [r3, #0]
1a002060:	6808      	ldr	r0, [r1, #0]
1a002062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002066:	f01e 0f10 	tst.w	lr, #16
1a00206a:	bf08      	it	eq
1a00206c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002070:	f380 8809 	msr	PSP, r0
1a002074:	f3bf 8f6f 	isb	sy
1a002078:	4770      	bx	lr
1a00207a:	bf00      	nop
1a00207c:	f3af 8000 	nop.w

1a002080 <pxCurrentTCBConst>:
1a002080:	10002968 	.word	0x10002968

1a002084 <SysTick_Handler>:
{
1a002084:	b508      	push	{r3, lr}
	__asm volatile
1a002086:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00208a:	f383 8811 	msr	BASEPRI, r3
1a00208e:	f3bf 8f6f 	isb	sy
1a002092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002096:	f7ff f9cb 	bl	1a001430 <xTaskIncrementTick>
1a00209a:	b118      	cbz	r0, 1a0020a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00209c:	4b03      	ldr	r3, [pc, #12]	; (1a0020ac <SysTick_Handler+0x28>)
1a00209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020a2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0020a4:	2300      	movs	r3, #0
1a0020a6:	f383 8811 	msr	BASEPRI, r3
}
1a0020aa:	bd08      	pop	{r3, pc}
1a0020ac:	e000ed04 	.word	0xe000ed04

1a0020b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0020b0:	4a08      	ldr	r2, [pc, #32]	; (1a0020d4 <vPortSetupTimerInterrupt+0x24>)
1a0020b2:	2300      	movs	r3, #0
1a0020b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0020b6:	4908      	ldr	r1, [pc, #32]	; (1a0020d8 <vPortSetupTimerInterrupt+0x28>)
1a0020b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0020ba:	4b08      	ldr	r3, [pc, #32]	; (1a0020dc <vPortSetupTimerInterrupt+0x2c>)
1a0020bc:	681b      	ldr	r3, [r3, #0]
1a0020be:	4908      	ldr	r1, [pc, #32]	; (1a0020e0 <vPortSetupTimerInterrupt+0x30>)
1a0020c0:	fba1 1303 	umull	r1, r3, r1, r3
1a0020c4:	099b      	lsrs	r3, r3, #6
1a0020c6:	3b01      	subs	r3, #1
1a0020c8:	4906      	ldr	r1, [pc, #24]	; (1a0020e4 <vPortSetupTimerInterrupt+0x34>)
1a0020ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0020cc:	2307      	movs	r3, #7
1a0020ce:	6013      	str	r3, [r2, #0]
}
1a0020d0:	4770      	bx	lr
1a0020d2:	bf00      	nop
1a0020d4:	e000e010 	.word	0xe000e010
1a0020d8:	e000e018 	.word	0xe000e018
1a0020dc:	10002c6c 	.word	0x10002c6c
1a0020e0:	10624dd3 	.word	0x10624dd3
1a0020e4:	e000e014 	.word	0xe000e014

1a0020e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0020e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0021d4 <xPortStartScheduler+0xec>)
1a0020ea:	681a      	ldr	r2, [r3, #0]
1a0020ec:	4b3a      	ldr	r3, [pc, #232]	; (1a0021d8 <xPortStartScheduler+0xf0>)
1a0020ee:	429a      	cmp	r2, r3
1a0020f0:	d00d      	beq.n	1a00210e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0020f2:	4b38      	ldr	r3, [pc, #224]	; (1a0021d4 <xPortStartScheduler+0xec>)
1a0020f4:	681a      	ldr	r2, [r3, #0]
1a0020f6:	4b39      	ldr	r3, [pc, #228]	; (1a0021dc <xPortStartScheduler+0xf4>)
1a0020f8:	429a      	cmp	r2, r3
1a0020fa:	d111      	bne.n	1a002120 <xPortStartScheduler+0x38>
	__asm volatile
1a0020fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002100:	f383 8811 	msr	BASEPRI, r3
1a002104:	f3bf 8f6f 	isb	sy
1a002108:	f3bf 8f4f 	dsb	sy
1a00210c:	e7fe      	b.n	1a00210c <xPortStartScheduler+0x24>
1a00210e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002112:	f383 8811 	msr	BASEPRI, r3
1a002116:	f3bf 8f6f 	isb	sy
1a00211a:	f3bf 8f4f 	dsb	sy
1a00211e:	e7fe      	b.n	1a00211e <xPortStartScheduler+0x36>
{
1a002120:	b510      	push	{r4, lr}
1a002122:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002124:	4b2e      	ldr	r3, [pc, #184]	; (1a0021e0 <xPortStartScheduler+0xf8>)
1a002126:	781a      	ldrb	r2, [r3, #0]
1a002128:	b2d2      	uxtb	r2, r2
1a00212a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00212c:	22ff      	movs	r2, #255	; 0xff
1a00212e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002130:	781b      	ldrb	r3, [r3, #0]
1a002132:	b2db      	uxtb	r3, r3
1a002134:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002138:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00213c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002140:	4a28      	ldr	r2, [pc, #160]	; (1a0021e4 <xPortStartScheduler+0xfc>)
1a002142:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002144:	4b28      	ldr	r3, [pc, #160]	; (1a0021e8 <xPortStartScheduler+0x100>)
1a002146:	2207      	movs	r2, #7
1a002148:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00214a:	e009      	b.n	1a002160 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00214c:	4a26      	ldr	r2, [pc, #152]	; (1a0021e8 <xPortStartScheduler+0x100>)
1a00214e:	6813      	ldr	r3, [r2, #0]
1a002150:	3b01      	subs	r3, #1
1a002152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002154:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002158:	005b      	lsls	r3, r3, #1
1a00215a:	b2db      	uxtb	r3, r3
1a00215c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002160:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002164:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002168:	d1f0      	bne.n	1a00214c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00216a:	4b1f      	ldr	r3, [pc, #124]	; (1a0021e8 <xPortStartScheduler+0x100>)
1a00216c:	681b      	ldr	r3, [r3, #0]
1a00216e:	2b04      	cmp	r3, #4
1a002170:	d008      	beq.n	1a002184 <xPortStartScheduler+0x9c>
1a002172:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002176:	f383 8811 	msr	BASEPRI, r3
1a00217a:	f3bf 8f6f 	isb	sy
1a00217e:	f3bf 8f4f 	dsb	sy
1a002182:	e7fe      	b.n	1a002182 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002184:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00218a:	4a17      	ldr	r2, [pc, #92]	; (1a0021e8 <xPortStartScheduler+0x100>)
1a00218c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00218e:	9b01      	ldr	r3, [sp, #4]
1a002190:	b2db      	uxtb	r3, r3
1a002192:	4a13      	ldr	r2, [pc, #76]	; (1a0021e0 <xPortStartScheduler+0xf8>)
1a002194:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002196:	4b15      	ldr	r3, [pc, #84]	; (1a0021ec <xPortStartScheduler+0x104>)
1a002198:	681a      	ldr	r2, [r3, #0]
1a00219a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00219e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0021a0:	681a      	ldr	r2, [r3, #0]
1a0021a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0021a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0021a8:	f7ff ff82 	bl	1a0020b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0021ac:	2400      	movs	r4, #0
1a0021ae:	4b10      	ldr	r3, [pc, #64]	; (1a0021f0 <xPortStartScheduler+0x108>)
1a0021b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0021b2:	f7ff fec1 	bl	1a001f38 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0021b6:	4a0f      	ldr	r2, [pc, #60]	; (1a0021f4 <xPortStartScheduler+0x10c>)
1a0021b8:	6813      	ldr	r3, [r2, #0]
1a0021ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0021be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0021c0:	f7ff fea6 	bl	1a001f10 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0021c4:	f7ff fa8c 	bl	1a0016e0 <vTaskSwitchContext>
	prvTaskExitError();
1a0021c8:	f7ff fe82 	bl	1a001ed0 <prvTaskExitError>
}
1a0021cc:	4620      	mov	r0, r4
1a0021ce:	b002      	add	sp, #8
1a0021d0:	bd10      	pop	{r4, pc}
1a0021d2:	bf00      	nop
1a0021d4:	e000ed00 	.word	0xe000ed00
1a0021d8:	410fc271 	.word	0x410fc271
1a0021dc:	410fc270 	.word	0x410fc270
1a0021e0:	e000e400 	.word	0xe000e400
1a0021e4:	10002bbc 	.word	0x10002bbc
1a0021e8:	10002bc0 	.word	0x10002bc0
1a0021ec:	e000ed20 	.word	0xe000ed20
1a0021f0:	10000098 	.word	0x10000098
1a0021f4:	e000ef34 	.word	0xe000ef34

1a0021f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0021f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0021fc:	2b0f      	cmp	r3, #15
1a0021fe:	d90f      	bls.n	1a002220 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002200:	4a10      	ldr	r2, [pc, #64]	; (1a002244 <vPortValidateInterruptPriority+0x4c>)
1a002202:	5c9b      	ldrb	r3, [r3, r2]
1a002204:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002206:	4a10      	ldr	r2, [pc, #64]	; (1a002248 <vPortValidateInterruptPriority+0x50>)
1a002208:	7812      	ldrb	r2, [r2, #0]
1a00220a:	429a      	cmp	r2, r3
1a00220c:	d908      	bls.n	1a002220 <vPortValidateInterruptPriority+0x28>
1a00220e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002212:	f383 8811 	msr	BASEPRI, r3
1a002216:	f3bf 8f6f 	isb	sy
1a00221a:	f3bf 8f4f 	dsb	sy
1a00221e:	e7fe      	b.n	1a00221e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002220:	4b0a      	ldr	r3, [pc, #40]	; (1a00224c <vPortValidateInterruptPriority+0x54>)
1a002222:	681b      	ldr	r3, [r3, #0]
1a002224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002228:	4a09      	ldr	r2, [pc, #36]	; (1a002250 <vPortValidateInterruptPriority+0x58>)
1a00222a:	6812      	ldr	r2, [r2, #0]
1a00222c:	4293      	cmp	r3, r2
1a00222e:	d908      	bls.n	1a002242 <vPortValidateInterruptPriority+0x4a>
1a002230:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002234:	f383 8811 	msr	BASEPRI, r3
1a002238:	f3bf 8f6f 	isb	sy
1a00223c:	f3bf 8f4f 	dsb	sy
1a002240:	e7fe      	b.n	1a002240 <vPortValidateInterruptPriority+0x48>
	}
1a002242:	4770      	bx	lr
1a002244:	e000e3f0 	.word	0xe000e3f0
1a002248:	10002bbc 	.word	0x10002bbc
1a00224c:	e000ed0c 	.word	0xe000ed0c
1a002250:	10002bc0 	.word	0x10002bc0

1a002254 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002254:	2200      	movs	r2, #0
1a002256:	2a05      	cmp	r2, #5
1a002258:	d819      	bhi.n	1a00228e <Board_LED_Init+0x3a>
{
1a00225a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00225c:	490c      	ldr	r1, [pc, #48]	; (1a002290 <Board_LED_Init+0x3c>)
1a00225e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002262:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002266:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002268:	4b0a      	ldr	r3, [pc, #40]	; (1a002294 <Board_LED_Init+0x40>)
1a00226a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00226e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002272:	2001      	movs	r0, #1
1a002274:	40a0      	lsls	r0, r4
1a002276:	4301      	orrs	r1, r0
1a002278:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00227c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002280:	2100      	movs	r1, #0
1a002282:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002284:	3201      	adds	r2, #1
1a002286:	2a05      	cmp	r2, #5
1a002288:	d9e8      	bls.n	1a00225c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00228a:	bc70      	pop	{r4, r5, r6}
1a00228c:	4770      	bx	lr
1a00228e:	4770      	bx	lr
1a002290:	1a004cc8 	.word	0x1a004cc8
1a002294:	400f4000 	.word	0x400f4000

1a002298 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002298:	2300      	movs	r3, #0
1a00229a:	2b03      	cmp	r3, #3
1a00229c:	d816      	bhi.n	1a0022cc <Board_TEC_Init+0x34>
{
1a00229e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0022a0:	490b      	ldr	r1, [pc, #44]	; (1a0022d0 <Board_TEC_Init+0x38>)
1a0022a2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0022a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0022aa:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0022ac:	4c09      	ldr	r4, [pc, #36]	; (1a0022d4 <Board_TEC_Init+0x3c>)
1a0022ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0022b2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0022b6:	2001      	movs	r0, #1
1a0022b8:	40a8      	lsls	r0, r5
1a0022ba:	ea21 0100 	bic.w	r1, r1, r0
1a0022be:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0022c2:	3301      	adds	r3, #1
1a0022c4:	2b03      	cmp	r3, #3
1a0022c6:	d9eb      	bls.n	1a0022a0 <Board_TEC_Init+0x8>
    }
}
1a0022c8:	bc30      	pop	{r4, r5}
1a0022ca:	4770      	bx	lr
1a0022cc:	4770      	bx	lr
1a0022ce:	bf00      	nop
1a0022d0:	1a004cc0 	.word	0x1a004cc0
1a0022d4:	400f4000 	.word	0x400f4000

1a0022d8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0022d8:	2300      	movs	r3, #0
1a0022da:	2b08      	cmp	r3, #8
1a0022dc:	d816      	bhi.n	1a00230c <Board_GPIO_Init+0x34>
{
1a0022de:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0022e0:	490b      	ldr	r1, [pc, #44]	; (1a002310 <Board_GPIO_Init+0x38>)
1a0022e2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0022e6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0022ea:	784d      	ldrb	r5, [r1, #1]
1a0022ec:	4c09      	ldr	r4, [pc, #36]	; (1a002314 <Board_GPIO_Init+0x3c>)
1a0022ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0022f2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0022f6:	2001      	movs	r0, #1
1a0022f8:	40a8      	lsls	r0, r5
1a0022fa:	ea21 0100 	bic.w	r1, r1, r0
1a0022fe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002302:	3301      	adds	r3, #1
1a002304:	2b08      	cmp	r3, #8
1a002306:	d9eb      	bls.n	1a0022e0 <Board_GPIO_Init+0x8>
    }
}
1a002308:	bc30      	pop	{r4, r5}
1a00230a:	4770      	bx	lr
1a00230c:	4770      	bx	lr
1a00230e:	bf00      	nop
1a002310:	1a004cd4 	.word	0x1a004cd4
1a002314:	400f4000 	.word	0x400f4000

1a002318 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002318:	b510      	push	{r4, lr}
1a00231a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00231c:	4c08      	ldr	r4, [pc, #32]	; (1a002340 <Board_ADC_Init+0x28>)
1a00231e:	4669      	mov	r1, sp
1a002320:	4620      	mov	r0, r4
1a002322:	f000 f9ef 	bl	1a002704 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002326:	4a07      	ldr	r2, [pc, #28]	; (1a002344 <Board_ADC_Init+0x2c>)
1a002328:	4669      	mov	r1, sp
1a00232a:	4620      	mov	r0, r4
1a00232c:	f000 fa54 	bl	1a0027d8 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002330:	2200      	movs	r2, #0
1a002332:	4669      	mov	r1, sp
1a002334:	4620      	mov	r0, r4
1a002336:	f000 fa68 	bl	1a00280a <Chip_ADC_SetResolution>
}
1a00233a:	b002      	add	sp, #8
1a00233c:	bd10      	pop	{r4, pc}
1a00233e:	bf00      	nop
1a002340:	400e3000 	.word	0x400e3000
1a002344:	00061a80 	.word	0x00061a80

1a002348 <Board_SPI_Init>:
{
1a002348:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00234a:	4c0b      	ldr	r4, [pc, #44]	; (1a002378 <Board_SPI_Init+0x30>)
1a00234c:	4620      	mov	r0, r4
1a00234e:	f000 fee9 	bl	1a003124 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002352:	6863      	ldr	r3, [r4, #4]
1a002354:	f023 0304 	bic.w	r3, r3, #4
1a002358:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00235a:	6823      	ldr	r3, [r4, #0]
1a00235c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002360:	f043 0307 	orr.w	r3, r3, #7
1a002364:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002366:	4905      	ldr	r1, [pc, #20]	; (1a00237c <Board_SPI_Init+0x34>)
1a002368:	4620      	mov	r0, r4
1a00236a:	f000 febc 	bl	1a0030e6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00236e:	6863      	ldr	r3, [r4, #4]
1a002370:	f043 0302 	orr.w	r3, r3, #2
1a002374:	6063      	str	r3, [r4, #4]
}
1a002376:	bd10      	pop	{r4, pc}
1a002378:	400c5000 	.word	0x400c5000
1a00237c:	000186a0 	.word	0x000186a0

1a002380 <Board_I2C_Init>:
{
1a002380:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002382:	2000      	movs	r0, #0
1a002384:	f000 fefa 	bl	1a00317c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002388:	4b04      	ldr	r3, [pc, #16]	; (1a00239c <Board_I2C_Init+0x1c>)
1a00238a:	f640 0208 	movw	r2, #2056	; 0x808
1a00238e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002392:	4903      	ldr	r1, [pc, #12]	; (1a0023a0 <Board_I2C_Init+0x20>)
1a002394:	2000      	movs	r0, #0
1a002396:	f000 ff03 	bl	1a0031a0 <Chip_I2C_SetClockRate>
}
1a00239a:	bd08      	pop	{r3, pc}
1a00239c:	40086000 	.word	0x40086000
1a0023a0:	000f4240 	.word	0x000f4240

1a0023a4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0023a4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0023a6:	4c07      	ldr	r4, [pc, #28]	; (1a0023c4 <Board_Debug_Init+0x20>)
1a0023a8:	4620      	mov	r0, r4
1a0023aa:	f000 f8b7 	bl	1a00251c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0023ae:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0023b2:	4620      	mov	r0, r4
1a0023b4:	f000 f8fc 	bl	1a0025b0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0023b8:	2303      	movs	r3, #3
1a0023ba:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0023bc:	2301      	movs	r3, #1
1a0023be:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0023c0:	bd10      	pop	{r4, pc}
1a0023c2:	bf00      	nop
1a0023c4:	400c1000 	.word	0x400c1000

1a0023c8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0023c8:	4b03      	ldr	r3, [pc, #12]	; (1a0023d8 <Board_UARTPutChar+0x10>)
1a0023ca:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0023cc:	f013 0f20 	tst.w	r3, #32
1a0023d0:	d0fa      	beq.n	1a0023c8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0023d2:	4b01      	ldr	r3, [pc, #4]	; (1a0023d8 <Board_UARTPutChar+0x10>)
1a0023d4:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0023d6:	4770      	bx	lr
1a0023d8:	400c1000 	.word	0x400c1000

1a0023dc <Board_UARTGetChar>:
	return pUART->LSR;
1a0023dc:	4b05      	ldr	r3, [pc, #20]	; (1a0023f4 <Board_UARTGetChar+0x18>)
1a0023de:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0023e0:	f013 0f01 	tst.w	r3, #1
1a0023e4:	d003      	beq.n	1a0023ee <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0023e6:	4b03      	ldr	r3, [pc, #12]	; (1a0023f4 <Board_UARTGetChar+0x18>)
1a0023e8:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0023ea:	b2c0      	uxtb	r0, r0
1a0023ec:	4770      	bx	lr
    }
    return EOF;
1a0023ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0023f2:	4770      	bx	lr
1a0023f4:	400c1000 	.word	0x400c1000

1a0023f8 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0023f8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0023fa:	f7ff ffd3 	bl	1a0023a4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0023fe:	4808      	ldr	r0, [pc, #32]	; (1a002420 <Board_Init+0x28>)
1a002400:	f000 fe50 	bl	1a0030a4 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002404:	f7ff ff68 	bl	1a0022d8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002408:	f7ff ff86 	bl	1a002318 <Board_ADC_Init>
   Board_SPI_Init();
1a00240c:	f7ff ff9c 	bl	1a002348 <Board_SPI_Init>
   Board_I2C_Init();
1a002410:	f7ff ffb6 	bl	1a002380 <Board_I2C_Init>

   Board_LED_Init();
1a002414:	f7ff ff1e 	bl	1a002254 <Board_LED_Init>
   Board_TEC_Init();
1a002418:	f7ff ff3e 	bl	1a002298 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a00241c:	bd08      	pop	{r3, pc}
1a00241e:	bf00      	nop
1a002420:	400f4000 	.word	0x400f4000

1a002424 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a002424:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002426:	b2c0      	uxtb	r0, r0
1a002428:	f7ff ffce 	bl	1a0023c8 <Board_UARTPutChar>
}
1a00242c:	bd08      	pop	{r3, pc}

1a00242e <__stdio_getchar>:

int __stdio_getchar() {
1a00242e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002430:	f7ff ffd4 	bl	1a0023dc <Board_UARTGetChar>
}
1a002434:	bd08      	pop	{r3, pc}

1a002436 <__stdio_init>:

void __stdio_init() {
1a002436:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002438:	f7ff ffb4 	bl	1a0023a4 <Board_Debug_Init>
1a00243c:	bd08      	pop	{r3, pc}
1a00243e:	Address 0x000000001a00243e is out of bounds.


1a002440 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002440:	2300      	movs	r3, #0
1a002442:	2b1c      	cmp	r3, #28
1a002444:	d812      	bhi.n	1a00246c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002446:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002448:	4a09      	ldr	r2, [pc, #36]	; (1a002470 <Board_SetupMuxing+0x30>)
1a00244a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00244e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002452:	784a      	ldrb	r2, [r1, #1]
1a002454:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002456:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00245a:	4906      	ldr	r1, [pc, #24]	; (1a002474 <Board_SetupMuxing+0x34>)
1a00245c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002460:	3301      	adds	r3, #1
1a002462:	2b1c      	cmp	r3, #28
1a002464:	d9f0      	bls.n	1a002448 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002466:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00246a:	4770      	bx	lr
1a00246c:	4770      	bx	lr
1a00246e:	bf00      	nop
1a002470:	1a004cf0 	.word	0x1a004cf0
1a002474:	40086000 	.word	0x40086000

1a002478 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002478:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00247a:	4a17      	ldr	r2, [pc, #92]	; (1a0024d8 <Board_SetupClocking+0x60>)
1a00247c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002484:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002488:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00248c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002494:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002498:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00249c:	2201      	movs	r2, #1
1a00249e:	490f      	ldr	r1, [pc, #60]	; (1a0024dc <Board_SetupClocking+0x64>)
1a0024a0:	2006      	movs	r0, #6
1a0024a2:	f000 fcd5 	bl	1a002e50 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0024a6:	2400      	movs	r4, #0
1a0024a8:	b14c      	cbz	r4, 1a0024be <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0024aa:	4b0b      	ldr	r3, [pc, #44]	; (1a0024d8 <Board_SetupClocking+0x60>)
1a0024ac:	685a      	ldr	r2, [r3, #4]
1a0024ae:	f022 020c 	bic.w	r2, r2, #12
1a0024b2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0024b4:	685a      	ldr	r2, [r3, #4]
1a0024b6:	f042 0203 	orr.w	r2, r2, #3
1a0024ba:	605a      	str	r2, [r3, #4]
}
1a0024bc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0024be:	4808      	ldr	r0, [pc, #32]	; (1a0024e0 <Board_SetupClocking+0x68>)
1a0024c0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0024c4:	2301      	movs	r3, #1
1a0024c6:	788a      	ldrb	r2, [r1, #2]
1a0024c8:	7849      	ldrb	r1, [r1, #1]
1a0024ca:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0024ce:	f000 fbeb 	bl	1a002ca8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0024d2:	3401      	adds	r4, #1
1a0024d4:	e7e8      	b.n	1a0024a8 <Board_SetupClocking+0x30>
1a0024d6:	bf00      	nop
1a0024d8:	40043000 	.word	0x40043000
1a0024dc:	0c28cb00 	.word	0x0c28cb00
1a0024e0:	1a004cec 	.word	0x1a004cec

1a0024e4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0024e4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0024e6:	f7ff ffab 	bl	1a002440 <Board_SetupMuxing>
    Board_SetupClocking();
1a0024ea:	f7ff ffc5 	bl	1a002478 <Board_SetupClocking>
}
1a0024ee:	bd08      	pop	{r3, pc}

1a0024f0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0024f0:	4b09      	ldr	r3, [pc, #36]	; (1a002518 <Chip_UART_GetIndex+0x28>)
1a0024f2:	4298      	cmp	r0, r3
1a0024f4:	d009      	beq.n	1a00250a <Chip_UART_GetIndex+0x1a>
1a0024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0024fa:	4298      	cmp	r0, r3
1a0024fc:	d007      	beq.n	1a00250e <Chip_UART_GetIndex+0x1e>
1a0024fe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002502:	4298      	cmp	r0, r3
1a002504:	d005      	beq.n	1a002512 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002506:	2000      	movs	r0, #0
1a002508:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00250a:	2002      	movs	r0, #2
1a00250c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00250e:	2003      	movs	r0, #3
1a002510:	4770      	bx	lr
			return 1;
1a002512:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002514:	4770      	bx	lr
1a002516:	bf00      	nop
1a002518:	400c1000 	.word	0x400c1000

1a00251c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00251c:	b530      	push	{r4, r5, lr}
1a00251e:	b083      	sub	sp, #12
1a002520:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002522:	f7ff ffe5 	bl	1a0024f0 <Chip_UART_GetIndex>
1a002526:	2301      	movs	r3, #1
1a002528:	461a      	mov	r2, r3
1a00252a:	4619      	mov	r1, r3
1a00252c:	4d0e      	ldr	r5, [pc, #56]	; (1a002568 <Chip_UART_Init+0x4c>)
1a00252e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002532:	f000 fbff 	bl	1a002d34 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002536:	2307      	movs	r3, #7
1a002538:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00253a:	2300      	movs	r3, #0
1a00253c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00253e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002540:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002542:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002544:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002546:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002548:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00254a:	4b08      	ldr	r3, [pc, #32]	; (1a00256c <Chip_UART_Init+0x50>)
1a00254c:	429c      	cmp	r4, r3
1a00254e:	d006      	beq.n	1a00255e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002550:	2303      	movs	r3, #3
1a002552:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002554:	2310      	movs	r3, #16
1a002556:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002558:	9b01      	ldr	r3, [sp, #4]
}
1a00255a:	b003      	add	sp, #12
1a00255c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00255e:	2300      	movs	r3, #0
1a002560:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002562:	69a3      	ldr	r3, [r4, #24]
1a002564:	9301      	str	r3, [sp, #4]
1a002566:	e7f3      	b.n	1a002550 <Chip_UART_Init+0x34>
1a002568:	1a004d6c 	.word	0x1a004d6c
1a00256c:	40082000 	.word	0x40082000

1a002570 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002570:	b538      	push	{r3, r4, r5, lr}
1a002572:	4605      	mov	r5, r0
1a002574:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002576:	f7ff ffbb 	bl	1a0024f0 <Chip_UART_GetIndex>
1a00257a:	4b0c      	ldr	r3, [pc, #48]	; (1a0025ac <Chip_UART_SetBaud+0x3c>)
1a00257c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002580:	f000 fc36 	bl	1a002df0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002584:	0123      	lsls	r3, r4, #4
1a002586:	fbb0 f3f3 	udiv	r3, r0, r3
1a00258a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00258c:	68ea      	ldr	r2, [r5, #12]
1a00258e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002592:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002594:	6029      	str	r1, [r5, #0]
1a002596:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00259a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00259c:	68ea      	ldr	r2, [r5, #12]
1a00259e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0025a2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0025a4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0025a8:	0900      	lsrs	r0, r0, #4
1a0025aa:	bd38      	pop	{r3, r4, r5, pc}
1a0025ac:	1a004d64 	.word	0x1a004d64

1a0025b0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0025b4:	b083      	sub	sp, #12
1a0025b6:	4683      	mov	fp, r0
1a0025b8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0025ba:	f7ff ff99 	bl	1a0024f0 <Chip_UART_GetIndex>
1a0025be:	4b35      	ldr	r3, [pc, #212]	; (1a002694 <Chip_UART_SetBaudFDR+0xe4>)
1a0025c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0025c4:	f000 fc14 	bl	1a002df0 <Chip_Clock_GetRate>
1a0025c8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0025ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0025ce:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0025d0:	2300      	movs	r3, #0
1a0025d2:	9301      	str	r3, [sp, #4]
1a0025d4:	46a2      	mov	sl, r4
1a0025d6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0025d8:	e02a      	b.n	1a002630 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0025da:	4242      	negs	r2, r0
				div ++;
1a0025dc:	1c4b      	adds	r3, r1, #1
1a0025de:	e017      	b.n	1a002610 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0025e0:	b30a      	cbz	r2, 1a002626 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0025e2:	4617      	mov	r7, r2
			sd = d;
1a0025e4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0025e6:	46a2      	mov	sl, r4
			sdiv = div;
1a0025e8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0025ea:	3501      	adds	r5, #1
1a0025ec:	42ac      	cmp	r4, r5
1a0025ee:	d91e      	bls.n	1a00262e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0025f0:	0933      	lsrs	r3, r6, #4
1a0025f2:	0730      	lsls	r0, r6, #28
1a0025f4:	fba4 0100 	umull	r0, r1, r4, r0
1a0025f8:	fb04 1103 	mla	r1, r4, r3, r1
1a0025fc:	1962      	adds	r2, r4, r5
1a0025fe:	fb08 f202 	mul.w	r2, r8, r2
1a002602:	2300      	movs	r3, #0
1a002604:	f001 f9d4 	bl	1a0039b0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002608:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00260a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00260c:	2800      	cmp	r0, #0
1a00260e:	dbe4      	blt.n	1a0025da <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002610:	4297      	cmp	r7, r2
1a002612:	d3ea      	bcc.n	1a0025ea <Chip_UART_SetBaudFDR+0x3a>
1a002614:	2b00      	cmp	r3, #0
1a002616:	d0e8      	beq.n	1a0025ea <Chip_UART_SetBaudFDR+0x3a>
1a002618:	0c19      	lsrs	r1, r3, #16
1a00261a:	d1e6      	bne.n	1a0025ea <Chip_UART_SetBaudFDR+0x3a>
1a00261c:	2b02      	cmp	r3, #2
1a00261e:	d8df      	bhi.n	1a0025e0 <Chip_UART_SetBaudFDR+0x30>
1a002620:	2d00      	cmp	r5, #0
1a002622:	d0dd      	beq.n	1a0025e0 <Chip_UART_SetBaudFDR+0x30>
1a002624:	e7e1      	b.n	1a0025ea <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002626:	4617      	mov	r7, r2
			sd = d;
1a002628:	9501      	str	r5, [sp, #4]
			sm = m;
1a00262a:	46a2      	mov	sl, r4
			sdiv = div;
1a00262c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00262e:	3401      	adds	r4, #1
1a002630:	b11f      	cbz	r7, 1a00263a <Chip_UART_SetBaudFDR+0x8a>
1a002632:	2c0f      	cmp	r4, #15
1a002634:	d801      	bhi.n	1a00263a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002636:	2500      	movs	r5, #0
1a002638:	e7d8      	b.n	1a0025ec <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00263a:	f1b9 0f00 	cmp.w	r9, #0
1a00263e:	d024      	beq.n	1a00268a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002640:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002648:	f8cb 300c 	str.w	r3, [fp, #12]
1a00264c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002650:	f8cb 3000 	str.w	r3, [fp]
1a002654:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002658:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00265c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002664:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002668:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00266c:	b2db      	uxtb	r3, r3
1a00266e:	9901      	ldr	r1, [sp, #4]
1a002670:	f001 020f 	and.w	r2, r1, #15
1a002674:	4313      	orrs	r3, r2
1a002676:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00267a:	0933      	lsrs	r3, r6, #4
1a00267c:	fb0a f303 	mul.w	r3, sl, r3
1a002680:	448a      	add	sl, r1
1a002682:	fb09 f90a 	mul.w	r9, r9, sl
1a002686:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00268a:	4648      	mov	r0, r9
1a00268c:	b003      	add	sp, #12
1a00268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002692:	bf00      	nop
1a002694:	1a004d64 	.word	0x1a004d64

1a002698 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002698:	4b03      	ldr	r3, [pc, #12]	; (1a0026a8 <Chip_ADC_GetClockIndex+0x10>)
1a00269a:	4298      	cmp	r0, r3
1a00269c:	d001      	beq.n	1a0026a2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00269e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0026a0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0026a2:	2004      	movs	r0, #4
1a0026a4:	4770      	bx	lr
1a0026a6:	bf00      	nop
1a0026a8:	400e4000 	.word	0x400e4000

1a0026ac <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0026ac:	b570      	push	{r4, r5, r6, lr}
1a0026ae:	460d      	mov	r5, r1
1a0026b0:	4614      	mov	r4, r2
1a0026b2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0026b4:	f7ff fff0 	bl	1a002698 <Chip_ADC_GetClockIndex>
1a0026b8:	f000 fb9a 	bl	1a002df0 <Chip_Clock_GetRate>
	if (burstMode) {
1a0026bc:	b965      	cbnz	r5, 1a0026d8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0026be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0026c2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0026c6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0026ca:	0064      	lsls	r4, r4, #1
1a0026cc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0026d0:	b2c0      	uxtb	r0, r0
1a0026d2:	3801      	subs	r0, #1
	return div;
}
1a0026d4:	b2c0      	uxtb	r0, r0
1a0026d6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0026d8:	fb04 f406 	mul.w	r4, r4, r6
1a0026dc:	e7f3      	b.n	1a0026c6 <getClkDiv+0x1a>

1a0026de <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a0026de:	6803      	ldr	r3, [r0, #0]
1a0026e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a0026e4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a0026e8:	6001      	str	r1, [r0, #0]
}
1a0026ea:	4770      	bx	lr

1a0026ec <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a0026ec:	3104      	adds	r1, #4
1a0026ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a0026f2:	2b00      	cmp	r3, #0
1a0026f4:	db01      	blt.n	1a0026fa <readAdcVal+0xe>
		return ERROR;
1a0026f6:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a0026f8:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a0026fa:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a0026fe:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a002700:	2001      	movs	r0, #1
1a002702:	4770      	bx	lr

1a002704 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002704:	b538      	push	{r3, r4, r5, lr}
1a002706:	4605      	mov	r5, r0
1a002708:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00270a:	f7ff ffc5 	bl	1a002698 <Chip_ADC_GetClockIndex>
1a00270e:	2301      	movs	r3, #1
1a002710:	461a      	mov	r2, r3
1a002712:	4619      	mov	r1, r3
1a002714:	f000 fb0e 	bl	1a002d34 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002718:	2100      	movs	r1, #0
1a00271a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00271c:	4a08      	ldr	r2, [pc, #32]	; (1a002740 <Chip_ADC_Init+0x3c>)
1a00271e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002720:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002722:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002724:	230b      	movs	r3, #11
1a002726:	4628      	mov	r0, r5
1a002728:	f7ff ffc0 	bl	1a0026ac <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00272c:	0200      	lsls	r0, r0, #8
1a00272e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002732:	7920      	ldrb	r0, [r4, #4]
1a002734:	0440      	lsls	r0, r0, #17
1a002736:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00273a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00273c:	6028      	str	r0, [r5, #0]
}
1a00273e:	bd38      	pop	{r3, r4, r5, pc}
1a002740:	00061a80 	.word	0x00061a80

1a002744 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a002744:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a002746:	f44f 7280 	mov.w	r2, #256	; 0x100
1a00274a:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a00274c:	2200      	movs	r2, #0
1a00274e:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a002750:	f7ff ffa2 	bl	1a002698 <Chip_ADC_GetClockIndex>
1a002754:	f000 fb32 	bl	1a002dbc <Chip_Clock_Disable>
}
1a002758:	bd08      	pop	{r3, pc}

1a00275a <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a00275a:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a00275c:	f7ff ffc6 	bl	1a0026ec <readAdcVal>
}
1a002760:	bd08      	pop	{r3, pc}

1a002762 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a002762:	2a01      	cmp	r2, #1
1a002764:	d00a      	beq.n	1a00277c <Chip_ADC_ReadStatus+0x1a>
1a002766:	b11a      	cbz	r2, 1a002770 <Chip_ADC_ReadStatus+0xe>
1a002768:	2a02      	cmp	r2, #2
1a00276a:	d00f      	beq.n	1a00278c <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a00276c:	2000      	movs	r0, #0
}
1a00276e:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002770:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002772:	40c8      	lsrs	r0, r1
1a002774:	f000 0001 	and.w	r0, r0, #1
1a002778:	b2c0      	uxtb	r0, r0
1a00277a:	4770      	bx	lr
		channel += 8;
1a00277c:	3108      	adds	r1, #8
1a00277e:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002780:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002782:	40c8      	lsrs	r0, r1
1a002784:	f000 0001 	and.w	r0, r0, #1
1a002788:	b2c0      	uxtb	r0, r0
1a00278a:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a00278c:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00278e:	0c1b      	lsrs	r3, r3, #16
1a002790:	bf14      	ite	ne
1a002792:	2001      	movne	r0, #1
1a002794:	2000      	moveq	r0, #0
1a002796:	4770      	bx	lr

1a002798 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002798:	2a01      	cmp	r2, #1
1a00279a:	d007      	beq.n	1a0027ac <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a00279c:	68c3      	ldr	r3, [r0, #12]
1a00279e:	2201      	movs	r2, #1
1a0027a0:	fa02 f101 	lsl.w	r1, r2, r1
1a0027a4:	ea23 0101 	bic.w	r1, r3, r1
1a0027a8:	60c1      	str	r1, [r0, #12]
	}
}
1a0027aa:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a0027ac:	68c3      	ldr	r3, [r0, #12]
1a0027ae:	fa02 f101 	lsl.w	r1, r2, r1
1a0027b2:	4319      	orrs	r1, r3
1a0027b4:	60c1      	str	r1, [r0, #12]
1a0027b6:	4770      	bx	lr

1a0027b8 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a0027b8:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0027ba:	2901      	cmp	r1, #1
1a0027bc:	d904      	bls.n	1a0027c8 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a0027be:	b932      	cbnz	r2, 1a0027ce <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a0027c0:	6803      	ldr	r3, [r0, #0]
1a0027c2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a0027c6:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a0027c8:	f7ff ff89 	bl	1a0026de <setStartMode>
}
1a0027cc:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a0027ce:	6803      	ldr	r3, [r0, #0]
1a0027d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a0027d4:	6003      	str	r3, [r0, #0]
1a0027d6:	e7f7      	b.n	1a0027c8 <Chip_ADC_SetStartMode+0x10>

1a0027d8 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0027d8:	b570      	push	{r4, r5, r6, lr}
1a0027da:	4605      	mov	r5, r0
1a0027dc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0027de:	6804      	ldr	r4, [r0, #0]
1a0027e0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0027e4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0027e8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0027ea:	790b      	ldrb	r3, [r1, #4]
1a0027ec:	f1c3 030b 	rsb	r3, r3, #11
1a0027f0:	b2db      	uxtb	r3, r3
1a0027f2:	7949      	ldrb	r1, [r1, #5]
1a0027f4:	f7ff ff5a 	bl	1a0026ac <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0027f8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0027fc:	7930      	ldrb	r0, [r6, #4]
1a0027fe:	0440      	lsls	r0, r0, #17
1a002800:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002804:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002806:	6028      	str	r0, [r5, #0]
}
1a002808:	bd70      	pop	{r4, r5, r6, pc}

1a00280a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00280a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00280c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00280e:	680a      	ldr	r2, [r1, #0]
1a002810:	f7ff ffe2 	bl	1a0027d8 <Chip_ADC_SetSampleRate>
}
1a002814:	bd08      	pop	{r3, pc}

1a002816 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002816:	2a01      	cmp	r2, #1
1a002818:	d00b      	beq.n	1a002832 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a00281a:	6803      	ldr	r3, [r0, #0]
1a00281c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a002820:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a002822:	6803      	ldr	r3, [r0, #0]
1a002824:	2201      	movs	r2, #1
1a002826:	fa02 f101 	lsl.w	r1, r2, r1
1a00282a:	ea23 0101 	bic.w	r1, r3, r1
1a00282e:	6001      	str	r1, [r0, #0]
	}
}
1a002830:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a002832:	6803      	ldr	r3, [r0, #0]
1a002834:	fa02 f101 	lsl.w	r1, r2, r1
1a002838:	4319      	orrs	r1, r3
1a00283a:	6001      	str	r1, [r0, #0]
1a00283c:	4770      	bx	lr

1a00283e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00283e:	b538      	push	{r3, r4, r5, lr}
1a002840:	4604      	mov	r4, r0
1a002842:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a002844:	2100      	movs	r1, #0
1a002846:	f7ff ff4a 	bl	1a0026de <setStartMode>
	
    if (NewState == DISABLE) {
1a00284a:	b125      	cbz	r5, 1a002856 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a00284c:	6823      	ldr	r3, [r4, #0]
1a00284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a002852:	6023      	str	r3, [r4, #0]
	}
}
1a002854:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a002856:	6823      	ldr	r3, [r4, #0]
1a002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00285c:	6023      	str	r3, [r4, #0]
1a00285e:	e7f9      	b.n	1a002854 <Chip_ADC_SetBurstCmd+0x16>

1a002860 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002860:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002862:	680b      	ldr	r3, [r1, #0]
1a002864:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002868:	d002      	beq.n	1a002870 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00286a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00286e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002870:	4607      	mov	r7, r0
1a002872:	2501      	movs	r5, #1
1a002874:	e03b      	b.n	1a0028ee <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002876:	694b      	ldr	r3, [r1, #20]
1a002878:	fb03 f302 	mul.w	r3, r3, r2
1a00287c:	fbb3 f3f5 	udiv	r3, r3, r5
1a002880:	e014      	b.n	1a0028ac <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002882:	461c      	mov	r4, r3
1a002884:	e020      	b.n	1a0028c8 <pll_calc_divs+0x68>
		return -val;
1a002886:	f1cc 0c00 	rsb	ip, ip, #0
1a00288a:	e020      	b.n	1a0028ce <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00288c:	3201      	adds	r2, #1
1a00288e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002892:	dc26      	bgt.n	1a0028e2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002894:	680c      	ldr	r4, [r1, #0]
1a002896:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00289a:	d0ec      	beq.n	1a002876 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00289c:	1c73      	adds	r3, r6, #1
1a00289e:	fa02 fc03 	lsl.w	ip, r2, r3
1a0028a2:	694b      	ldr	r3, [r1, #20]
1a0028a4:	fb03 f30c 	mul.w	r3, r3, ip
1a0028a8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0028ac:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0028fc <pll_calc_divs+0x9c>
1a0028b0:	4563      	cmp	r3, ip
1a0028b2:	d9eb      	bls.n	1a00288c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0028b4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002900 <pll_calc_divs+0xa0>
1a0028b8:	4563      	cmp	r3, ip
1a0028ba:	d812      	bhi.n	1a0028e2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0028bc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0028c0:	d1df      	bne.n	1a002882 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0028c2:	1c74      	adds	r4, r6, #1
1a0028c4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0028c8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0028cc:	d4db      	bmi.n	1a002886 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0028ce:	4567      	cmp	r7, ip
1a0028d0:	d9dc      	bls.n	1a00288c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0028d2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0028d4:	1c77      	adds	r7, r6, #1
1a0028d6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0028d8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0028da:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0028dc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0028de:	4667      	mov	r7, ip
1a0028e0:	e7d4      	b.n	1a00288c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0028e2:	3601      	adds	r6, #1
1a0028e4:	2e03      	cmp	r6, #3
1a0028e6:	dc01      	bgt.n	1a0028ec <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0028e8:	2201      	movs	r2, #1
1a0028ea:	e7d0      	b.n	1a00288e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0028ec:	3501      	adds	r5, #1
1a0028ee:	2d04      	cmp	r5, #4
1a0028f0:	dc01      	bgt.n	1a0028f6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0028f2:	2600      	movs	r6, #0
1a0028f4:	e7f6      	b.n	1a0028e4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0028f6:	bcf0      	pop	{r4, r5, r6, r7}
1a0028f8:	4770      	bx	lr
1a0028fa:	bf00      	nop
1a0028fc:	094c5eff 	.word	0x094c5eff
1a002900:	1312d000 	.word	0x1312d000

1a002904 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002904:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002906:	b099      	sub	sp, #100	; 0x64
1a002908:	4605      	mov	r5, r0
1a00290a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00290c:	225c      	movs	r2, #92	; 0x5c
1a00290e:	2100      	movs	r1, #0
1a002910:	a801      	add	r0, sp, #4
1a002912:	f001 f9fc 	bl	1a003d0e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002916:	2380      	movs	r3, #128	; 0x80
1a002918:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00291a:	6963      	ldr	r3, [r4, #20]
1a00291c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00291e:	7923      	ldrb	r3, [r4, #4]
1a002920:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002924:	4669      	mov	r1, sp
1a002926:	4628      	mov	r0, r5
1a002928:	f7ff ff9a 	bl	1a002860 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00292c:	9b06      	ldr	r3, [sp, #24]
1a00292e:	42ab      	cmp	r3, r5
1a002930:	d027      	beq.n	1a002982 <pll_get_frac+0x7e>
	if (val < 0)
1a002932:	1aeb      	subs	r3, r5, r3
1a002934:	d42e      	bmi.n	1a002994 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002936:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002938:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00293a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00293e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002940:	6963      	ldr	r3, [r4, #20]
1a002942:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002944:	7923      	ldrb	r3, [r4, #4]
1a002946:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00294a:	a910      	add	r1, sp, #64	; 0x40
1a00294c:	4628      	mov	r0, r5
1a00294e:	f7ff ff87 	bl	1a002860 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002952:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002954:	42ab      	cmp	r3, r5
1a002956:	d01f      	beq.n	1a002998 <pll_get_frac+0x94>
	if (val < 0)
1a002958:	1aeb      	subs	r3, r5, r3
1a00295a:	d425      	bmi.n	1a0029a8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00295c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00295e:	4b2b      	ldr	r3, [pc, #172]	; (1a002a0c <pll_get_frac+0x108>)
1a002960:	429d      	cmp	r5, r3
1a002962:	d923      	bls.n	1a0029ac <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002966:	1aed      	subs	r5, r5, r3
1a002968:	d433      	bmi.n	1a0029d2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00296a:	42ae      	cmp	r6, r5
1a00296c:	dc3b      	bgt.n	1a0029e6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00296e:	42be      	cmp	r6, r7
1a002970:	dc31      	bgt.n	1a0029d6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002972:	466d      	mov	r5, sp
1a002974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002978:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00297c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002980:	e006      	b.n	1a002990 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002982:	466d      	mov	r5, sp
1a002984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002988:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00298c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002990:	b019      	add	sp, #100	; 0x64
1a002992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002994:	425b      	negs	r3, r3
1a002996:	e7ce      	b.n	1a002936 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002998:	ad10      	add	r5, sp, #64	; 0x40
1a00299a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00299c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00299e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0029a6:	e7f3      	b.n	1a002990 <pll_get_frac+0x8c>
		return -val;
1a0029a8:	425b      	negs	r3, r3
1a0029aa:	e7d7      	b.n	1a00295c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0029ac:	2340      	movs	r3, #64	; 0x40
1a0029ae:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0029b0:	6963      	ldr	r3, [r4, #20]
1a0029b2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0029b4:	a908      	add	r1, sp, #32
1a0029b6:	4628      	mov	r0, r5
1a0029b8:	f7ff ff52 	bl	1a002860 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0029bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0029be:	42ab      	cmp	r3, r5
1a0029c0:	d1d0      	bne.n	1a002964 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0029c2:	ad08      	add	r5, sp, #32
1a0029c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0029d0:	e7de      	b.n	1a002990 <pll_get_frac+0x8c>
		return -val;
1a0029d2:	426d      	negs	r5, r5
1a0029d4:	e7c9      	b.n	1a00296a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0029d6:	ad10      	add	r5, sp, #64	; 0x40
1a0029d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029e4:	e7d4      	b.n	1a002990 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0029e6:	42af      	cmp	r7, r5
1a0029e8:	db07      	blt.n	1a0029fa <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0029ea:	ad08      	add	r5, sp, #32
1a0029ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029f8:	e7ca      	b.n	1a002990 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0029fa:	ad10      	add	r5, sp, #64	; 0x40
1a0029fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a08:	e7c2      	b.n	1a002990 <pll_get_frac+0x8c>
1a002a0a:	bf00      	nop
1a002a0c:	068e7780 	.word	0x068e7780

1a002a10 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002a10:	b430      	push	{r4, r5}
1a002a12:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002a14:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002a16:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002a18:	e000      	b.n	1a002a1c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002a1a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002a1c:	281c      	cmp	r0, #28
1a002a1e:	d118      	bne.n	1a002a52 <Chip_Clock_FindBaseClock+0x42>
1a002a20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a24:	0051      	lsls	r1, r2, #1
1a002a26:	4a0c      	ldr	r2, [pc, #48]	; (1a002a58 <Chip_Clock_FindBaseClock+0x48>)
1a002a28:	440a      	add	r2, r1
1a002a2a:	7914      	ldrb	r4, [r2, #4]
1a002a2c:	4284      	cmp	r4, r0
1a002a2e:	d010      	beq.n	1a002a52 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002a30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002a34:	004a      	lsls	r2, r1, #1
1a002a36:	4908      	ldr	r1, [pc, #32]	; (1a002a58 <Chip_Clock_FindBaseClock+0x48>)
1a002a38:	5a8a      	ldrh	r2, [r1, r2]
1a002a3a:	42aa      	cmp	r2, r5
1a002a3c:	d8ed      	bhi.n	1a002a1a <Chip_Clock_FindBaseClock+0xa>
1a002a3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a42:	0051      	lsls	r1, r2, #1
1a002a44:	4a04      	ldr	r2, [pc, #16]	; (1a002a58 <Chip_Clock_FindBaseClock+0x48>)
1a002a46:	440a      	add	r2, r1
1a002a48:	8852      	ldrh	r2, [r2, #2]
1a002a4a:	42aa      	cmp	r2, r5
1a002a4c:	d3e5      	bcc.n	1a002a1a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002a4e:	4620      	mov	r0, r4
1a002a50:	e7e4      	b.n	1a002a1c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002a52:	bc30      	pop	{r4, r5}
1a002a54:	4770      	bx	lr
1a002a56:	bf00      	nop
1a002a58:	1a004d80 	.word	0x1a004d80

1a002a5c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002a5c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002a62:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002a64:	4a0d      	ldr	r2, [pc, #52]	; (1a002a9c <Chip_Clock_EnableCrystal+0x40>)
1a002a66:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002a68:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002a6c:	6992      	ldr	r2, [r2, #24]
1a002a6e:	428a      	cmp	r2, r1
1a002a70:	d001      	beq.n	1a002a76 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a72:	4a0a      	ldr	r2, [pc, #40]	; (1a002a9c <Chip_Clock_EnableCrystal+0x40>)
1a002a74:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002a76:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002a7a:	4a09      	ldr	r2, [pc, #36]	; (1a002aa0 <Chip_Clock_EnableCrystal+0x44>)
1a002a7c:	6811      	ldr	r1, [r2, #0]
1a002a7e:	4a09      	ldr	r2, [pc, #36]	; (1a002aa4 <Chip_Clock_EnableCrystal+0x48>)
1a002a80:	4291      	cmp	r1, r2
1a002a82:	d901      	bls.n	1a002a88 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002a84:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a88:	4a04      	ldr	r2, [pc, #16]	; (1a002a9c <Chip_Clock_EnableCrystal+0x40>)
1a002a8a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002a8c:	9b01      	ldr	r3, [sp, #4]
1a002a8e:	1e5a      	subs	r2, r3, #1
1a002a90:	9201      	str	r2, [sp, #4]
1a002a92:	2b00      	cmp	r3, #0
1a002a94:	d1fa      	bne.n	1a002a8c <Chip_Clock_EnableCrystal+0x30>
}
1a002a96:	b002      	add	sp, #8
1a002a98:	4770      	bx	lr
1a002a9a:	bf00      	nop
1a002a9c:	40050000 	.word	0x40050000
1a002aa0:	1a004ce8 	.word	0x1a004ce8
1a002aa4:	01312cff 	.word	0x01312cff

1a002aa8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002aa8:	3012      	adds	r0, #18
1a002aaa:	4b05      	ldr	r3, [pc, #20]	; (1a002ac0 <Chip_Clock_GetDividerSource+0x18>)
1a002aac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002ab0:	f010 0f01 	tst.w	r0, #1
1a002ab4:	d102      	bne.n	1a002abc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ab6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002aba:	4770      	bx	lr
		return CLKINPUT_PD;
1a002abc:	2011      	movs	r0, #17
}
1a002abe:	4770      	bx	lr
1a002ac0:	40050000 	.word	0x40050000

1a002ac4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002ac4:	f100 0212 	add.w	r2, r0, #18
1a002ac8:	4b03      	ldr	r3, [pc, #12]	; (1a002ad8 <Chip_Clock_GetDividerDivisor+0x14>)
1a002aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002ace:	4b03      	ldr	r3, [pc, #12]	; (1a002adc <Chip_Clock_GetDividerDivisor+0x18>)
1a002ad0:	5c18      	ldrb	r0, [r3, r0]
}
1a002ad2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002ad6:	4770      	bx	lr
1a002ad8:	40050000 	.word	0x40050000
1a002adc:	1a004d78 	.word	0x1a004d78

1a002ae0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002ae0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002ae2:	2810      	cmp	r0, #16
1a002ae4:	d80a      	bhi.n	1a002afc <Chip_Clock_GetClockInputHz+0x1c>
1a002ae6:	e8df f000 	tbb	[pc, r0]
1a002aea:	0b42      	.short	0x0b42
1a002aec:	091f160d 	.word	0x091f160d
1a002af0:	2b282522 	.word	0x2b282522
1a002af4:	322e0909 	.word	0x322e0909
1a002af8:	3a36      	.short	0x3a36
1a002afa:	3e          	.byte	0x3e
1a002afb:	00          	.byte	0x00
	uint32_t rate = 0;
1a002afc:	2000      	movs	r0, #0
1a002afe:	e038      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002b00:	481e      	ldr	r0, [pc, #120]	; (1a002b7c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002b02:	e036      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002b04:	4b1e      	ldr	r3, [pc, #120]	; (1a002b80 <Chip_Clock_GetClockInputHz+0xa0>)
1a002b06:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b0a:	f003 0307 	and.w	r3, r3, #7
1a002b0e:	2b04      	cmp	r3, #4
1a002b10:	d130      	bne.n	1a002b74 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002b12:	2000      	movs	r0, #0
1a002b14:	e02d      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002b16:	4b1a      	ldr	r3, [pc, #104]	; (1a002b80 <Chip_Clock_GetClockInputHz+0xa0>)
1a002b18:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b1c:	f003 0307 	and.w	r3, r3, #7
1a002b20:	2b04      	cmp	r3, #4
1a002b22:	d029      	beq.n	1a002b78 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002b24:	4817      	ldr	r0, [pc, #92]	; (1a002b84 <Chip_Clock_GetClockInputHz+0xa4>)
1a002b26:	e024      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002b28:	4b17      	ldr	r3, [pc, #92]	; (1a002b88 <Chip_Clock_GetClockInputHz+0xa8>)
1a002b2a:	6818      	ldr	r0, [r3, #0]
		break;
1a002b2c:	e021      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002b2e:	4b17      	ldr	r3, [pc, #92]	; (1a002b8c <Chip_Clock_GetClockInputHz+0xac>)
1a002b30:	6818      	ldr	r0, [r3, #0]
		break;
1a002b32:	e01e      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002b34:	4b16      	ldr	r3, [pc, #88]	; (1a002b90 <Chip_Clock_GetClockInputHz+0xb0>)
1a002b36:	6818      	ldr	r0, [r3, #0]
		break;
1a002b38:	e01b      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002b3a:	4b15      	ldr	r3, [pc, #84]	; (1a002b90 <Chip_Clock_GetClockInputHz+0xb0>)
1a002b3c:	6858      	ldr	r0, [r3, #4]
		break;
1a002b3e:	e018      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002b40:	f000 f86a 	bl	1a002c18 <Chip_Clock_GetMainPLLHz>
		break;
1a002b44:	e015      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002b46:	2100      	movs	r1, #0
1a002b48:	f000 f89c 	bl	1a002c84 <Chip_Clock_GetDivRate>
		break;
1a002b4c:	e011      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002b4e:	2101      	movs	r1, #1
1a002b50:	f000 f898 	bl	1a002c84 <Chip_Clock_GetDivRate>
		break;
1a002b54:	e00d      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002b56:	2102      	movs	r1, #2
1a002b58:	f000 f894 	bl	1a002c84 <Chip_Clock_GetDivRate>
		break;
1a002b5c:	e009      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002b5e:	2103      	movs	r1, #3
1a002b60:	f000 f890 	bl	1a002c84 <Chip_Clock_GetDivRate>
		break;
1a002b64:	e005      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002b66:	2104      	movs	r1, #4
1a002b68:	f000 f88c 	bl	1a002c84 <Chip_Clock_GetDivRate>
		break;
1a002b6c:	e001      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002b6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002b72:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002b74:	4803      	ldr	r0, [pc, #12]	; (1a002b84 <Chip_Clock_GetClockInputHz+0xa4>)
1a002b76:	e7fc      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002b78:	4806      	ldr	r0, [pc, #24]	; (1a002b94 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002b7a:	e7fa      	b.n	1a002b72 <Chip_Clock_GetClockInputHz+0x92>
1a002b7c:	00b71b00 	.word	0x00b71b00
1a002b80:	40043000 	.word	0x40043000
1a002b84:	017d7840 	.word	0x017d7840
1a002b88:	1a004cbc 	.word	0x1a004cbc
1a002b8c:	1a004ce8 	.word	0x1a004ce8
1a002b90:	10002bc4 	.word	0x10002bc4
1a002b94:	02faf080 	.word	0x02faf080

1a002b98 <Chip_Clock_CalcMainPLLValue>:
{
1a002b98:	b538      	push	{r3, r4, r5, lr}
1a002b9a:	4605      	mov	r5, r0
1a002b9c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002b9e:	7908      	ldrb	r0, [r1, #4]
1a002ba0:	f7ff ff9e 	bl	1a002ae0 <Chip_Clock_GetClockInputHz>
1a002ba4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002ba6:	4b19      	ldr	r3, [pc, #100]	; (1a002c0c <Chip_Clock_CalcMainPLLValue+0x74>)
1a002ba8:	442b      	add	r3, r5
1a002baa:	4a19      	ldr	r2, [pc, #100]	; (1a002c10 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002bac:	4293      	cmp	r3, r2
1a002bae:	d821      	bhi.n	1a002bf4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002bb0:	b318      	cbz	r0, 1a002bfa <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002bb2:	2380      	movs	r3, #128	; 0x80
1a002bb4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002bb6:	2300      	movs	r3, #0
1a002bb8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002bba:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002bbc:	fbb5 f3f0 	udiv	r3, r5, r0
1a002bc0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002bc2:	4a14      	ldr	r2, [pc, #80]	; (1a002c14 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002bc4:	4295      	cmp	r5, r2
1a002bc6:	d903      	bls.n	1a002bd0 <Chip_Clock_CalcMainPLLValue+0x38>
1a002bc8:	fb03 f000 	mul.w	r0, r3, r0
1a002bcc:	42a8      	cmp	r0, r5
1a002bce:	d007      	beq.n	1a002be0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002bd0:	4621      	mov	r1, r4
1a002bd2:	4628      	mov	r0, r5
1a002bd4:	f7ff fe96 	bl	1a002904 <pll_get_frac>
		if (!ppll->nsel) {
1a002bd8:	68a3      	ldr	r3, [r4, #8]
1a002bda:	b18b      	cbz	r3, 1a002c00 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002bdc:	3b01      	subs	r3, #1
1a002bde:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002be0:	6923      	ldr	r3, [r4, #16]
1a002be2:	b183      	cbz	r3, 1a002c06 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002be4:	68e2      	ldr	r2, [r4, #12]
1a002be6:	b10a      	cbz	r2, 1a002bec <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002be8:	3a01      	subs	r2, #1
1a002bea:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002bec:	3b01      	subs	r3, #1
1a002bee:	6123      	str	r3, [r4, #16]
	return 0;
1a002bf0:	2000      	movs	r0, #0
}
1a002bf2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002bf8:	e7fb      	b.n	1a002bf2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002bfe:	e7f8      	b.n	1a002bf2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c04:	e7f5      	b.n	1a002bf2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c0a:	e7f2      	b.n	1a002bf2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002c0c:	ff6b3a10 	.word	0xff6b3a10
1a002c10:	0b940510 	.word	0x0b940510
1a002c14:	094c5eff 	.word	0x094c5eff

1a002c18 <Chip_Clock_GetMainPLLHz>:
{
1a002c18:	b530      	push	{r4, r5, lr}
1a002c1a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002c1c:	4d17      	ldr	r5, [pc, #92]	; (1a002c7c <Chip_Clock_GetMainPLLHz+0x64>)
1a002c1e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002c20:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002c24:	f7ff ff5c 	bl	1a002ae0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002c28:	4b15      	ldr	r3, [pc, #84]	; (1a002c80 <Chip_Clock_GetMainPLLHz+0x68>)
1a002c2a:	681b      	ldr	r3, [r3, #0]
1a002c2c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002c2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002c30:	f013 0f01 	tst.w	r3, #1
1a002c34:	d01f      	beq.n	1a002c76 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002c36:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002c3a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002c3e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002c42:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002c46:	3301      	adds	r3, #1
	n = nsel + 1;
1a002c48:	3201      	adds	r2, #1
	p = ptab[psel];
1a002c4a:	f10d 0c08 	add.w	ip, sp, #8
1a002c4e:	4461      	add	r1, ip
1a002c50:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002c54:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002c58:	d108      	bne.n	1a002c6c <Chip_Clock_GetMainPLLHz+0x54>
1a002c5a:	b93d      	cbnz	r5, 1a002c6c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002c5c:	0049      	lsls	r1, r1, #1
1a002c5e:	fbb3 f3f1 	udiv	r3, r3, r1
1a002c62:	fbb0 f0f2 	udiv	r0, r0, r2
1a002c66:	fb00 f003 	mul.w	r0, r0, r3
1a002c6a:	e005      	b.n	1a002c78 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002c6c:	fbb0 f0f2 	udiv	r0, r0, r2
1a002c70:	fb03 f000 	mul.w	r0, r3, r0
1a002c74:	e000      	b.n	1a002c78 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002c76:	2000      	movs	r0, #0
}
1a002c78:	b003      	add	sp, #12
1a002c7a:	bd30      	pop	{r4, r5, pc}
1a002c7c:	40050000 	.word	0x40050000
1a002c80:	1a004d74 	.word	0x1a004d74

1a002c84 <Chip_Clock_GetDivRate>:
{
1a002c84:	b538      	push	{r3, r4, r5, lr}
1a002c86:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002c88:	4608      	mov	r0, r1
1a002c8a:	f7ff ff0d 	bl	1a002aa8 <Chip_Clock_GetDividerSource>
1a002c8e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002c90:	4620      	mov	r0, r4
1a002c92:	f7ff ff17 	bl	1a002ac4 <Chip_Clock_GetDividerDivisor>
1a002c96:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002c98:	4628      	mov	r0, r5
1a002c9a:	f7ff ff21 	bl	1a002ae0 <Chip_Clock_GetClockInputHz>
1a002c9e:	3401      	adds	r4, #1
}
1a002ca0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002ca4:	bd38      	pop	{r3, r4, r5, pc}
1a002ca6:	Address 0x000000001a002ca6 is out of bounds.


1a002ca8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002ca8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002caa:	f100 0416 	add.w	r4, r0, #22
1a002cae:	00a4      	lsls	r4, r4, #2
1a002cb0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002cb4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002cb8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002cba:	281b      	cmp	r0, #27
1a002cbc:	d813      	bhi.n	1a002ce6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002cbe:	2911      	cmp	r1, #17
1a002cc0:	d01a      	beq.n	1a002cf8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002cc2:	4d0e      	ldr	r5, [pc, #56]	; (1a002cfc <Chip_Clock_SetBaseClock+0x54>)
1a002cc4:	4025      	ands	r5, r4

			if (autoblocken) {
1a002cc6:	b10a      	cbz	r2, 1a002ccc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002cc8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002ccc:	b10b      	cbz	r3, 1a002cd2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002cce:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002cd2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002cd6:	3016      	adds	r0, #22
1a002cd8:	0080      	lsls	r0, r0, #2
1a002cda:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002cde:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002ce2:	6045      	str	r5, [r0, #4]
1a002ce4:	e008      	b.n	1a002cf8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002ce6:	f044 0401 	orr.w	r4, r4, #1
1a002cea:	3016      	adds	r0, #22
1a002cec:	0080      	lsls	r0, r0, #2
1a002cee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002cf2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002cf6:	6044      	str	r4, [r0, #4]
	}
}
1a002cf8:	bc30      	pop	{r4, r5}
1a002cfa:	4770      	bx	lr
1a002cfc:	e0fff7fe 	.word	0xe0fff7fe

1a002d00 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002d00:	281b      	cmp	r0, #27
1a002d02:	d80c      	bhi.n	1a002d1e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002d04:	3016      	adds	r0, #22
1a002d06:	0080      	lsls	r0, r0, #2
1a002d08:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002d0c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002d10:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002d12:	f010 0f01 	tst.w	r0, #1
1a002d16:	d104      	bne.n	1a002d22 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d18:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d1c:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d1e:	2011      	movs	r0, #17
1a002d20:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d22:	2011      	movs	r0, #17
}
1a002d24:	4770      	bx	lr

1a002d26 <Chip_Clock_GetBaseClocktHz>:
{
1a002d26:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002d28:	f7ff ffea 	bl	1a002d00 <Chip_Clock_GetBaseClock>
1a002d2c:	f7ff fed8 	bl	1a002ae0 <Chip_Clock_GetClockInputHz>
}
1a002d30:	bd08      	pop	{r3, pc}
1a002d32:	Address 0x000000001a002d32 is out of bounds.


1a002d34 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002d34:	b969      	cbnz	r1, 1a002d52 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002d36:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002d38:	b10a      	cbz	r2, 1a002d3e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002d3a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002d3e:	2b02      	cmp	r3, #2
1a002d40:	d009      	beq.n	1a002d56 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002d42:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d46:	d209      	bcs.n	1a002d5c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002d48:	3020      	adds	r0, #32
1a002d4a:	4b07      	ldr	r3, [pc, #28]	; (1a002d68 <Chip_Clock_EnableOpts+0x34>)
1a002d4c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002d50:	4770      	bx	lr
		reg |= (1 << 1);
1a002d52:	2103      	movs	r1, #3
1a002d54:	e7f0      	b.n	1a002d38 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002d56:	f041 0120 	orr.w	r1, r1, #32
1a002d5a:	e7f2      	b.n	1a002d42 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002d5c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d60:	4b02      	ldr	r3, [pc, #8]	; (1a002d6c <Chip_Clock_EnableOpts+0x38>)
1a002d62:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002d66:	4770      	bx	lr
1a002d68:	40051000 	.word	0x40051000
1a002d6c:	40052000 	.word	0x40052000

1a002d70 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002d70:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d74:	d208      	bcs.n	1a002d88 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002d76:	4a09      	ldr	r2, [pc, #36]	; (1a002d9c <Chip_Clock_Enable+0x2c>)
1a002d78:	3020      	adds	r0, #32
1a002d7a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d7e:	f043 0301 	orr.w	r3, r3, #1
1a002d82:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002d86:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002d88:	4a05      	ldr	r2, [pc, #20]	; (1a002da0 <Chip_Clock_Enable+0x30>)
1a002d8a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d8e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d92:	f043 0301 	orr.w	r3, r3, #1
1a002d96:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002d9a:	4770      	bx	lr
1a002d9c:	40051000 	.word	0x40051000
1a002da0:	40052000 	.word	0x40052000

1a002da4 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a002da4:	4b04      	ldr	r3, [pc, #16]	; (1a002db8 <Chip_Clock_RTCEnable+0x14>)
1a002da6:	685a      	ldr	r2, [r3, #4]
1a002da8:	f022 020c 	bic.w	r2, r2, #12
1a002dac:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a002dae:	685a      	ldr	r2, [r3, #4]
1a002db0:	f042 0203 	orr.w	r2, r2, #3
1a002db4:	605a      	str	r2, [r3, #4]
}
1a002db6:	4770      	bx	lr
1a002db8:	40043000 	.word	0x40043000

1a002dbc <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a002dbc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002dc0:	d208      	bcs.n	1a002dd4 <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a002dc2:	4a09      	ldr	r2, [pc, #36]	; (1a002de8 <Chip_Clock_Disable+0x2c>)
1a002dc4:	3020      	adds	r0, #32
1a002dc6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002dca:	f023 0301 	bic.w	r3, r3, #1
1a002dce:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002dd2:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a002dd4:	4a05      	ldr	r2, [pc, #20]	; (1a002dec <Chip_Clock_Disable+0x30>)
1a002dd6:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002dda:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002dde:	f023 0301 	bic.w	r3, r3, #1
1a002de2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002de6:	4770      	bx	lr
1a002de8:	40051000 	.word	0x40051000
1a002dec:	40052000 	.word	0x40052000

1a002df0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002df0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002df2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002df6:	d309      	bcc.n	1a002e0c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002df8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002dfc:	4a0d      	ldr	r2, [pc, #52]	; (1a002e34 <Chip_Clock_GetRate+0x44>)
1a002dfe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002e02:	f014 0f01 	tst.w	r4, #1
1a002e06:	d107      	bne.n	1a002e18 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002e08:	2000      	movs	r0, #0
	}

	return rate;
}
1a002e0a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002e0c:	f100 0320 	add.w	r3, r0, #32
1a002e10:	4a09      	ldr	r2, [pc, #36]	; (1a002e38 <Chip_Clock_GetRate+0x48>)
1a002e12:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002e16:	e7f4      	b.n	1a002e02 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002e18:	f7ff fdfa 	bl	1a002a10 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002e1c:	f7ff ff83 	bl	1a002d26 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002e20:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002e24:	d103      	bne.n	1a002e2e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002e26:	2301      	movs	r3, #1
		rate = rate / div;
1a002e28:	fbb0 f0f3 	udiv	r0, r0, r3
1a002e2c:	e7ed      	b.n	1a002e0a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002e2e:	2302      	movs	r3, #2
1a002e30:	e7fa      	b.n	1a002e28 <Chip_Clock_GetRate+0x38>
1a002e32:	bf00      	nop
1a002e34:	40052000 	.word	0x40052000
1a002e38:	40051000 	.word	0x40051000

1a002e3c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002e3c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002e3e:	2069      	movs	r0, #105	; 0x69
1a002e40:	f7ff ffd6 	bl	1a002df0 <Chip_Clock_GetRate>
1a002e44:	4b01      	ldr	r3, [pc, #4]	; (1a002e4c <SystemCoreClockUpdate+0x10>)
1a002e46:	6018      	str	r0, [r3, #0]
}
1a002e48:	bd08      	pop	{r3, pc}
1a002e4a:	bf00      	nop
1a002e4c:	10002c6c 	.word	0x10002c6c

1a002e50 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002e50:	b570      	push	{r4, r5, r6, lr}
1a002e52:	b08a      	sub	sp, #40	; 0x28
1a002e54:	4605      	mov	r5, r0
1a002e56:	460e      	mov	r6, r1
1a002e58:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002e5a:	f242 7310 	movw	r3, #10000	; 0x2710
1a002e5e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002e60:	2806      	cmp	r0, #6
1a002e62:	d018      	beq.n	1a002e96 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002e64:	2300      	movs	r3, #0
1a002e66:	2201      	movs	r2, #1
1a002e68:	4629      	mov	r1, r5
1a002e6a:	2004      	movs	r0, #4
1a002e6c:	f7ff ff1c 	bl	1a002ca8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002e70:	4a49      	ldr	r2, [pc, #292]	; (1a002f98 <Chip_SetupCoreClock+0x148>)
1a002e72:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002e74:	f043 0301 	orr.w	r3, r3, #1
1a002e78:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002e7a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002e7e:	a901      	add	r1, sp, #4
1a002e80:	4630      	mov	r0, r6
1a002e82:	f7ff fe89 	bl	1a002b98 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002e86:	4b45      	ldr	r3, [pc, #276]	; (1a002f9c <Chip_SetupCoreClock+0x14c>)
1a002e88:	429e      	cmp	r6, r3
1a002e8a:	d916      	bls.n	1a002eba <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002e8c:	9b01      	ldr	r3, [sp, #4]
1a002e8e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002e92:	d003      	beq.n	1a002e9c <Chip_SetupCoreClock+0x4c>
1a002e94:	e7fe      	b.n	1a002e94 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002e96:	f7ff fde1 	bl	1a002a5c <Chip_Clock_EnableCrystal>
1a002e9a:	e7e3      	b.n	1a002e64 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a002e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ea0:	d005      	beq.n	1a002eae <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002ea6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002ea8:	2500      	movs	r5, #0
			direct = 1;
1a002eaa:	2601      	movs	r6, #1
1a002eac:	e007      	b.n	1a002ebe <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002eae:	9b04      	ldr	r3, [sp, #16]
1a002eb0:	3301      	adds	r3, #1
1a002eb2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002eb4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002eb6:	2600      	movs	r6, #0
1a002eb8:	e001      	b.n	1a002ebe <Chip_SetupCoreClock+0x6e>
1a002eba:	2500      	movs	r5, #0
1a002ebc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002ebe:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002ec2:	9b01      	ldr	r3, [sp, #4]
1a002ec4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002ec8:	9a05      	ldr	r2, [sp, #20]
1a002eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002ece:	9a03      	ldr	r2, [sp, #12]
1a002ed0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002ed4:	9a04      	ldr	r2, [sp, #16]
1a002ed6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002ede:	4a2e      	ldr	r2, [pc, #184]	; (1a002f98 <Chip_SetupCoreClock+0x148>)
1a002ee0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002ee2:	4b2d      	ldr	r3, [pc, #180]	; (1a002f98 <Chip_SetupCoreClock+0x148>)
1a002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002ee6:	f013 0f01 	tst.w	r3, #1
1a002eea:	d0fa      	beq.n	1a002ee2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002eec:	2300      	movs	r3, #0
1a002eee:	2201      	movs	r2, #1
1a002ef0:	2109      	movs	r1, #9
1a002ef2:	2004      	movs	r0, #4
1a002ef4:	f7ff fed8 	bl	1a002ca8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002ef8:	b1fe      	cbz	r6, 1a002f3a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002efa:	f242 7310 	movw	r3, #10000	; 0x2710
1a002efe:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002f02:	1e5a      	subs	r2, r3, #1
1a002f04:	9209      	str	r2, [sp, #36]	; 0x24
1a002f06:	2b00      	cmp	r3, #0
1a002f08:	d1fa      	bne.n	1a002f00 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002f0a:	9b01      	ldr	r3, [sp, #4]
1a002f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002f10:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002f12:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002f16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002f1a:	9a05      	ldr	r2, [sp, #20]
1a002f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002f20:	9a03      	ldr	r2, [sp, #12]
1a002f22:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002f26:	9a04      	ldr	r2, [sp, #16]
1a002f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002f30:	4a19      	ldr	r2, [pc, #100]	; (1a002f98 <Chip_SetupCoreClock+0x148>)
1a002f32:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002f34:	b36c      	cbz	r4, 1a002f92 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002f36:	2400      	movs	r4, #0
1a002f38:	e029      	b.n	1a002f8e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002f3a:	2d00      	cmp	r5, #0
1a002f3c:	d0fa      	beq.n	1a002f34 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002f3e:	f242 7310 	movw	r3, #10000	; 0x2710
1a002f42:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002f46:	1e5a      	subs	r2, r3, #1
1a002f48:	9209      	str	r2, [sp, #36]	; 0x24
1a002f4a:	2b00      	cmp	r3, #0
1a002f4c:	d1fa      	bne.n	1a002f44 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a002f4e:	9b04      	ldr	r3, [sp, #16]
1a002f50:	1e5a      	subs	r2, r3, #1
1a002f52:	9204      	str	r2, [sp, #16]
1a002f54:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002f58:	9b01      	ldr	r3, [sp, #4]
1a002f5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002f5e:	9905      	ldr	r1, [sp, #20]
1a002f60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002f64:	9903      	ldr	r1, [sp, #12]
1a002f66:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002f6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002f72:	4a09      	ldr	r2, [pc, #36]	; (1a002f98 <Chip_SetupCoreClock+0x148>)
1a002f74:	6453      	str	r3, [r2, #68]	; 0x44
1a002f76:	e7dd      	b.n	1a002f34 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002f78:	4809      	ldr	r0, [pc, #36]	; (1a002fa0 <Chip_SetupCoreClock+0x150>)
1a002f7a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002f7e:	78cb      	ldrb	r3, [r1, #3]
1a002f80:	788a      	ldrb	r2, [r1, #2]
1a002f82:	7849      	ldrb	r1, [r1, #1]
1a002f84:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002f88:	f7ff fe8e 	bl	1a002ca8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002f8c:	3401      	adds	r4, #1
1a002f8e:	2c11      	cmp	r4, #17
1a002f90:	d9f2      	bls.n	1a002f78 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002f92:	b00a      	add	sp, #40	; 0x28
1a002f94:	bd70      	pop	{r4, r5, r6, pc}
1a002f96:	bf00      	nop
1a002f98:	40050000 	.word	0x40050000
1a002f9c:	068e7780 	.word	0x068e7780
1a002fa0:	1a004dec 	.word	0x1a004dec

1a002fa4 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a002fa4:	6883      	ldr	r3, [r0, #8]
1a002fa6:	f043 0302 	orr.w	r3, r3, #2
1a002faa:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a002fac:	6883      	ldr	r3, [r0, #8]
1a002fae:	f013 0f02 	tst.w	r3, #2
1a002fb2:	d0fb      	beq.n	1a002fac <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a002fb4:	6883      	ldr	r3, [r0, #8]
1a002fb6:	f003 0311 	and.w	r3, r3, #17
1a002fba:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a002fbc:	6883      	ldr	r3, [r0, #8]
1a002fbe:	f013 0f02 	tst.w	r3, #2
1a002fc2:	d1fb      	bne.n	1a002fbc <Chip_RTC_ResetClockTickCounter+0x18>
}
1a002fc4:	4770      	bx	lr

1a002fc6 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002fc6:	2901      	cmp	r1, #1
1a002fc8:	d004      	beq.n	1a002fd4 <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a002fca:	6883      	ldr	r3, [r0, #8]
1a002fcc:	f003 0312 	and.w	r3, r3, #18
1a002fd0:	6083      	str	r3, [r0, #8]
	}
}
1a002fd2:	4770      	bx	lr
		pRTC->CCR |= RTC_CCR_CLKEN;
1a002fd4:	6883      	ldr	r3, [r0, #8]
1a002fd6:	f043 0301 	orr.w	r3, r3, #1
1a002fda:	6083      	str	r3, [r0, #8]
1a002fdc:	4770      	bx	lr

1a002fde <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a002fde:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a002fe0:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a002fe2:	f015 0f01 	tst.w	r5, #1
1a002fe6:	d002      	beq.n	1a002fee <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a002fe8:	f005 0312 	and.w	r3, r5, #18
1a002fec:	6083      	str	r3, [r0, #8]
{
1a002fee:	2300      	movs	r3, #0
1a002ff0:	e007      	b.n	1a003002 <Chip_RTC_SetFullTime+0x24>
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
		pRTC->TIME[i] = pFullTime->time[i];
1a002ff2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a002ff6:	f103 0208 	add.w	r2, r3, #8
1a002ffa:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a002ffe:	3301      	adds	r3, #1
1a003000:	b2db      	uxtb	r3, r3
1a003002:	2b07      	cmp	r3, #7
1a003004:	d9f5      	bls.n	1a002ff2 <Chip_RTC_SetFullTime+0x14>
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a003006:	6085      	str	r5, [r0, #8]
}
1a003008:	bc30      	pop	{r4, r5}
1a00300a:	4770      	bx	lr

1a00300c <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a00300c:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a00300e:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a003010:	e009      	b.n	1a003026 <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a003012:	f103 0208 	add.w	r2, r3, #8
1a003016:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a00301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a00301e:	3301      	adds	r3, #1
1a003020:	b2db      	uxtb	r3, r3
1a003022:	2b07      	cmp	r3, #7
1a003024:	d9f5      	bls.n	1a003012 <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a003026:	6a03      	ldr	r3, [r0, #32]
1a003028:	42a3      	cmp	r3, r4
1a00302a:	d003      	beq.n	1a003034 <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a00302c:	6a04      	ldr	r4, [r0, #32]
1a00302e:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a003030:	2301      	movs	r3, #1
1a003032:	e7f6      	b.n	1a003022 <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a003034:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003038:	4770      	bx	lr

1a00303a <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a00303a:	2901      	cmp	r1, #1
1a00303c:	d004      	beq.n	1a003048 <Chip_RTC_CalibCounterCmd+0xe>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a00303e:	6883      	ldr	r3, [r0, #8]
1a003040:	f043 0310 	orr.w	r3, r3, #16
1a003044:	6083      	str	r3, [r0, #8]
	}
}
1a003046:	4770      	bx	lr
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a003048:	6883      	ldr	r3, [r0, #8]
1a00304a:	f003 0303 	and.w	r3, r3, #3
1a00304e:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a003050:	6883      	ldr	r3, [r0, #8]
1a003052:	f013 0f10 	tst.w	r3, #16
1a003056:	d1f7      	bne.n	1a003048 <Chip_RTC_CalibCounterCmd+0xe>
1a003058:	4770      	bx	lr
1a00305a:	Address 0x000000001a00305a is out of bounds.


1a00305c <Chip_RTC_Init>:
{
1a00305c:	b510      	push	{r4, lr}
1a00305e:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a003060:	f7ff fea0 	bl	1a002da4 <Chip_Clock_RTCEnable>
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a003064:	4b0e      	ldr	r3, [pc, #56]	; (1a0030a0 <Chip_RTC_Init+0x44>)
1a003066:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a00306a:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a00306c:	4b0c      	ldr	r3, [pc, #48]	; (1a0030a0 <Chip_RTC_Init+0x44>)
1a00306e:	681b      	ldr	r3, [r3, #0]
1a003070:	2b00      	cmp	r3, #0
1a003072:	d1fb      	bne.n	1a00306c <Chip_RTC_Init+0x10>
	Chip_RTC_Enable(pRTC, DISABLE);
1a003074:	2100      	movs	r1, #0
1a003076:	4620      	mov	r0, r4
1a003078:	f7ff ffa5 	bl	1a002fc6 <Chip_RTC_Enable>
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a00307c:	2100      	movs	r1, #0
1a00307e:	4620      	mov	r0, r4
1a003080:	f7ff ffdb 	bl	1a00303a <Chip_RTC_CalibCounterCmd>
	Chip_RTC_ResetClockTickCounter(pRTC);
1a003084:	4620      	mov	r0, r4
1a003086:	f7ff ff8d 	bl	1a002fa4 <Chip_RTC_ResetClockTickCounter>
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a00308a:	2303      	movs	r3, #3
1a00308c:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a00308e:	6823      	ldr	r3, [r4, #0]
1a003090:	2b00      	cmp	r3, #0
1a003092:	d1fc      	bne.n	1a00308e <Chip_RTC_Init+0x32>
	pRTC->CIIR = 0x00;
1a003094:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a003096:	22ff      	movs	r2, #255	; 0xff
1a003098:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a00309a:	6423      	str	r3, [r4, #64]	; 0x40
}
1a00309c:	bd10      	pop	{r4, pc}
1a00309e:	bf00      	nop
1a0030a0:	40040000 	.word	0x40040000

1a0030a4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0030a4:	4770      	bx	lr
1a0030a6:	Address 0x000000001a0030a6 is out of bounds.


1a0030a8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0030a8:	4b03      	ldr	r3, [pc, #12]	; (1a0030b8 <Chip_SSP_GetClockIndex+0x10>)
1a0030aa:	4298      	cmp	r0, r3
1a0030ac:	d001      	beq.n	1a0030b2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0030ae:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0030b0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0030b2:	20a5      	movs	r0, #165	; 0xa5
1a0030b4:	4770      	bx	lr
1a0030b6:	bf00      	nop
1a0030b8:	400c5000 	.word	0x400c5000

1a0030bc <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0030bc:	4b04      	ldr	r3, [pc, #16]	; (1a0030d0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0030be:	4298      	cmp	r0, r3
1a0030c0:	d002      	beq.n	1a0030c8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0030c2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0030c6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0030c8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0030cc:	4770      	bx	lr
1a0030ce:	bf00      	nop
1a0030d0:	400c5000 	.word	0x400c5000

1a0030d4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0030d4:	6803      	ldr	r3, [r0, #0]
1a0030d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0030da:	0209      	lsls	r1, r1, #8
1a0030dc:	b289      	uxth	r1, r1
1a0030de:	4319      	orrs	r1, r3
1a0030e0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0030e2:	6102      	str	r2, [r0, #16]
}
1a0030e4:	4770      	bx	lr

1a0030e6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0030e6:	b570      	push	{r4, r5, r6, lr}
1a0030e8:	4606      	mov	r6, r0
1a0030ea:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0030ec:	f7ff ffe6 	bl	1a0030bc <Chip_SSP_GetPeriphClockIndex>
1a0030f0:	f7ff fe7e 	bl	1a002df0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0030f4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0030fa:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0030fc:	e000      	b.n	1a003100 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0030fe:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003100:	42ab      	cmp	r3, r5
1a003102:	d90b      	bls.n	1a00311c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003104:	1c4c      	adds	r4, r1, #1
1a003106:	fb02 f304 	mul.w	r3, r2, r4
1a00310a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00310e:	429d      	cmp	r5, r3
1a003110:	d2f6      	bcs.n	1a003100 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003112:	2cff      	cmp	r4, #255	; 0xff
1a003114:	d9f3      	bls.n	1a0030fe <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003116:	3202      	adds	r2, #2
				cr0_div = 0;
1a003118:	2100      	movs	r1, #0
1a00311a:	e7f1      	b.n	1a003100 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00311c:	4630      	mov	r0, r6
1a00311e:	f7ff ffd9 	bl	1a0030d4 <Chip_SSP_SetClockRate>
}
1a003122:	bd70      	pop	{r4, r5, r6, pc}

1a003124 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003124:	b510      	push	{r4, lr}
1a003126:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003128:	f7ff ffbe 	bl	1a0030a8 <Chip_SSP_GetClockIndex>
1a00312c:	f7ff fe20 	bl	1a002d70 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003130:	4620      	mov	r0, r4
1a003132:	f7ff ffc3 	bl	1a0030bc <Chip_SSP_GetPeriphClockIndex>
1a003136:	f7ff fe1b 	bl	1a002d70 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00313a:	6863      	ldr	r3, [r4, #4]
1a00313c:	f023 0304 	bic.w	r3, r3, #4
1a003140:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003142:	6823      	ldr	r3, [r4, #0]
1a003144:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003148:	f043 0307 	orr.w	r3, r3, #7
1a00314c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00314e:	4902      	ldr	r1, [pc, #8]	; (1a003158 <Chip_SSP_Init+0x34>)
1a003150:	4620      	mov	r0, r4
1a003152:	f7ff ffc8 	bl	1a0030e6 <Chip_SSP_SetBitRate>
}
1a003156:	bd10      	pop	{r4, pc}
1a003158:	000186a0 	.word	0x000186a0

1a00315c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00315c:	2901      	cmp	r1, #1
1a00315e:	d000      	beq.n	1a003162 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003160:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003162:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003166:	0082      	lsls	r2, r0, #2
1a003168:	4b03      	ldr	r3, [pc, #12]	; (1a003178 <Chip_I2C_EventHandler+0x1c>)
1a00316a:	4413      	add	r3, r2
1a00316c:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a00316e:	7d13      	ldrb	r3, [r2, #20]
1a003170:	b2db      	uxtb	r3, r3
1a003172:	2b04      	cmp	r3, #4
1a003174:	d0fb      	beq.n	1a00316e <Chip_I2C_EventHandler+0x12>
1a003176:	e7f3      	b.n	1a003160 <Chip_I2C_EventHandler+0x4>
1a003178:	1000009c 	.word	0x1000009c

1a00317c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00317c:	b570      	push	{r4, r5, r6, lr}
1a00317e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003180:	4e06      	ldr	r6, [pc, #24]	; (1a00319c <Chip_I2C_Init+0x20>)
1a003182:	00c4      	lsls	r4, r0, #3
1a003184:	1a22      	subs	r2, r4, r0
1a003186:	0093      	lsls	r3, r2, #2
1a003188:	4433      	add	r3, r6
1a00318a:	8898      	ldrh	r0, [r3, #4]
1a00318c:	f7ff fdf0 	bl	1a002d70 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003190:	1b64      	subs	r4, r4, r5
1a003192:	00a3      	lsls	r3, r4, #2
1a003194:	58f3      	ldr	r3, [r6, r3]
1a003196:	226c      	movs	r2, #108	; 0x6c
1a003198:	619a      	str	r2, [r3, #24]
}
1a00319a:	bd70      	pop	{r4, r5, r6, pc}
1a00319c:	1000009c 	.word	0x1000009c

1a0031a0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0031a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0031a4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0031a6:	4e0b      	ldr	r6, [pc, #44]	; (1a0031d4 <Chip_I2C_SetClockRate+0x34>)
1a0031a8:	00c5      	lsls	r5, r0, #3
1a0031aa:	1a2b      	subs	r3, r5, r0
1a0031ac:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0031b0:	eb06 0308 	add.w	r3, r6, r8
1a0031b4:	8898      	ldrh	r0, [r3, #4]
1a0031b6:	f7ff fe1b 	bl	1a002df0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0031ba:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0031be:	f856 3008 	ldr.w	r3, [r6, r8]
1a0031c2:	0842      	lsrs	r2, r0, #1
1a0031c4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0031c6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0031ca:	691a      	ldr	r2, [r3, #16]
1a0031cc:	1a80      	subs	r0, r0, r2
1a0031ce:	6158      	str	r0, [r3, #20]
}
1a0031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0031d4:	1000009c 	.word	0x1000009c

1a0031d8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0031d8:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0031da:	4a0b      	ldr	r2, [pc, #44]	; (1a003208 <SystemInit+0x30>)
1a0031dc:	4b0b      	ldr	r3, [pc, #44]	; (1a00320c <SystemInit+0x34>)
1a0031de:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0031e0:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0031e4:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0031e6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0031ea:	2b20      	cmp	r3, #32
1a0031ec:	d004      	beq.n	1a0031f8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0031ee:	f7ff f979 	bl	1a0024e4 <Board_SystemInit>
   Board_Init();
1a0031f2:	f7ff f901 	bl	1a0023f8 <Board_Init>
}
1a0031f6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0031f8:	4a04      	ldr	r2, [pc, #16]	; (1a00320c <SystemInit+0x34>)
1a0031fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0031fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003202:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003206:	e7f2      	b.n	1a0031ee <SystemInit+0x16>
1a003208:	1a000000 	.word	0x1a000000
1a00320c:	e000ed00 	.word	0xe000ed00

1a003210 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003210:	4b04      	ldr	r3, [pc, #16]	; (1a003224 <cyclesCounterInit+0x14>)
1a003212:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003214:	4a04      	ldr	r2, [pc, #16]	; (1a003228 <cyclesCounterInit+0x18>)
1a003216:	6813      	ldr	r3, [r2, #0]
1a003218:	f043 0301 	orr.w	r3, r3, #1
1a00321c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00321e:	2001      	movs	r0, #1
1a003220:	4770      	bx	lr
1a003222:	bf00      	nop
1a003224:	100000d4 	.word	0x100000d4
1a003228:	e0001000 	.word	0xe0001000

1a00322c <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a00322c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003230:	0083      	lsls	r3, r0, #2
1a003232:	4a03      	ldr	r2, [pc, #12]	; (1a003240 <uartRxReady+0x14>)
1a003234:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003236:	6958      	ldr	r0, [r3, #20]
}
1a003238:	f000 0001 	and.w	r0, r0, #1
1a00323c:	4770      	bx	lr
1a00323e:	bf00      	nop
1a003240:	1a004e34 	.word	0x1a004e34

1a003244 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003244:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003248:	0083      	lsls	r3, r0, #2
1a00324a:	4a03      	ldr	r2, [pc, #12]	; (1a003258 <uartTxReady+0x14>)
1a00324c:	58d3      	ldr	r3, [r2, r3]
1a00324e:	6958      	ldr	r0, [r3, #20]
}
1a003250:	f000 0020 	and.w	r0, r0, #32
1a003254:	4770      	bx	lr
1a003256:	bf00      	nop
1a003258:	1a004e34 	.word	0x1a004e34

1a00325c <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00325c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003260:	0083      	lsls	r3, r0, #2
1a003262:	4a02      	ldr	r2, [pc, #8]	; (1a00326c <uartRxRead+0x10>)
1a003264:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003266:	6818      	ldr	r0, [r3, #0]
}
1a003268:	b2c0      	uxtb	r0, r0
1a00326a:	4770      	bx	lr
1a00326c:	1a004e34 	.word	0x1a004e34

1a003270 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003274:	0083      	lsls	r3, r0, #2
1a003276:	4a02      	ldr	r2, [pc, #8]	; (1a003280 <uartTxWrite+0x10>)
1a003278:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00327a:	6019      	str	r1, [r3, #0]
}
1a00327c:	4770      	bx	lr
1a00327e:	bf00      	nop
1a003280:	1a004e34 	.word	0x1a004e34

1a003284 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003288:	4680      	mov	r8, r0
1a00328a:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00328c:	4c19      	ldr	r4, [pc, #100]	; (1a0032f4 <uartInit+0x70>)
1a00328e:	0045      	lsls	r5, r0, #1
1a003290:	182a      	adds	r2, r5, r0
1a003292:	0093      	lsls	r3, r2, #2
1a003294:	18e6      	adds	r6, r4, r3
1a003296:	58e7      	ldr	r7, [r4, r3]
1a003298:	4638      	mov	r0, r7
1a00329a:	f7ff f93f 	bl	1a00251c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00329e:	4649      	mov	r1, r9
1a0032a0:	4638      	mov	r0, r7
1a0032a2:	f7ff f965 	bl	1a002570 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0032a6:	2307      	movs	r3, #7
1a0032a8:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0032aa:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0032ac:	2301      	movs	r3, #1
1a0032ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0032b0:	7930      	ldrb	r0, [r6, #4]
1a0032b2:	7973      	ldrb	r3, [r6, #5]
1a0032b4:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0032b6:	f042 0218 	orr.w	r2, r2, #24
1a0032ba:	490f      	ldr	r1, [pc, #60]	; (1a0032f8 <uartInit+0x74>)
1a0032bc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0032c4:	79f0      	ldrb	r0, [r6, #7]
1a0032c6:	7a33      	ldrb	r3, [r6, #8]
1a0032c8:	7a72      	ldrb	r2, [r6, #9]
1a0032ca:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0032ce:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0032d6:	f1b8 0f01 	cmp.w	r8, #1
1a0032da:	d001      	beq.n	1a0032e0 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0032e0:	4a06      	ldr	r2, [pc, #24]	; (1a0032fc <uartInit+0x78>)
1a0032e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0032e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0032e8:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0032ea:	221a      	movs	r2, #26
1a0032ec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0032f0:	e7f4      	b.n	1a0032dc <uartInit+0x58>
1a0032f2:	bf00      	nop
1a0032f4:	1a004e34 	.word	0x1a004e34
1a0032f8:	40086000 	.word	0x40086000
1a0032fc:	40081000 	.word	0x40081000

1a003300 <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a003300:	b538      	push	{r3, r4, r5, lr}
1a003302:	4605      	mov	r5, r0
1a003304:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a003306:	f7ff ff91 	bl	1a00322c <uartRxReady>
1a00330a:	4603      	mov	r3, r0
1a00330c:	b908      	cbnz	r0, 1a003312 <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a00330e:	4618      	mov	r0, r3
1a003310:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a003312:	4628      	mov	r0, r5
1a003314:	f7ff ffa2 	bl	1a00325c <uartRxRead>
1a003318:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a00331a:	2301      	movs	r3, #1
1a00331c:	e7f7      	b.n	1a00330e <uartReadByte+0xe>

1a00331e <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00331e:	b538      	push	{r3, r4, r5, lr}
1a003320:	4604      	mov	r4, r0
1a003322:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a003324:	4620      	mov	r0, r4
1a003326:	f7ff ff8d 	bl	1a003244 <uartTxReady>
1a00332a:	2800      	cmp	r0, #0
1a00332c:	d0fa      	beq.n	1a003324 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00332e:	4629      	mov	r1, r5
1a003330:	4620      	mov	r0, r4
1a003332:	f7ff ff9d 	bl	1a003270 <uartTxWrite>
}
1a003336:	bd38      	pop	{r3, r4, r5, pc}

1a003338 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a003338:	b538      	push	{r3, r4, r5, lr}
1a00333a:	4605      	mov	r5, r0
1a00333c:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00333e:	e003      	b.n	1a003348 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003340:	4628      	mov	r0, r5
1a003342:	f7ff ffec 	bl	1a00331e <uartWriteByte>
      str++;
1a003346:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003348:	7821      	ldrb	r1, [r4, #0]
1a00334a:	2900      	cmp	r1, #0
1a00334c:	d1f8      	bne.n	1a003340 <uartWriteString+0x8>
   }
}
1a00334e:	bd38      	pop	{r3, r4, r5, pc}

1a003350 <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a003350:	b510      	push	{r4, lr}
1a003352:	b088      	sub	sp, #32
1a003354:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a003356:	4669      	mov	r1, sp
1a003358:	4809      	ldr	r0, [pc, #36]	; (1a003380 <rtcRead+0x30>)
1a00335a:	f7ff fe57 	bl	1a00300c <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a00335e:	9b00      	ldr	r3, [sp, #0]
1a003360:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a003362:	9b01      	ldr	r3, [sp, #4]
1a003364:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a003366:	9b02      	ldr	r3, [sp, #8]
1a003368:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a00336a:	9b04      	ldr	r3, [sp, #16]
1a00336c:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a00336e:	9b03      	ldr	r3, [sp, #12]
1a003370:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a003372:	9b06      	ldr	r3, [sp, #24]
1a003374:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a003376:	9b07      	ldr	r3, [sp, #28]
1a003378:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a00337a:	2001      	movs	r0, #1
1a00337c:	b008      	add	sp, #32
1a00337e:	bd10      	pop	{r4, pc}
1a003380:	40046000 	.word	0x40046000

1a003384 <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a003384:	b500      	push	{lr}
1a003386:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a003388:	79c3      	ldrb	r3, [r0, #7]
1a00338a:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a00338c:	7983      	ldrb	r3, [r0, #6]
1a00338e:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a003390:	7943      	ldrb	r3, [r0, #5]
1a003392:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->wday;
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a003394:	78c3      	ldrb	r3, [r0, #3]
1a003396:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a003398:	7883      	ldrb	r3, [r0, #2]
1a00339a:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a00339c:	8803      	ldrh	r3, [r0, #0]
1a00339e:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a0033a0:	4669      	mov	r1, sp
1a0033a2:	4803      	ldr	r0, [pc, #12]	; (1a0033b0 <rtcWrite+0x2c>)
1a0033a4:	f7ff fe1b 	bl	1a002fde <Chip_RTC_SetFullTime>

   return ret_val;
}
1a0033a8:	2001      	movs	r0, #1
1a0033aa:	b009      	add	sp, #36	; 0x24
1a0033ac:	f85d fb04 	ldr.w	pc, [sp], #4
1a0033b0:	40046000 	.word	0x40046000

1a0033b4 <rtcInit>:
{
1a0033b4:	b538      	push	{r3, r4, r5, lr}
   if( init ) {
1a0033b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0033e0 <rtcInit+0x2c>)
1a0033b8:	781b      	ldrb	r3, [r3, #0]
1a0033ba:	b10b      	cbz	r3, 1a0033c0 <rtcInit+0xc>
      ret_val = 0;
1a0033bc:	2000      	movs	r0, #0
}
1a0033be:	bd38      	pop	{r3, r4, r5, pc}
1a0033c0:	4604      	mov	r4, r0
      Chip_RTC_Init(LPC_RTC);
1a0033c2:	4d08      	ldr	r5, [pc, #32]	; (1a0033e4 <rtcInit+0x30>)
1a0033c4:	4628      	mov	r0, r5
1a0033c6:	f7ff fe49 	bl	1a00305c <Chip_RTC_Init>
      rtcWrite( rtc );
1a0033ca:	4620      	mov	r0, r4
1a0033cc:	f7ff ffda 	bl	1a003384 <rtcWrite>
      Chip_RTC_Enable(LPC_RTC, ENABLE);
1a0033d0:	2101      	movs	r1, #1
1a0033d2:	4628      	mov	r0, r5
1a0033d4:	f7ff fdf7 	bl	1a002fc6 <Chip_RTC_Enable>
      init = 1;
1a0033d8:	2001      	movs	r0, #1
1a0033da:	4b01      	ldr	r3, [pc, #4]	; (1a0033e0 <rtcInit+0x2c>)
1a0033dc:	7018      	strb	r0, [r3, #0]
1a0033de:	e7ee      	b.n	1a0033be <rtcInit+0xa>
1a0033e0:	10002bcc 	.word	0x10002bcc
1a0033e4:	40046000 	.word	0x40046000

1a0033e8 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0033e8:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0033ec:	4908      	ldr	r1, [pc, #32]	; (1a003410 <tickerCallback+0x28>)
1a0033ee:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0033f2:	f112 0b01 	adds.w	fp, r2, #1
1a0033f6:	f143 0c00 	adc.w	ip, r3, #0
1a0033fa:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0033fe:	4b05      	ldr	r3, [pc, #20]	; (1a003414 <tickerCallback+0x2c>)
1a003400:	681b      	ldr	r3, [r3, #0]
1a003402:	b113      	cbz	r3, 1a00340a <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003404:	4a04      	ldr	r2, [pc, #16]	; (1a003418 <tickerCallback+0x30>)
1a003406:	6810      	ldr	r0, [r2, #0]
1a003408:	4798      	blx	r3
   }
}
1a00340a:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a00340e:	bf00      	nop
1a003410:	10002bd8 	.word	0x10002bd8
1a003414:	10002be0 	.word	0x10002be0
1a003418:	10002bd0 	.word	0x10002bd0

1a00341c <tickInit>:
{
1a00341c:	b510      	push	{r4, lr}
1a00341e:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003420:	4b0e      	ldr	r3, [pc, #56]	; (1a00345c <tickInit+0x40>)
1a003422:	9301      	str	r3, [sp, #4]
1a003424:	4b0e      	ldr	r3, [pc, #56]	; (1a003460 <tickInit+0x44>)
1a003426:	9300      	str	r3, [sp, #0]
1a003428:	2300      	movs	r3, #0
1a00342a:	2201      	movs	r2, #1
1a00342c:	4601      	mov	r1, r0
1a00342e:	480d      	ldr	r0, [pc, #52]	; (1a003464 <tickInit+0x48>)
1a003430:	f7fe fbac 	bl	1a001b8c <xTimerCreateStatic>
         if (h == NULL)
1a003434:	b178      	cbz	r0, 1a003456 <tickInit+0x3a>
1a003436:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a003438:	f7fd fff4 	bl	1a001424 <xTaskGetTickCount>
1a00343c:	2300      	movs	r3, #0
1a00343e:	9300      	str	r3, [sp, #0]
1a003440:	4602      	mov	r2, r0
1a003442:	2101      	movs	r1, #1
1a003444:	4620      	mov	r0, r4
1a003446:	f7fe fbc7 	bl	1a001bd8 <xTimerGenericCommand>
1a00344a:	2801      	cmp	r0, #1
1a00344c:	bf14      	ite	ne
1a00344e:	2000      	movne	r0, #0
1a003450:	2001      	moveq	r0, #1
}
1a003452:	b002      	add	sp, #8
1a003454:	bd10      	pop	{r4, pc}
            return 0;
1a003456:	2000      	movs	r0, #0
1a003458:	e7fb      	b.n	1a003452 <tickInit+0x36>
1a00345a:	bf00      	nop
1a00345c:	10002be4 	.word	0x10002be4
1a003460:	1a0033e9 	.word	0x1a0033e9
1a003464:	1a004e7c 	.word	0x1a004e7c

1a003468 <tickRead>:
}
1a003468:	4b01      	ldr	r3, [pc, #4]	; (1a003470 <tickRead+0x8>)
1a00346a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00346e:	4770      	bx	lr
1a003470:	10002bd8 	.word	0x10002bd8

1a003474 <tickWrite>:
   tickCounter = ticks;
1a003474:	4b01      	ldr	r3, [pc, #4]	; (1a00347c <tickWrite+0x8>)
1a003476:	e9c3 0100 	strd	r0, r1, [r3]
}
1a00347a:	4770      	bx	lr
1a00347c:	10002bd8 	.word	0x10002bd8

1a003480 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a003480:	b530      	push	{r4, r5, lr}
1a003482:	b083      	sub	sp, #12
   switch(config) {
1a003484:	b118      	cbz	r0, 1a00348e <adcInit+0xe>
1a003486:	2801      	cmp	r0, #1
1a003488:	d03f      	beq.n	1a00350a <adcInit+0x8a>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a00348a:	b003      	add	sp, #12
1a00348c:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a00348e:	4b21      	ldr	r3, [pc, #132]	; (1a003514 <adcInit+0x94>)
1a003490:	9300      	str	r3, [sp, #0]
1a003492:	2500      	movs	r5, #0
1a003494:	f88d 5004 	strb.w	r5, [sp, #4]
1a003498:	f88d 5005 	strb.w	r5, [sp, #5]
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a00349c:	4c1e      	ldr	r4, [pc, #120]	; (1a003518 <adcInit+0x98>)
1a00349e:	4669      	mov	r1, sp
1a0034a0:	4620      	mov	r0, r4
1a0034a2:	f7ff f92f 	bl	1a002704 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a0034a6:	4629      	mov	r1, r5
1a0034a8:	4620      	mov	r0, r4
1a0034aa:	f7ff f9c8 	bl	1a00283e <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a0034ae:	4a1b      	ldr	r2, [pc, #108]	; (1a00351c <adcInit+0x9c>)
1a0034b0:	4669      	mov	r1, sp
1a0034b2:	4620      	mov	r0, r4
1a0034b4:	f7ff f990 	bl	1a0027d8 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a0034b8:	462a      	mov	r2, r5
1a0034ba:	2101      	movs	r1, #1
1a0034bc:	4620      	mov	r0, r4
1a0034be:	f7ff f9aa 	bl	1a002816 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a0034c2:	462a      	mov	r2, r5
1a0034c4:	2101      	movs	r1, #1
1a0034c6:	4620      	mov	r0, r4
1a0034c8:	f7ff f966 	bl	1a002798 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a0034cc:	462a      	mov	r2, r5
1a0034ce:	2102      	movs	r1, #2
1a0034d0:	4620      	mov	r0, r4
1a0034d2:	f7ff f9a0 	bl	1a002816 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a0034d6:	462a      	mov	r2, r5
1a0034d8:	2102      	movs	r1, #2
1a0034da:	4620      	mov	r0, r4
1a0034dc:	f7ff f95c 	bl	1a002798 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a0034e0:	462a      	mov	r2, r5
1a0034e2:	2103      	movs	r1, #3
1a0034e4:	4620      	mov	r0, r4
1a0034e6:	f7ff f996 	bl	1a002816 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a0034ea:	462a      	mov	r2, r5
1a0034ec:	2103      	movs	r1, #3
1a0034ee:	4620      	mov	r0, r4
1a0034f0:	f7ff f952 	bl	1a002798 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a0034f4:	462a      	mov	r2, r5
1a0034f6:	2104      	movs	r1, #4
1a0034f8:	4620      	mov	r0, r4
1a0034fa:	f7ff f98c 	bl	1a002816 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a0034fe:	462a      	mov	r2, r5
1a003500:	2104      	movs	r1, #4
1a003502:	4620      	mov	r0, r4
1a003504:	f7ff f948 	bl	1a002798 <Chip_ADC_Int_SetChannelCmd>
      break;
1a003508:	e7bf      	b.n	1a00348a <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a00350a:	4803      	ldr	r0, [pc, #12]	; (1a003518 <adcInit+0x98>)
1a00350c:	f7ff f91a 	bl	1a002744 <Chip_ADC_DeInit>
}
1a003510:	e7bb      	b.n	1a00348a <adcInit+0xa>
1a003512:	bf00      	nop
1a003514:	00061a80 	.word	0x00061a80
1a003518:	400e3000 	.word	0x400e3000
1a00351c:	00030d40 	.word	0x00030d40

1a003520 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a003520:	b570      	push	{r4, r5, r6, lr}
1a003522:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = 66 - analogInput;
1a003524:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a003528:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a00352a:	2600      	movs	r6, #0
1a00352c:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a003530:	4d10      	ldr	r5, [pc, #64]	; (1a003574 <adcRead+0x54>)
1a003532:	2201      	movs	r2, #1
1a003534:	4621      	mov	r1, r4
1a003536:	4628      	mov	r0, r5
1a003538:	f7ff f96d 	bl	1a002816 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a00353c:	4632      	mov	r2, r6
1a00353e:	2101      	movs	r1, #1
1a003540:	4628      	mov	r0, r5
1a003542:	f7ff f939 	bl	1a0027b8 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a003546:	2200      	movs	r2, #0
1a003548:	4621      	mov	r1, r4
1a00354a:	480a      	ldr	r0, [pc, #40]	; (1a003574 <adcRead+0x54>)
1a00354c:	f7ff f909 	bl	1a002762 <Chip_ADC_ReadStatus>
   while(
1a003550:	2801      	cmp	r0, #1
1a003552:	d1f8      	bne.n	1a003546 <adcRead+0x26>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a003554:	4d07      	ldr	r5, [pc, #28]	; (1a003574 <adcRead+0x54>)
1a003556:	f10d 0206 	add.w	r2, sp, #6
1a00355a:	4621      	mov	r1, r4
1a00355c:	4628      	mov	r0, r5
1a00355e:	f7ff f8fc 	bl	1a00275a <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a003562:	2200      	movs	r2, #0
1a003564:	4621      	mov	r1, r4
1a003566:	4628      	mov	r0, r5
1a003568:	f7ff f955 	bl	1a002816 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00356c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a003570:	b002      	add	sp, #8
1a003572:	bd70      	pop	{r4, r5, r6, pc}
1a003574:	400e3000 	.word	0x400e3000

1a003578 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003578:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00357a:	4d0b      	ldr	r5, [pc, #44]	; (1a0035a8 <gpioObtainPinInit+0x30>)
1a00357c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003580:	182c      	adds	r4, r5, r0
1a003582:	5628      	ldrsb	r0, [r5, r0]
1a003584:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003586:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00358a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00358c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003590:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003592:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003596:	9b02      	ldr	r3, [sp, #8]
1a003598:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00359a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00359e:	9b03      	ldr	r3, [sp, #12]
1a0035a0:	701a      	strb	r2, [r3, #0]
}
1a0035a2:	bc30      	pop	{r4, r5}
1a0035a4:	4770      	bx	lr
1a0035a6:	bf00      	nop
1a0035a8:	1a004e88 	.word	0x1a004e88

1a0035ac <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0035ac:	b570      	push	{r4, r5, r6, lr}
1a0035ae:	b084      	sub	sp, #16
1a0035b0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0035b2:	2300      	movs	r3, #0
1a0035b4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0035b8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0035bc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0035c0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0035c4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0035c8:	f10d 030b 	add.w	r3, sp, #11
1a0035cc:	9301      	str	r3, [sp, #4]
1a0035ce:	ab03      	add	r3, sp, #12
1a0035d0:	9300      	str	r3, [sp, #0]
1a0035d2:	f10d 030d 	add.w	r3, sp, #13
1a0035d6:	f10d 020e 	add.w	r2, sp, #14
1a0035da:	f10d 010f 	add.w	r1, sp, #15
1a0035de:	f7ff ffcb 	bl	1a003578 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0035e2:	2c05      	cmp	r4, #5
1a0035e4:	f200 80a5 	bhi.w	1a003732 <gpioInit+0x186>
1a0035e8:	e8df f004 	tbb	[pc, r4]
1a0035ec:	45278109 	.word	0x45278109
1a0035f0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0035f2:	4851      	ldr	r0, [pc, #324]	; (1a003738 <gpioInit+0x18c>)
1a0035f4:	f7ff fd56 	bl	1a0030a4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0035f8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0035fa:	b004      	add	sp, #16
1a0035fc:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0035fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003602:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003606:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00360a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00360e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003612:	494a      	ldr	r1, [pc, #296]	; (1a00373c <gpioInit+0x190>)
1a003614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003618:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00361c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003620:	2001      	movs	r0, #1
1a003622:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003626:	4c44      	ldr	r4, [pc, #272]	; (1a003738 <gpioInit+0x18c>)
1a003628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00362c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003630:	ea22 0201 	bic.w	r2, r2, r1
1a003634:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003638:	e7df      	b.n	1a0035fa <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00363a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00363e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003642:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003646:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00364a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00364e:	493b      	ldr	r1, [pc, #236]	; (1a00373c <gpioInit+0x190>)
1a003650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003654:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003658:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00365c:	2001      	movs	r0, #1
1a00365e:	fa00 f102 	lsl.w	r1, r0, r2
1a003662:	4c35      	ldr	r4, [pc, #212]	; (1a003738 <gpioInit+0x18c>)
1a003664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003668:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00366c:	ea22 0201 	bic.w	r2, r2, r1
1a003670:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003674:	e7c1      	b.n	1a0035fa <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003676:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00367a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00367e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003682:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003686:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00368a:	492c      	ldr	r1, [pc, #176]	; (1a00373c <gpioInit+0x190>)
1a00368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003690:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003694:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003698:	2001      	movs	r0, #1
1a00369a:	fa00 f102 	lsl.w	r1, r0, r2
1a00369e:	4c26      	ldr	r4, [pc, #152]	; (1a003738 <gpioInit+0x18c>)
1a0036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0036a4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0036a8:	ea22 0201 	bic.w	r2, r2, r1
1a0036ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0036b0:	e7a3      	b.n	1a0035fa <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0036b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0036b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0036ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0036be:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0036c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0036c6:	491d      	ldr	r1, [pc, #116]	; (1a00373c <gpioInit+0x190>)
1a0036c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0036cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0036d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0036d4:	2001      	movs	r0, #1
1a0036d6:	fa00 f102 	lsl.w	r1, r0, r2
1a0036da:	4c17      	ldr	r4, [pc, #92]	; (1a003738 <gpioInit+0x18c>)
1a0036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0036e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0036e4:	ea22 0201 	bic.w	r2, r2, r1
1a0036e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0036ec:	e785      	b.n	1a0035fa <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0036ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0036f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0036f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0036fa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0036fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003702:	490e      	ldr	r1, [pc, #56]	; (1a00373c <gpioInit+0x190>)
1a003704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003708:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00370c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003710:	2001      	movs	r0, #1
1a003712:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003716:	4b08      	ldr	r3, [pc, #32]	; (1a003738 <gpioInit+0x18c>)
1a003718:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00371c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003720:	4331      	orrs	r1, r6
1a003722:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003726:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003728:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00372c:	2100      	movs	r1, #0
1a00372e:	5499      	strb	r1, [r3, r2]
1a003730:	e763      	b.n	1a0035fa <gpioInit+0x4e>
      ret_val = 0;
1a003732:	2000      	movs	r0, #0
1a003734:	e761      	b.n	1a0035fa <gpioInit+0x4e>
1a003736:	bf00      	nop
1a003738:	400f4000 	.word	0x400f4000
1a00373c:	40086000 	.word	0x40086000

1a003740 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003740:	b510      	push	{r4, lr}
1a003742:	b084      	sub	sp, #16
1a003744:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003746:	2300      	movs	r3, #0
1a003748:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00374c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003750:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003754:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003758:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00375c:	f10d 030b 	add.w	r3, sp, #11
1a003760:	9301      	str	r3, [sp, #4]
1a003762:	ab03      	add	r3, sp, #12
1a003764:	9300      	str	r3, [sp, #0]
1a003766:	f10d 030d 	add.w	r3, sp, #13
1a00376a:	f10d 020e 	add.w	r2, sp, #14
1a00376e:	f10d 010f 	add.w	r1, sp, #15
1a003772:	f7ff ff01 	bl	1a003578 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003776:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00377a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00377e:	3400      	adds	r4, #0
1a003780:	bf18      	it	ne
1a003782:	2401      	movne	r4, #1
1a003784:	015b      	lsls	r3, r3, #5
1a003786:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00378a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00378e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003790:	2001      	movs	r0, #1
1a003792:	b004      	add	sp, #16
1a003794:	bd10      	pop	{r4, pc}

1a003796 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a003796:	b500      	push	{lr}
1a003798:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00379a:	2300      	movs	r3, #0
1a00379c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0037a0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0037a4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0037a8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0037ac:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0037b0:	f10d 030b 	add.w	r3, sp, #11
1a0037b4:	9301      	str	r3, [sp, #4]
1a0037b6:	ab03      	add	r3, sp, #12
1a0037b8:	9300      	str	r3, [sp, #0]
1a0037ba:	f10d 030d 	add.w	r3, sp, #13
1a0037be:	f10d 020e 	add.w	r2, sp, #14
1a0037c2:	f10d 010f 	add.w	r1, sp, #15
1a0037c6:	f7ff fed7 	bl	1a003578 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0037ca:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0037ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0037d2:	015b      	lsls	r3, r3, #5
1a0037d4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0037d8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0037dc:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0037de:	3000      	adds	r0, #0
1a0037e0:	bf18      	it	ne
1a0037e2:	2001      	movne	r0, #1
1a0037e4:	b005      	add	sp, #20
1a0037e6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0037ea:	Address 0x000000001a0037ea is out of bounds.


1a0037ec <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0037ec:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0037ee:	4b04      	ldr	r3, [pc, #16]	; (1a003800 <USB0_IRQHandler+0x14>)
1a0037f0:	681b      	ldr	r3, [r3, #0]
1a0037f2:	681b      	ldr	r3, [r3, #0]
1a0037f4:	68db      	ldr	r3, [r3, #12]
1a0037f6:	4a03      	ldr	r2, [pc, #12]	; (1a003804 <USB0_IRQHandler+0x18>)
1a0037f8:	6810      	ldr	r0, [r2, #0]
1a0037fa:	4798      	blx	r3
}
1a0037fc:	bd08      	pop	{r3, pc}
1a0037fe:	bf00      	nop
1a003800:	10002c70 	.word	0x10002c70
1a003804:	10002c14 	.word	0x10002c14

1a003808 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003808:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00380a:	f7ff fb17 	bl	1a002e3c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00380e:	4b3a      	ldr	r3, [pc, #232]	; (1a0038f8 <boardInit+0xf0>)
1a003810:	6818      	ldr	r0, [r3, #0]
1a003812:	f7ff fcfd 	bl	1a003210 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a003816:	2001      	movs	r0, #1
1a003818:	2100      	movs	r1, #0
1a00381a:	f7ff fdff 	bl	1a00341c <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00381e:	2105      	movs	r1, #5
1a003820:	2000      	movs	r0, #0
1a003822:	f7ff fec3 	bl	1a0035ac <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003826:	2100      	movs	r1, #0
1a003828:	2024      	movs	r0, #36	; 0x24
1a00382a:	f7ff febf 	bl	1a0035ac <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00382e:	2100      	movs	r1, #0
1a003830:	2025      	movs	r0, #37	; 0x25
1a003832:	f7ff febb 	bl	1a0035ac <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a003836:	2100      	movs	r1, #0
1a003838:	2026      	movs	r0, #38	; 0x26
1a00383a:	f7ff feb7 	bl	1a0035ac <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00383e:	2100      	movs	r1, #0
1a003840:	2027      	movs	r0, #39	; 0x27
1a003842:	f7ff feb3 	bl	1a0035ac <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a003846:	2101      	movs	r1, #1
1a003848:	2028      	movs	r0, #40	; 0x28
1a00384a:	f7ff feaf 	bl	1a0035ac <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00384e:	2101      	movs	r1, #1
1a003850:	2029      	movs	r0, #41	; 0x29
1a003852:	f7ff feab 	bl	1a0035ac <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a003856:	2101      	movs	r1, #1
1a003858:	202a      	movs	r0, #42	; 0x2a
1a00385a:	f7ff fea7 	bl	1a0035ac <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00385e:	2101      	movs	r1, #1
1a003860:	202b      	movs	r0, #43	; 0x2b
1a003862:	f7ff fea3 	bl	1a0035ac <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a003866:	2101      	movs	r1, #1
1a003868:	202c      	movs	r0, #44	; 0x2c
1a00386a:	f7ff fe9f 	bl	1a0035ac <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a00386e:	2101      	movs	r1, #1
1a003870:	202d      	movs	r0, #45	; 0x2d
1a003872:	f7ff fe9b 	bl	1a0035ac <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a003876:	2100      	movs	r1, #0
1a003878:	202e      	movs	r0, #46	; 0x2e
1a00387a:	f7ff fe97 	bl	1a0035ac <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a00387e:	2100      	movs	r1, #0
1a003880:	202f      	movs	r0, #47	; 0x2f
1a003882:	f7ff fe93 	bl	1a0035ac <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a003886:	2100      	movs	r1, #0
1a003888:	2030      	movs	r0, #48	; 0x30
1a00388a:	f7ff fe8f 	bl	1a0035ac <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a00388e:	2100      	movs	r1, #0
1a003890:	2031      	movs	r0, #49	; 0x31
1a003892:	f7ff fe8b 	bl	1a0035ac <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a003896:	2100      	movs	r1, #0
1a003898:	2032      	movs	r0, #50	; 0x32
1a00389a:	f7ff fe87 	bl	1a0035ac <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a00389e:	2100      	movs	r1, #0
1a0038a0:	2033      	movs	r0, #51	; 0x33
1a0038a2:	f7ff fe83 	bl	1a0035ac <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0038a6:	2100      	movs	r1, #0
1a0038a8:	2034      	movs	r0, #52	; 0x34
1a0038aa:	f7ff fe7f 	bl	1a0035ac <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0038ae:	2100      	movs	r1, #0
1a0038b0:	2035      	movs	r0, #53	; 0x35
1a0038b2:	f7ff fe7b 	bl	1a0035ac <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0038b6:	2101      	movs	r1, #1
1a0038b8:	2036      	movs	r0, #54	; 0x36
1a0038ba:	f7ff fe77 	bl	1a0035ac <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0038be:	2101      	movs	r1, #1
1a0038c0:	2037      	movs	r0, #55	; 0x37
1a0038c2:	f7ff fe73 	bl	1a0035ac <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0038c6:	2101      	movs	r1, #1
1a0038c8:	2038      	movs	r0, #56	; 0x38
1a0038ca:	f7ff fe6f 	bl	1a0035ac <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0038ce:	2101      	movs	r1, #1
1a0038d0:	2039      	movs	r0, #57	; 0x39
1a0038d2:	f7ff fe6b 	bl	1a0035ac <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0038d6:	2101      	movs	r1, #1
1a0038d8:	203a      	movs	r0, #58	; 0x3a
1a0038da:	f7ff fe67 	bl	1a0035ac <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0038de:	2101      	movs	r1, #1
1a0038e0:	203b      	movs	r0, #59	; 0x3b
1a0038e2:	f7ff fe63 	bl	1a0035ac <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0038e6:	2101      	movs	r1, #1
1a0038e8:	203c      	movs	r0, #60	; 0x3c
1a0038ea:	f7ff fe5f 	bl	1a0035ac <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0038ee:	2101      	movs	r1, #1
1a0038f0:	203d      	movs	r0, #61	; 0x3d
1a0038f2:	f7ff fe5b 	bl	1a0035ac <gpioInit>

}
1a0038f6:	bd08      	pop	{r3, pc}
1a0038f8:	10002c6c 	.word	0x10002c6c

1a0038fc <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0038fc:	b508      	push	{r3, lr}
1a0038fe:	460b      	mov	r3, r1
   *printer = uart;
1a003900:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003902:	4611      	mov	r1, r2
1a003904:	4618      	mov	r0, r3
1a003906:	f7ff fcbd 	bl	1a003284 <uartInit>
}
1a00390a:	bd08      	pop	{r3, pc}

1a00390c <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a00390c:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a00390e:	f7ff fd13 	bl	1a003338 <uartWriteString>
}
1a003912:	bd08      	pop	{r3, pc}

1a003914 <printEnter>:

void printEnter( print_t printer )
{
1a003914:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a003916:	4902      	ldr	r1, [pc, #8]	; (1a003920 <printEnter+0xc>)
1a003918:	f7ff fd0e 	bl	1a003338 <uartWriteString>
}
1a00391c:	bd08      	pop	{r3, pc}
1a00391e:	bf00      	nop
1a003920:	1a004fc0 	.word	0x1a004fc0

1a003924 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003924:	2301      	movs	r3, #1
1a003926:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00392a:	4b01      	ldr	r3, [pc, #4]	; (1a003930 <clearInterrupt+0xc>)
1a00392c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00392e:	4770      	bx	lr
1a003930:	40087000 	.word	0x40087000

1a003934 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a003936:	4b12      	ldr	r3, [pc, #72]	; (1a003980 <serveInterrupt+0x4c>)
1a003938:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00393a:	4b12      	ldr	r3, [pc, #72]	; (1a003984 <serveInterrupt+0x50>)
1a00393c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00393e:	2301      	movs	r3, #1
1a003940:	4083      	lsls	r3, r0
1a003942:	420b      	tst	r3, r1
1a003944:	d111      	bne.n	1a00396a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a003946:	4910      	ldr	r1, [pc, #64]	; (1a003988 <serveInterrupt+0x54>)
1a003948:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00394a:	4d10      	ldr	r5, [pc, #64]	; (1a00398c <serveInterrupt+0x58>)
1a00394c:	0051      	lsls	r1, r2, #1
1a00394e:	188f      	adds	r7, r1, r2
1a003950:	00fc      	lsls	r4, r7, #3
1a003952:	4627      	mov	r7, r4
1a003954:	442c      	add	r4, r5
1a003956:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a003958:	6864      	ldr	r4, [r4, #4]
1a00395a:	1b36      	subs	r6, r6, r4
1a00395c:	443d      	add	r5, r7
1a00395e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a003960:	4a08      	ldr	r2, [pc, #32]	; (1a003984 <serveInterrupt+0x50>)
1a003962:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003964:	f7ff ffde 	bl	1a003924 <clearInterrupt>
}
1a003968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00396a:	4907      	ldr	r1, [pc, #28]	; (1a003988 <serveInterrupt+0x54>)
1a00396c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00396e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a003972:	00d1      	lsls	r1, r2, #3
1a003974:	4a05      	ldr	r2, [pc, #20]	; (1a00398c <serveInterrupt+0x58>)
1a003976:	440a      	add	r2, r1
1a003978:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00397a:	4a02      	ldr	r2, [pc, #8]	; (1a003984 <serveInterrupt+0x50>)
1a00397c:	61d3      	str	r3, [r2, #28]
1a00397e:	e7f1      	b.n	1a003964 <serveInterrupt+0x30>
1a003980:	1a004fc4 	.word	0x1a004fc4
1a003984:	40087000 	.word	0x40087000
1a003988:	40084000 	.word	0x40084000
1a00398c:	100000d8 	.word	0x100000d8

1a003990 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a003990:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a003992:	2000      	movs	r0, #0
1a003994:	f7ff ffce 	bl	1a003934 <serveInterrupt>
}
1a003998:	bd08      	pop	{r3, pc}

1a00399a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00399a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00399c:	2001      	movs	r0, #1
1a00399e:	f7ff ffc9 	bl	1a003934 <serveInterrupt>
}
1a0039a2:	bd08      	pop	{r3, pc}

1a0039a4 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0039a4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0039a6:	2002      	movs	r0, #2
1a0039a8:	f7ff ffc4 	bl	1a003934 <serveInterrupt>
}
1a0039ac:	bd08      	pop	{r3, pc}
1a0039ae:	Address 0x000000001a0039ae is out of bounds.


1a0039b0 <__aeabi_uldivmod>:
1a0039b0:	b953      	cbnz	r3, 1a0039c8 <__aeabi_uldivmod+0x18>
1a0039b2:	b94a      	cbnz	r2, 1a0039c8 <__aeabi_uldivmod+0x18>
1a0039b4:	2900      	cmp	r1, #0
1a0039b6:	bf08      	it	eq
1a0039b8:	2800      	cmpeq	r0, #0
1a0039ba:	bf1c      	itt	ne
1a0039bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0039c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0039c4:	f000 b972 	b.w	1a003cac <__aeabi_idiv0>
1a0039c8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0039cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0039d0:	f000 f806 	bl	1a0039e0 <__udivmoddi4>
1a0039d4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0039d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0039dc:	b004      	add	sp, #16
1a0039de:	4770      	bx	lr

1a0039e0 <__udivmoddi4>:
1a0039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0039e4:	9e08      	ldr	r6, [sp, #32]
1a0039e6:	4604      	mov	r4, r0
1a0039e8:	4688      	mov	r8, r1
1a0039ea:	2b00      	cmp	r3, #0
1a0039ec:	d14b      	bne.n	1a003a86 <__udivmoddi4+0xa6>
1a0039ee:	428a      	cmp	r2, r1
1a0039f0:	4615      	mov	r5, r2
1a0039f2:	d967      	bls.n	1a003ac4 <__udivmoddi4+0xe4>
1a0039f4:	fab2 f282 	clz	r2, r2
1a0039f8:	b14a      	cbz	r2, 1a003a0e <__udivmoddi4+0x2e>
1a0039fa:	f1c2 0720 	rsb	r7, r2, #32
1a0039fe:	fa01 f302 	lsl.w	r3, r1, r2
1a003a02:	fa20 f707 	lsr.w	r7, r0, r7
1a003a06:	4095      	lsls	r5, r2
1a003a08:	ea47 0803 	orr.w	r8, r7, r3
1a003a0c:	4094      	lsls	r4, r2
1a003a0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003a12:	0c23      	lsrs	r3, r4, #16
1a003a14:	fbb8 f7fe 	udiv	r7, r8, lr
1a003a18:	fa1f fc85 	uxth.w	ip, r5
1a003a1c:	fb0e 8817 	mls	r8, lr, r7, r8
1a003a20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003a24:	fb07 f10c 	mul.w	r1, r7, ip
1a003a28:	4299      	cmp	r1, r3
1a003a2a:	d909      	bls.n	1a003a40 <__udivmoddi4+0x60>
1a003a2c:	18eb      	adds	r3, r5, r3
1a003a2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003a32:	f080 811b 	bcs.w	1a003c6c <__udivmoddi4+0x28c>
1a003a36:	4299      	cmp	r1, r3
1a003a38:	f240 8118 	bls.w	1a003c6c <__udivmoddi4+0x28c>
1a003a3c:	3f02      	subs	r7, #2
1a003a3e:	442b      	add	r3, r5
1a003a40:	1a5b      	subs	r3, r3, r1
1a003a42:	b2a4      	uxth	r4, r4
1a003a44:	fbb3 f0fe 	udiv	r0, r3, lr
1a003a48:	fb0e 3310 	mls	r3, lr, r0, r3
1a003a4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003a50:	fb00 fc0c 	mul.w	ip, r0, ip
1a003a54:	45a4      	cmp	ip, r4
1a003a56:	d909      	bls.n	1a003a6c <__udivmoddi4+0x8c>
1a003a58:	192c      	adds	r4, r5, r4
1a003a5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003a5e:	f080 8107 	bcs.w	1a003c70 <__udivmoddi4+0x290>
1a003a62:	45a4      	cmp	ip, r4
1a003a64:	f240 8104 	bls.w	1a003c70 <__udivmoddi4+0x290>
1a003a68:	3802      	subs	r0, #2
1a003a6a:	442c      	add	r4, r5
1a003a6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003a70:	eba4 040c 	sub.w	r4, r4, ip
1a003a74:	2700      	movs	r7, #0
1a003a76:	b11e      	cbz	r6, 1a003a80 <__udivmoddi4+0xa0>
1a003a78:	40d4      	lsrs	r4, r2
1a003a7a:	2300      	movs	r3, #0
1a003a7c:	e9c6 4300 	strd	r4, r3, [r6]
1a003a80:	4639      	mov	r1, r7
1a003a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003a86:	428b      	cmp	r3, r1
1a003a88:	d909      	bls.n	1a003a9e <__udivmoddi4+0xbe>
1a003a8a:	2e00      	cmp	r6, #0
1a003a8c:	f000 80eb 	beq.w	1a003c66 <__udivmoddi4+0x286>
1a003a90:	2700      	movs	r7, #0
1a003a92:	e9c6 0100 	strd	r0, r1, [r6]
1a003a96:	4638      	mov	r0, r7
1a003a98:	4639      	mov	r1, r7
1a003a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003a9e:	fab3 f783 	clz	r7, r3
1a003aa2:	2f00      	cmp	r7, #0
1a003aa4:	d147      	bne.n	1a003b36 <__udivmoddi4+0x156>
1a003aa6:	428b      	cmp	r3, r1
1a003aa8:	d302      	bcc.n	1a003ab0 <__udivmoddi4+0xd0>
1a003aaa:	4282      	cmp	r2, r0
1a003aac:	f200 80fa 	bhi.w	1a003ca4 <__udivmoddi4+0x2c4>
1a003ab0:	1a84      	subs	r4, r0, r2
1a003ab2:	eb61 0303 	sbc.w	r3, r1, r3
1a003ab6:	2001      	movs	r0, #1
1a003ab8:	4698      	mov	r8, r3
1a003aba:	2e00      	cmp	r6, #0
1a003abc:	d0e0      	beq.n	1a003a80 <__udivmoddi4+0xa0>
1a003abe:	e9c6 4800 	strd	r4, r8, [r6]
1a003ac2:	e7dd      	b.n	1a003a80 <__udivmoddi4+0xa0>
1a003ac4:	b902      	cbnz	r2, 1a003ac8 <__udivmoddi4+0xe8>
1a003ac6:	deff      	udf	#255	; 0xff
1a003ac8:	fab2 f282 	clz	r2, r2
1a003acc:	2a00      	cmp	r2, #0
1a003ace:	f040 808f 	bne.w	1a003bf0 <__udivmoddi4+0x210>
1a003ad2:	1b49      	subs	r1, r1, r5
1a003ad4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003ad8:	fa1f f885 	uxth.w	r8, r5
1a003adc:	2701      	movs	r7, #1
1a003ade:	fbb1 fcfe 	udiv	ip, r1, lr
1a003ae2:	0c23      	lsrs	r3, r4, #16
1a003ae4:	fb0e 111c 	mls	r1, lr, ip, r1
1a003ae8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003aec:	fb08 f10c 	mul.w	r1, r8, ip
1a003af0:	4299      	cmp	r1, r3
1a003af2:	d907      	bls.n	1a003b04 <__udivmoddi4+0x124>
1a003af4:	18eb      	adds	r3, r5, r3
1a003af6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003afa:	d202      	bcs.n	1a003b02 <__udivmoddi4+0x122>
1a003afc:	4299      	cmp	r1, r3
1a003afe:	f200 80cd 	bhi.w	1a003c9c <__udivmoddi4+0x2bc>
1a003b02:	4684      	mov	ip, r0
1a003b04:	1a59      	subs	r1, r3, r1
1a003b06:	b2a3      	uxth	r3, r4
1a003b08:	fbb1 f0fe 	udiv	r0, r1, lr
1a003b0c:	fb0e 1410 	mls	r4, lr, r0, r1
1a003b10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003b14:	fb08 f800 	mul.w	r8, r8, r0
1a003b18:	45a0      	cmp	r8, r4
1a003b1a:	d907      	bls.n	1a003b2c <__udivmoddi4+0x14c>
1a003b1c:	192c      	adds	r4, r5, r4
1a003b1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003b22:	d202      	bcs.n	1a003b2a <__udivmoddi4+0x14a>
1a003b24:	45a0      	cmp	r8, r4
1a003b26:	f200 80b6 	bhi.w	1a003c96 <__udivmoddi4+0x2b6>
1a003b2a:	4618      	mov	r0, r3
1a003b2c:	eba4 0408 	sub.w	r4, r4, r8
1a003b30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003b34:	e79f      	b.n	1a003a76 <__udivmoddi4+0x96>
1a003b36:	f1c7 0c20 	rsb	ip, r7, #32
1a003b3a:	40bb      	lsls	r3, r7
1a003b3c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003b40:	ea4e 0e03 	orr.w	lr, lr, r3
1a003b44:	fa01 f407 	lsl.w	r4, r1, r7
1a003b48:	fa20 f50c 	lsr.w	r5, r0, ip
1a003b4c:	fa21 f30c 	lsr.w	r3, r1, ip
1a003b50:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003b54:	4325      	orrs	r5, r4
1a003b56:	fbb3 f9f8 	udiv	r9, r3, r8
1a003b5a:	0c2c      	lsrs	r4, r5, #16
1a003b5c:	fb08 3319 	mls	r3, r8, r9, r3
1a003b60:	fa1f fa8e 	uxth.w	sl, lr
1a003b64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003b68:	fb09 f40a 	mul.w	r4, r9, sl
1a003b6c:	429c      	cmp	r4, r3
1a003b6e:	fa02 f207 	lsl.w	r2, r2, r7
1a003b72:	fa00 f107 	lsl.w	r1, r0, r7
1a003b76:	d90b      	bls.n	1a003b90 <__udivmoddi4+0x1b0>
1a003b78:	eb1e 0303 	adds.w	r3, lr, r3
1a003b7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003b80:	f080 8087 	bcs.w	1a003c92 <__udivmoddi4+0x2b2>
1a003b84:	429c      	cmp	r4, r3
1a003b86:	f240 8084 	bls.w	1a003c92 <__udivmoddi4+0x2b2>
1a003b8a:	f1a9 0902 	sub.w	r9, r9, #2
1a003b8e:	4473      	add	r3, lr
1a003b90:	1b1b      	subs	r3, r3, r4
1a003b92:	b2ad      	uxth	r5, r5
1a003b94:	fbb3 f0f8 	udiv	r0, r3, r8
1a003b98:	fb08 3310 	mls	r3, r8, r0, r3
1a003b9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003ba0:	fb00 fa0a 	mul.w	sl, r0, sl
1a003ba4:	45a2      	cmp	sl, r4
1a003ba6:	d908      	bls.n	1a003bba <__udivmoddi4+0x1da>
1a003ba8:	eb1e 0404 	adds.w	r4, lr, r4
1a003bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003bb0:	d26b      	bcs.n	1a003c8a <__udivmoddi4+0x2aa>
1a003bb2:	45a2      	cmp	sl, r4
1a003bb4:	d969      	bls.n	1a003c8a <__udivmoddi4+0x2aa>
1a003bb6:	3802      	subs	r0, #2
1a003bb8:	4474      	add	r4, lr
1a003bba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003bbe:	fba0 8902 	umull	r8, r9, r0, r2
1a003bc2:	eba4 040a 	sub.w	r4, r4, sl
1a003bc6:	454c      	cmp	r4, r9
1a003bc8:	46c2      	mov	sl, r8
1a003bca:	464b      	mov	r3, r9
1a003bcc:	d354      	bcc.n	1a003c78 <__udivmoddi4+0x298>
1a003bce:	d051      	beq.n	1a003c74 <__udivmoddi4+0x294>
1a003bd0:	2e00      	cmp	r6, #0
1a003bd2:	d069      	beq.n	1a003ca8 <__udivmoddi4+0x2c8>
1a003bd4:	ebb1 050a 	subs.w	r5, r1, sl
1a003bd8:	eb64 0403 	sbc.w	r4, r4, r3
1a003bdc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003be0:	40fd      	lsrs	r5, r7
1a003be2:	40fc      	lsrs	r4, r7
1a003be4:	ea4c 0505 	orr.w	r5, ip, r5
1a003be8:	e9c6 5400 	strd	r5, r4, [r6]
1a003bec:	2700      	movs	r7, #0
1a003bee:	e747      	b.n	1a003a80 <__udivmoddi4+0xa0>
1a003bf0:	f1c2 0320 	rsb	r3, r2, #32
1a003bf4:	fa20 f703 	lsr.w	r7, r0, r3
1a003bf8:	4095      	lsls	r5, r2
1a003bfa:	fa01 f002 	lsl.w	r0, r1, r2
1a003bfe:	fa21 f303 	lsr.w	r3, r1, r3
1a003c02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c06:	4338      	orrs	r0, r7
1a003c08:	0c01      	lsrs	r1, r0, #16
1a003c0a:	fbb3 f7fe 	udiv	r7, r3, lr
1a003c0e:	fa1f f885 	uxth.w	r8, r5
1a003c12:	fb0e 3317 	mls	r3, lr, r7, r3
1a003c16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003c1a:	fb07 f308 	mul.w	r3, r7, r8
1a003c1e:	428b      	cmp	r3, r1
1a003c20:	fa04 f402 	lsl.w	r4, r4, r2
1a003c24:	d907      	bls.n	1a003c36 <__udivmoddi4+0x256>
1a003c26:	1869      	adds	r1, r5, r1
1a003c28:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003c2c:	d22f      	bcs.n	1a003c8e <__udivmoddi4+0x2ae>
1a003c2e:	428b      	cmp	r3, r1
1a003c30:	d92d      	bls.n	1a003c8e <__udivmoddi4+0x2ae>
1a003c32:	3f02      	subs	r7, #2
1a003c34:	4429      	add	r1, r5
1a003c36:	1acb      	subs	r3, r1, r3
1a003c38:	b281      	uxth	r1, r0
1a003c3a:	fbb3 f0fe 	udiv	r0, r3, lr
1a003c3e:	fb0e 3310 	mls	r3, lr, r0, r3
1a003c42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003c46:	fb00 f308 	mul.w	r3, r0, r8
1a003c4a:	428b      	cmp	r3, r1
1a003c4c:	d907      	bls.n	1a003c5e <__udivmoddi4+0x27e>
1a003c4e:	1869      	adds	r1, r5, r1
1a003c50:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003c54:	d217      	bcs.n	1a003c86 <__udivmoddi4+0x2a6>
1a003c56:	428b      	cmp	r3, r1
1a003c58:	d915      	bls.n	1a003c86 <__udivmoddi4+0x2a6>
1a003c5a:	3802      	subs	r0, #2
1a003c5c:	4429      	add	r1, r5
1a003c5e:	1ac9      	subs	r1, r1, r3
1a003c60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003c64:	e73b      	b.n	1a003ade <__udivmoddi4+0xfe>
1a003c66:	4637      	mov	r7, r6
1a003c68:	4630      	mov	r0, r6
1a003c6a:	e709      	b.n	1a003a80 <__udivmoddi4+0xa0>
1a003c6c:	4607      	mov	r7, r0
1a003c6e:	e6e7      	b.n	1a003a40 <__udivmoddi4+0x60>
1a003c70:	4618      	mov	r0, r3
1a003c72:	e6fb      	b.n	1a003a6c <__udivmoddi4+0x8c>
1a003c74:	4541      	cmp	r1, r8
1a003c76:	d2ab      	bcs.n	1a003bd0 <__udivmoddi4+0x1f0>
1a003c78:	ebb8 0a02 	subs.w	sl, r8, r2
1a003c7c:	eb69 020e 	sbc.w	r2, r9, lr
1a003c80:	3801      	subs	r0, #1
1a003c82:	4613      	mov	r3, r2
1a003c84:	e7a4      	b.n	1a003bd0 <__udivmoddi4+0x1f0>
1a003c86:	4660      	mov	r0, ip
1a003c88:	e7e9      	b.n	1a003c5e <__udivmoddi4+0x27e>
1a003c8a:	4618      	mov	r0, r3
1a003c8c:	e795      	b.n	1a003bba <__udivmoddi4+0x1da>
1a003c8e:	4667      	mov	r7, ip
1a003c90:	e7d1      	b.n	1a003c36 <__udivmoddi4+0x256>
1a003c92:	4681      	mov	r9, r0
1a003c94:	e77c      	b.n	1a003b90 <__udivmoddi4+0x1b0>
1a003c96:	3802      	subs	r0, #2
1a003c98:	442c      	add	r4, r5
1a003c9a:	e747      	b.n	1a003b2c <__udivmoddi4+0x14c>
1a003c9c:	f1ac 0c02 	sub.w	ip, ip, #2
1a003ca0:	442b      	add	r3, r5
1a003ca2:	e72f      	b.n	1a003b04 <__udivmoddi4+0x124>
1a003ca4:	4638      	mov	r0, r7
1a003ca6:	e708      	b.n	1a003aba <__udivmoddi4+0xda>
1a003ca8:	4637      	mov	r7, r6
1a003caa:	e6e9      	b.n	1a003a80 <__udivmoddi4+0xa0>

1a003cac <__aeabi_idiv0>:
1a003cac:	4770      	bx	lr
1a003cae:	bf00      	nop

1a003cb0 <__libc_init_array>:
1a003cb0:	b570      	push	{r4, r5, r6, lr}
1a003cb2:	4e0d      	ldr	r6, [pc, #52]	; (1a003ce8 <__libc_init_array+0x38>)
1a003cb4:	4c0d      	ldr	r4, [pc, #52]	; (1a003cec <__libc_init_array+0x3c>)
1a003cb6:	1ba4      	subs	r4, r4, r6
1a003cb8:	10a4      	asrs	r4, r4, #2
1a003cba:	2500      	movs	r5, #0
1a003cbc:	42a5      	cmp	r5, r4
1a003cbe:	d109      	bne.n	1a003cd4 <__libc_init_array+0x24>
1a003cc0:	4e0b      	ldr	r6, [pc, #44]	; (1a003cf0 <__libc_init_array+0x40>)
1a003cc2:	4c0c      	ldr	r4, [pc, #48]	; (1a003cf4 <__libc_init_array+0x44>)
1a003cc4:	f7fc fce9 	bl	1a00069a <_init>
1a003cc8:	1ba4      	subs	r4, r4, r6
1a003cca:	10a4      	asrs	r4, r4, #2
1a003ccc:	2500      	movs	r5, #0
1a003cce:	42a5      	cmp	r5, r4
1a003cd0:	d105      	bne.n	1a003cde <__libc_init_array+0x2e>
1a003cd2:	bd70      	pop	{r4, r5, r6, pc}
1a003cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003cd8:	4798      	blx	r3
1a003cda:	3501      	adds	r5, #1
1a003cdc:	e7ee      	b.n	1a003cbc <__libc_init_array+0xc>
1a003cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003ce2:	4798      	blx	r3
1a003ce4:	3501      	adds	r5, #1
1a003ce6:	e7f2      	b.n	1a003cce <__libc_init_array+0x1e>
1a003ce8:	1a005060 	.word	0x1a005060
1a003cec:	1a005060 	.word	0x1a005060
1a003cf0:	1a005060 	.word	0x1a005060
1a003cf4:	1a005064 	.word	0x1a005064

1a003cf8 <memcpy>:
1a003cf8:	b510      	push	{r4, lr}
1a003cfa:	1e43      	subs	r3, r0, #1
1a003cfc:	440a      	add	r2, r1
1a003cfe:	4291      	cmp	r1, r2
1a003d00:	d100      	bne.n	1a003d04 <memcpy+0xc>
1a003d02:	bd10      	pop	{r4, pc}
1a003d04:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003d08:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003d0c:	e7f7      	b.n	1a003cfe <memcpy+0x6>

1a003d0e <memset>:
1a003d0e:	4402      	add	r2, r0
1a003d10:	4603      	mov	r3, r0
1a003d12:	4293      	cmp	r3, r2
1a003d14:	d100      	bne.n	1a003d18 <memset+0xa>
1a003d16:	4770      	bx	lr
1a003d18:	f803 1b01 	strb.w	r1, [r3], #1
1a003d1c:	e7f9      	b.n	1a003d12 <memset+0x4>
1a003d1e:	Address 0x000000001a003d1e is out of bounds.


1a003d20 <iprintf>:
1a003d20:	b40f      	push	{r0, r1, r2, r3}
1a003d22:	4b0a      	ldr	r3, [pc, #40]	; (1a003d4c <iprintf+0x2c>)
1a003d24:	b513      	push	{r0, r1, r4, lr}
1a003d26:	681c      	ldr	r4, [r3, #0]
1a003d28:	b124      	cbz	r4, 1a003d34 <iprintf+0x14>
1a003d2a:	69a3      	ldr	r3, [r4, #24]
1a003d2c:	b913      	cbnz	r3, 1a003d34 <iprintf+0x14>
1a003d2e:	4620      	mov	r0, r4
1a003d30:	f000 f9be 	bl	1a0040b0 <__sinit>
1a003d34:	ab05      	add	r3, sp, #20
1a003d36:	9a04      	ldr	r2, [sp, #16]
1a003d38:	68a1      	ldr	r1, [r4, #8]
1a003d3a:	9301      	str	r3, [sp, #4]
1a003d3c:	4620      	mov	r0, r4
1a003d3e:	f000 fb77 	bl	1a004430 <_vfiprintf_r>
1a003d42:	b002      	add	sp, #8
1a003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003d48:	b004      	add	sp, #16
1a003d4a:	4770      	bx	lr
1a003d4c:	10000120 	.word	0x10000120

1a003d50 <__swbuf_r>:
1a003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003d52:	460e      	mov	r6, r1
1a003d54:	4614      	mov	r4, r2
1a003d56:	4605      	mov	r5, r0
1a003d58:	b118      	cbz	r0, 1a003d62 <__swbuf_r+0x12>
1a003d5a:	6983      	ldr	r3, [r0, #24]
1a003d5c:	b90b      	cbnz	r3, 1a003d62 <__swbuf_r+0x12>
1a003d5e:	f000 f9a7 	bl	1a0040b0 <__sinit>
1a003d62:	4b21      	ldr	r3, [pc, #132]	; (1a003de8 <__swbuf_r+0x98>)
1a003d64:	429c      	cmp	r4, r3
1a003d66:	d12a      	bne.n	1a003dbe <__swbuf_r+0x6e>
1a003d68:	686c      	ldr	r4, [r5, #4]
1a003d6a:	69a3      	ldr	r3, [r4, #24]
1a003d6c:	60a3      	str	r3, [r4, #8]
1a003d6e:	89a3      	ldrh	r3, [r4, #12]
1a003d70:	071a      	lsls	r2, r3, #28
1a003d72:	d52e      	bpl.n	1a003dd2 <__swbuf_r+0x82>
1a003d74:	6923      	ldr	r3, [r4, #16]
1a003d76:	b363      	cbz	r3, 1a003dd2 <__swbuf_r+0x82>
1a003d78:	6923      	ldr	r3, [r4, #16]
1a003d7a:	6820      	ldr	r0, [r4, #0]
1a003d7c:	1ac0      	subs	r0, r0, r3
1a003d7e:	6963      	ldr	r3, [r4, #20]
1a003d80:	b2f6      	uxtb	r6, r6
1a003d82:	4283      	cmp	r3, r0
1a003d84:	4637      	mov	r7, r6
1a003d86:	dc04      	bgt.n	1a003d92 <__swbuf_r+0x42>
1a003d88:	4621      	mov	r1, r4
1a003d8a:	4628      	mov	r0, r5
1a003d8c:	f000 f926 	bl	1a003fdc <_fflush_r>
1a003d90:	bb28      	cbnz	r0, 1a003dde <__swbuf_r+0x8e>
1a003d92:	68a3      	ldr	r3, [r4, #8]
1a003d94:	3b01      	subs	r3, #1
1a003d96:	60a3      	str	r3, [r4, #8]
1a003d98:	6823      	ldr	r3, [r4, #0]
1a003d9a:	1c5a      	adds	r2, r3, #1
1a003d9c:	6022      	str	r2, [r4, #0]
1a003d9e:	701e      	strb	r6, [r3, #0]
1a003da0:	6963      	ldr	r3, [r4, #20]
1a003da2:	3001      	adds	r0, #1
1a003da4:	4283      	cmp	r3, r0
1a003da6:	d004      	beq.n	1a003db2 <__swbuf_r+0x62>
1a003da8:	89a3      	ldrh	r3, [r4, #12]
1a003daa:	07db      	lsls	r3, r3, #31
1a003dac:	d519      	bpl.n	1a003de2 <__swbuf_r+0x92>
1a003dae:	2e0a      	cmp	r6, #10
1a003db0:	d117      	bne.n	1a003de2 <__swbuf_r+0x92>
1a003db2:	4621      	mov	r1, r4
1a003db4:	4628      	mov	r0, r5
1a003db6:	f000 f911 	bl	1a003fdc <_fflush_r>
1a003dba:	b190      	cbz	r0, 1a003de2 <__swbuf_r+0x92>
1a003dbc:	e00f      	b.n	1a003dde <__swbuf_r+0x8e>
1a003dbe:	4b0b      	ldr	r3, [pc, #44]	; (1a003dec <__swbuf_r+0x9c>)
1a003dc0:	429c      	cmp	r4, r3
1a003dc2:	d101      	bne.n	1a003dc8 <__swbuf_r+0x78>
1a003dc4:	68ac      	ldr	r4, [r5, #8]
1a003dc6:	e7d0      	b.n	1a003d6a <__swbuf_r+0x1a>
1a003dc8:	4b09      	ldr	r3, [pc, #36]	; (1a003df0 <__swbuf_r+0xa0>)
1a003dca:	429c      	cmp	r4, r3
1a003dcc:	bf08      	it	eq
1a003dce:	68ec      	ldreq	r4, [r5, #12]
1a003dd0:	e7cb      	b.n	1a003d6a <__swbuf_r+0x1a>
1a003dd2:	4621      	mov	r1, r4
1a003dd4:	4628      	mov	r0, r5
1a003dd6:	f000 f80d 	bl	1a003df4 <__swsetup_r>
1a003dda:	2800      	cmp	r0, #0
1a003ddc:	d0cc      	beq.n	1a003d78 <__swbuf_r+0x28>
1a003dde:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003de2:	4638      	mov	r0, r7
1a003de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003de6:	bf00      	nop
1a003de8:	1a004fe8 	.word	0x1a004fe8
1a003dec:	1a005008 	.word	0x1a005008
1a003df0:	1a004fc8 	.word	0x1a004fc8

1a003df4 <__swsetup_r>:
1a003df4:	4b32      	ldr	r3, [pc, #200]	; (1a003ec0 <__swsetup_r+0xcc>)
1a003df6:	b570      	push	{r4, r5, r6, lr}
1a003df8:	681d      	ldr	r5, [r3, #0]
1a003dfa:	4606      	mov	r6, r0
1a003dfc:	460c      	mov	r4, r1
1a003dfe:	b125      	cbz	r5, 1a003e0a <__swsetup_r+0x16>
1a003e00:	69ab      	ldr	r3, [r5, #24]
1a003e02:	b913      	cbnz	r3, 1a003e0a <__swsetup_r+0x16>
1a003e04:	4628      	mov	r0, r5
1a003e06:	f000 f953 	bl	1a0040b0 <__sinit>
1a003e0a:	4b2e      	ldr	r3, [pc, #184]	; (1a003ec4 <__swsetup_r+0xd0>)
1a003e0c:	429c      	cmp	r4, r3
1a003e0e:	d10f      	bne.n	1a003e30 <__swsetup_r+0x3c>
1a003e10:	686c      	ldr	r4, [r5, #4]
1a003e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003e16:	b29a      	uxth	r2, r3
1a003e18:	0715      	lsls	r5, r2, #28
1a003e1a:	d42c      	bmi.n	1a003e76 <__swsetup_r+0x82>
1a003e1c:	06d0      	lsls	r0, r2, #27
1a003e1e:	d411      	bmi.n	1a003e44 <__swsetup_r+0x50>
1a003e20:	2209      	movs	r2, #9
1a003e22:	6032      	str	r2, [r6, #0]
1a003e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003e28:	81a3      	strh	r3, [r4, #12]
1a003e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003e2e:	e03e      	b.n	1a003eae <__swsetup_r+0xba>
1a003e30:	4b25      	ldr	r3, [pc, #148]	; (1a003ec8 <__swsetup_r+0xd4>)
1a003e32:	429c      	cmp	r4, r3
1a003e34:	d101      	bne.n	1a003e3a <__swsetup_r+0x46>
1a003e36:	68ac      	ldr	r4, [r5, #8]
1a003e38:	e7eb      	b.n	1a003e12 <__swsetup_r+0x1e>
1a003e3a:	4b24      	ldr	r3, [pc, #144]	; (1a003ecc <__swsetup_r+0xd8>)
1a003e3c:	429c      	cmp	r4, r3
1a003e3e:	bf08      	it	eq
1a003e40:	68ec      	ldreq	r4, [r5, #12]
1a003e42:	e7e6      	b.n	1a003e12 <__swsetup_r+0x1e>
1a003e44:	0751      	lsls	r1, r2, #29
1a003e46:	d512      	bpl.n	1a003e6e <__swsetup_r+0x7a>
1a003e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003e4a:	b141      	cbz	r1, 1a003e5e <__swsetup_r+0x6a>
1a003e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003e50:	4299      	cmp	r1, r3
1a003e52:	d002      	beq.n	1a003e5a <__swsetup_r+0x66>
1a003e54:	4630      	mov	r0, r6
1a003e56:	f000 fa19 	bl	1a00428c <_free_r>
1a003e5a:	2300      	movs	r3, #0
1a003e5c:	6363      	str	r3, [r4, #52]	; 0x34
1a003e5e:	89a3      	ldrh	r3, [r4, #12]
1a003e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003e64:	81a3      	strh	r3, [r4, #12]
1a003e66:	2300      	movs	r3, #0
1a003e68:	6063      	str	r3, [r4, #4]
1a003e6a:	6923      	ldr	r3, [r4, #16]
1a003e6c:	6023      	str	r3, [r4, #0]
1a003e6e:	89a3      	ldrh	r3, [r4, #12]
1a003e70:	f043 0308 	orr.w	r3, r3, #8
1a003e74:	81a3      	strh	r3, [r4, #12]
1a003e76:	6923      	ldr	r3, [r4, #16]
1a003e78:	b94b      	cbnz	r3, 1a003e8e <__swsetup_r+0x9a>
1a003e7a:	89a3      	ldrh	r3, [r4, #12]
1a003e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003e84:	d003      	beq.n	1a003e8e <__swsetup_r+0x9a>
1a003e86:	4621      	mov	r1, r4
1a003e88:	4630      	mov	r0, r6
1a003e8a:	f000 f9bf 	bl	1a00420c <__smakebuf_r>
1a003e8e:	89a2      	ldrh	r2, [r4, #12]
1a003e90:	f012 0301 	ands.w	r3, r2, #1
1a003e94:	d00c      	beq.n	1a003eb0 <__swsetup_r+0xbc>
1a003e96:	2300      	movs	r3, #0
1a003e98:	60a3      	str	r3, [r4, #8]
1a003e9a:	6963      	ldr	r3, [r4, #20]
1a003e9c:	425b      	negs	r3, r3
1a003e9e:	61a3      	str	r3, [r4, #24]
1a003ea0:	6923      	ldr	r3, [r4, #16]
1a003ea2:	b953      	cbnz	r3, 1a003eba <__swsetup_r+0xc6>
1a003ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003ea8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a003eac:	d1ba      	bne.n	1a003e24 <__swsetup_r+0x30>
1a003eae:	bd70      	pop	{r4, r5, r6, pc}
1a003eb0:	0792      	lsls	r2, r2, #30
1a003eb2:	bf58      	it	pl
1a003eb4:	6963      	ldrpl	r3, [r4, #20]
1a003eb6:	60a3      	str	r3, [r4, #8]
1a003eb8:	e7f2      	b.n	1a003ea0 <__swsetup_r+0xac>
1a003eba:	2000      	movs	r0, #0
1a003ebc:	e7f7      	b.n	1a003eae <__swsetup_r+0xba>
1a003ebe:	bf00      	nop
1a003ec0:	10000120 	.word	0x10000120
1a003ec4:	1a004fe8 	.word	0x1a004fe8
1a003ec8:	1a005008 	.word	0x1a005008
1a003ecc:	1a004fc8 	.word	0x1a004fc8

1a003ed0 <__sflush_r>:
1a003ed0:	898a      	ldrh	r2, [r1, #12]
1a003ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003ed6:	4605      	mov	r5, r0
1a003ed8:	0710      	lsls	r0, r2, #28
1a003eda:	460c      	mov	r4, r1
1a003edc:	d458      	bmi.n	1a003f90 <__sflush_r+0xc0>
1a003ede:	684b      	ldr	r3, [r1, #4]
1a003ee0:	2b00      	cmp	r3, #0
1a003ee2:	dc05      	bgt.n	1a003ef0 <__sflush_r+0x20>
1a003ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003ee6:	2b00      	cmp	r3, #0
1a003ee8:	dc02      	bgt.n	1a003ef0 <__sflush_r+0x20>
1a003eea:	2000      	movs	r0, #0
1a003eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003ef2:	2e00      	cmp	r6, #0
1a003ef4:	d0f9      	beq.n	1a003eea <__sflush_r+0x1a>
1a003ef6:	2300      	movs	r3, #0
1a003ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003efc:	682f      	ldr	r7, [r5, #0]
1a003efe:	6a21      	ldr	r1, [r4, #32]
1a003f00:	602b      	str	r3, [r5, #0]
1a003f02:	d032      	beq.n	1a003f6a <__sflush_r+0x9a>
1a003f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003f06:	89a3      	ldrh	r3, [r4, #12]
1a003f08:	075a      	lsls	r2, r3, #29
1a003f0a:	d505      	bpl.n	1a003f18 <__sflush_r+0x48>
1a003f0c:	6863      	ldr	r3, [r4, #4]
1a003f0e:	1ac0      	subs	r0, r0, r3
1a003f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003f12:	b10b      	cbz	r3, 1a003f18 <__sflush_r+0x48>
1a003f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003f16:	1ac0      	subs	r0, r0, r3
1a003f18:	2300      	movs	r3, #0
1a003f1a:	4602      	mov	r2, r0
1a003f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003f1e:	6a21      	ldr	r1, [r4, #32]
1a003f20:	4628      	mov	r0, r5
1a003f22:	47b0      	blx	r6
1a003f24:	1c43      	adds	r3, r0, #1
1a003f26:	89a3      	ldrh	r3, [r4, #12]
1a003f28:	d106      	bne.n	1a003f38 <__sflush_r+0x68>
1a003f2a:	6829      	ldr	r1, [r5, #0]
1a003f2c:	291d      	cmp	r1, #29
1a003f2e:	d848      	bhi.n	1a003fc2 <__sflush_r+0xf2>
1a003f30:	4a29      	ldr	r2, [pc, #164]	; (1a003fd8 <__sflush_r+0x108>)
1a003f32:	40ca      	lsrs	r2, r1
1a003f34:	07d6      	lsls	r6, r2, #31
1a003f36:	d544      	bpl.n	1a003fc2 <__sflush_r+0xf2>
1a003f38:	2200      	movs	r2, #0
1a003f3a:	6062      	str	r2, [r4, #4]
1a003f3c:	04d9      	lsls	r1, r3, #19
1a003f3e:	6922      	ldr	r2, [r4, #16]
1a003f40:	6022      	str	r2, [r4, #0]
1a003f42:	d504      	bpl.n	1a003f4e <__sflush_r+0x7e>
1a003f44:	1c42      	adds	r2, r0, #1
1a003f46:	d101      	bne.n	1a003f4c <__sflush_r+0x7c>
1a003f48:	682b      	ldr	r3, [r5, #0]
1a003f4a:	b903      	cbnz	r3, 1a003f4e <__sflush_r+0x7e>
1a003f4c:	6560      	str	r0, [r4, #84]	; 0x54
1a003f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003f50:	602f      	str	r7, [r5, #0]
1a003f52:	2900      	cmp	r1, #0
1a003f54:	d0c9      	beq.n	1a003eea <__sflush_r+0x1a>
1a003f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003f5a:	4299      	cmp	r1, r3
1a003f5c:	d002      	beq.n	1a003f64 <__sflush_r+0x94>
1a003f5e:	4628      	mov	r0, r5
1a003f60:	f000 f994 	bl	1a00428c <_free_r>
1a003f64:	2000      	movs	r0, #0
1a003f66:	6360      	str	r0, [r4, #52]	; 0x34
1a003f68:	e7c0      	b.n	1a003eec <__sflush_r+0x1c>
1a003f6a:	2301      	movs	r3, #1
1a003f6c:	4628      	mov	r0, r5
1a003f6e:	47b0      	blx	r6
1a003f70:	1c41      	adds	r1, r0, #1
1a003f72:	d1c8      	bne.n	1a003f06 <__sflush_r+0x36>
1a003f74:	682b      	ldr	r3, [r5, #0]
1a003f76:	2b00      	cmp	r3, #0
1a003f78:	d0c5      	beq.n	1a003f06 <__sflush_r+0x36>
1a003f7a:	2b1d      	cmp	r3, #29
1a003f7c:	d001      	beq.n	1a003f82 <__sflush_r+0xb2>
1a003f7e:	2b16      	cmp	r3, #22
1a003f80:	d101      	bne.n	1a003f86 <__sflush_r+0xb6>
1a003f82:	602f      	str	r7, [r5, #0]
1a003f84:	e7b1      	b.n	1a003eea <__sflush_r+0x1a>
1a003f86:	89a3      	ldrh	r3, [r4, #12]
1a003f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003f8c:	81a3      	strh	r3, [r4, #12]
1a003f8e:	e7ad      	b.n	1a003eec <__sflush_r+0x1c>
1a003f90:	690f      	ldr	r7, [r1, #16]
1a003f92:	2f00      	cmp	r7, #0
1a003f94:	d0a9      	beq.n	1a003eea <__sflush_r+0x1a>
1a003f96:	0793      	lsls	r3, r2, #30
1a003f98:	680e      	ldr	r6, [r1, #0]
1a003f9a:	bf08      	it	eq
1a003f9c:	694b      	ldreq	r3, [r1, #20]
1a003f9e:	600f      	str	r7, [r1, #0]
1a003fa0:	bf18      	it	ne
1a003fa2:	2300      	movne	r3, #0
1a003fa4:	eba6 0807 	sub.w	r8, r6, r7
1a003fa8:	608b      	str	r3, [r1, #8]
1a003faa:	f1b8 0f00 	cmp.w	r8, #0
1a003fae:	dd9c      	ble.n	1a003eea <__sflush_r+0x1a>
1a003fb0:	4643      	mov	r3, r8
1a003fb2:	463a      	mov	r2, r7
1a003fb4:	6a21      	ldr	r1, [r4, #32]
1a003fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003fb8:	4628      	mov	r0, r5
1a003fba:	47b0      	blx	r6
1a003fbc:	2800      	cmp	r0, #0
1a003fbe:	dc06      	bgt.n	1a003fce <__sflush_r+0xfe>
1a003fc0:	89a3      	ldrh	r3, [r4, #12]
1a003fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003fc6:	81a3      	strh	r3, [r4, #12]
1a003fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003fcc:	e78e      	b.n	1a003eec <__sflush_r+0x1c>
1a003fce:	4407      	add	r7, r0
1a003fd0:	eba8 0800 	sub.w	r8, r8, r0
1a003fd4:	e7e9      	b.n	1a003faa <__sflush_r+0xda>
1a003fd6:	bf00      	nop
1a003fd8:	20400001 	.word	0x20400001

1a003fdc <_fflush_r>:
1a003fdc:	b538      	push	{r3, r4, r5, lr}
1a003fde:	690b      	ldr	r3, [r1, #16]
1a003fe0:	4605      	mov	r5, r0
1a003fe2:	460c      	mov	r4, r1
1a003fe4:	b1db      	cbz	r3, 1a00401e <_fflush_r+0x42>
1a003fe6:	b118      	cbz	r0, 1a003ff0 <_fflush_r+0x14>
1a003fe8:	6983      	ldr	r3, [r0, #24]
1a003fea:	b90b      	cbnz	r3, 1a003ff0 <_fflush_r+0x14>
1a003fec:	f000 f860 	bl	1a0040b0 <__sinit>
1a003ff0:	4b0c      	ldr	r3, [pc, #48]	; (1a004024 <_fflush_r+0x48>)
1a003ff2:	429c      	cmp	r4, r3
1a003ff4:	d109      	bne.n	1a00400a <_fflush_r+0x2e>
1a003ff6:	686c      	ldr	r4, [r5, #4]
1a003ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003ffc:	b17b      	cbz	r3, 1a00401e <_fflush_r+0x42>
1a003ffe:	4621      	mov	r1, r4
1a004000:	4628      	mov	r0, r5
1a004002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004006:	f7ff bf63 	b.w	1a003ed0 <__sflush_r>
1a00400a:	4b07      	ldr	r3, [pc, #28]	; (1a004028 <_fflush_r+0x4c>)
1a00400c:	429c      	cmp	r4, r3
1a00400e:	d101      	bne.n	1a004014 <_fflush_r+0x38>
1a004010:	68ac      	ldr	r4, [r5, #8]
1a004012:	e7f1      	b.n	1a003ff8 <_fflush_r+0x1c>
1a004014:	4b05      	ldr	r3, [pc, #20]	; (1a00402c <_fflush_r+0x50>)
1a004016:	429c      	cmp	r4, r3
1a004018:	bf08      	it	eq
1a00401a:	68ec      	ldreq	r4, [r5, #12]
1a00401c:	e7ec      	b.n	1a003ff8 <_fflush_r+0x1c>
1a00401e:	2000      	movs	r0, #0
1a004020:	bd38      	pop	{r3, r4, r5, pc}
1a004022:	bf00      	nop
1a004024:	1a004fe8 	.word	0x1a004fe8
1a004028:	1a005008 	.word	0x1a005008
1a00402c:	1a004fc8 	.word	0x1a004fc8

1a004030 <std>:
1a004030:	2300      	movs	r3, #0
1a004032:	b510      	push	{r4, lr}
1a004034:	4604      	mov	r4, r0
1a004036:	e9c0 3300 	strd	r3, r3, [r0]
1a00403a:	6083      	str	r3, [r0, #8]
1a00403c:	8181      	strh	r1, [r0, #12]
1a00403e:	6643      	str	r3, [r0, #100]	; 0x64
1a004040:	81c2      	strh	r2, [r0, #14]
1a004042:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004046:	6183      	str	r3, [r0, #24]
1a004048:	4619      	mov	r1, r3
1a00404a:	2208      	movs	r2, #8
1a00404c:	305c      	adds	r0, #92	; 0x5c
1a00404e:	f7ff fe5e 	bl	1a003d0e <memset>
1a004052:	4b05      	ldr	r3, [pc, #20]	; (1a004068 <std+0x38>)
1a004054:	6263      	str	r3, [r4, #36]	; 0x24
1a004056:	4b05      	ldr	r3, [pc, #20]	; (1a00406c <std+0x3c>)
1a004058:	62a3      	str	r3, [r4, #40]	; 0x28
1a00405a:	4b05      	ldr	r3, [pc, #20]	; (1a004070 <std+0x40>)
1a00405c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00405e:	4b05      	ldr	r3, [pc, #20]	; (1a004074 <std+0x44>)
1a004060:	6224      	str	r4, [r4, #32]
1a004062:	6323      	str	r3, [r4, #48]	; 0x30
1a004064:	bd10      	pop	{r4, pc}
1a004066:	bf00      	nop
1a004068:	1a00496d 	.word	0x1a00496d
1a00406c:	1a00498f 	.word	0x1a00498f
1a004070:	1a0049c7 	.word	0x1a0049c7
1a004074:	1a0049eb 	.word	0x1a0049eb

1a004078 <_cleanup_r>:
1a004078:	4901      	ldr	r1, [pc, #4]	; (1a004080 <_cleanup_r+0x8>)
1a00407a:	f000 b885 	b.w	1a004188 <_fwalk_reent>
1a00407e:	bf00      	nop
1a004080:	1a003fdd 	.word	0x1a003fdd

1a004084 <__sfmoreglue>:
1a004084:	b570      	push	{r4, r5, r6, lr}
1a004086:	1e4a      	subs	r2, r1, #1
1a004088:	2568      	movs	r5, #104	; 0x68
1a00408a:	4355      	muls	r5, r2
1a00408c:	460e      	mov	r6, r1
1a00408e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004092:	f000 f949 	bl	1a004328 <_malloc_r>
1a004096:	4604      	mov	r4, r0
1a004098:	b140      	cbz	r0, 1a0040ac <__sfmoreglue+0x28>
1a00409a:	2100      	movs	r1, #0
1a00409c:	e9c0 1600 	strd	r1, r6, [r0]
1a0040a0:	300c      	adds	r0, #12
1a0040a2:	60a0      	str	r0, [r4, #8]
1a0040a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0040a8:	f7ff fe31 	bl	1a003d0e <memset>
1a0040ac:	4620      	mov	r0, r4
1a0040ae:	bd70      	pop	{r4, r5, r6, pc}

1a0040b0 <__sinit>:
1a0040b0:	6983      	ldr	r3, [r0, #24]
1a0040b2:	b510      	push	{r4, lr}
1a0040b4:	4604      	mov	r4, r0
1a0040b6:	bb33      	cbnz	r3, 1a004106 <__sinit+0x56>
1a0040b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a0040bc:	6503      	str	r3, [r0, #80]	; 0x50
1a0040be:	4b12      	ldr	r3, [pc, #72]	; (1a004108 <__sinit+0x58>)
1a0040c0:	4a12      	ldr	r2, [pc, #72]	; (1a00410c <__sinit+0x5c>)
1a0040c2:	681b      	ldr	r3, [r3, #0]
1a0040c4:	6282      	str	r2, [r0, #40]	; 0x28
1a0040c6:	4298      	cmp	r0, r3
1a0040c8:	bf04      	itt	eq
1a0040ca:	2301      	moveq	r3, #1
1a0040cc:	6183      	streq	r3, [r0, #24]
1a0040ce:	f000 f81f 	bl	1a004110 <__sfp>
1a0040d2:	6060      	str	r0, [r4, #4]
1a0040d4:	4620      	mov	r0, r4
1a0040d6:	f000 f81b 	bl	1a004110 <__sfp>
1a0040da:	60a0      	str	r0, [r4, #8]
1a0040dc:	4620      	mov	r0, r4
1a0040de:	f000 f817 	bl	1a004110 <__sfp>
1a0040e2:	2200      	movs	r2, #0
1a0040e4:	60e0      	str	r0, [r4, #12]
1a0040e6:	2104      	movs	r1, #4
1a0040e8:	6860      	ldr	r0, [r4, #4]
1a0040ea:	f7ff ffa1 	bl	1a004030 <std>
1a0040ee:	2201      	movs	r2, #1
1a0040f0:	2109      	movs	r1, #9
1a0040f2:	68a0      	ldr	r0, [r4, #8]
1a0040f4:	f7ff ff9c 	bl	1a004030 <std>
1a0040f8:	2202      	movs	r2, #2
1a0040fa:	2112      	movs	r1, #18
1a0040fc:	68e0      	ldr	r0, [r4, #12]
1a0040fe:	f7ff ff97 	bl	1a004030 <std>
1a004102:	2301      	movs	r3, #1
1a004104:	61a3      	str	r3, [r4, #24]
1a004106:	bd10      	pop	{r4, pc}
1a004108:	1a005028 	.word	0x1a005028
1a00410c:	1a004079 	.word	0x1a004079

1a004110 <__sfp>:
1a004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004112:	4b1b      	ldr	r3, [pc, #108]	; (1a004180 <__sfp+0x70>)
1a004114:	681e      	ldr	r6, [r3, #0]
1a004116:	69b3      	ldr	r3, [r6, #24]
1a004118:	4607      	mov	r7, r0
1a00411a:	b913      	cbnz	r3, 1a004122 <__sfp+0x12>
1a00411c:	4630      	mov	r0, r6
1a00411e:	f7ff ffc7 	bl	1a0040b0 <__sinit>
1a004122:	3648      	adds	r6, #72	; 0x48
1a004124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004128:	3b01      	subs	r3, #1
1a00412a:	d503      	bpl.n	1a004134 <__sfp+0x24>
1a00412c:	6833      	ldr	r3, [r6, #0]
1a00412e:	b133      	cbz	r3, 1a00413e <__sfp+0x2e>
1a004130:	6836      	ldr	r6, [r6, #0]
1a004132:	e7f7      	b.n	1a004124 <__sfp+0x14>
1a004134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004138:	b16d      	cbz	r5, 1a004156 <__sfp+0x46>
1a00413a:	3468      	adds	r4, #104	; 0x68
1a00413c:	e7f4      	b.n	1a004128 <__sfp+0x18>
1a00413e:	2104      	movs	r1, #4
1a004140:	4638      	mov	r0, r7
1a004142:	f7ff ff9f 	bl	1a004084 <__sfmoreglue>
1a004146:	6030      	str	r0, [r6, #0]
1a004148:	2800      	cmp	r0, #0
1a00414a:	d1f1      	bne.n	1a004130 <__sfp+0x20>
1a00414c:	230c      	movs	r3, #12
1a00414e:	603b      	str	r3, [r7, #0]
1a004150:	4604      	mov	r4, r0
1a004152:	4620      	mov	r0, r4
1a004154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004156:	4b0b      	ldr	r3, [pc, #44]	; (1a004184 <__sfp+0x74>)
1a004158:	6665      	str	r5, [r4, #100]	; 0x64
1a00415a:	e9c4 5500 	strd	r5, r5, [r4]
1a00415e:	60a5      	str	r5, [r4, #8]
1a004160:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004164:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004168:	2208      	movs	r2, #8
1a00416a:	4629      	mov	r1, r5
1a00416c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004170:	f7ff fdcd 	bl	1a003d0e <memset>
1a004174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a00417c:	e7e9      	b.n	1a004152 <__sfp+0x42>
1a00417e:	bf00      	nop
1a004180:	1a005028 	.word	0x1a005028
1a004184:	ffff0001 	.word	0xffff0001

1a004188 <_fwalk_reent>:
1a004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00418c:	4680      	mov	r8, r0
1a00418e:	4689      	mov	r9, r1
1a004190:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004194:	2600      	movs	r6, #0
1a004196:	b914      	cbnz	r4, 1a00419e <_fwalk_reent+0x16>
1a004198:	4630      	mov	r0, r6
1a00419a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00419e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0041a2:	3f01      	subs	r7, #1
1a0041a4:	d501      	bpl.n	1a0041aa <_fwalk_reent+0x22>
1a0041a6:	6824      	ldr	r4, [r4, #0]
1a0041a8:	e7f5      	b.n	1a004196 <_fwalk_reent+0xe>
1a0041aa:	89ab      	ldrh	r3, [r5, #12]
1a0041ac:	2b01      	cmp	r3, #1
1a0041ae:	d907      	bls.n	1a0041c0 <_fwalk_reent+0x38>
1a0041b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0041b4:	3301      	adds	r3, #1
1a0041b6:	d003      	beq.n	1a0041c0 <_fwalk_reent+0x38>
1a0041b8:	4629      	mov	r1, r5
1a0041ba:	4640      	mov	r0, r8
1a0041bc:	47c8      	blx	r9
1a0041be:	4306      	orrs	r6, r0
1a0041c0:	3568      	adds	r5, #104	; 0x68
1a0041c2:	e7ee      	b.n	1a0041a2 <_fwalk_reent+0x1a>

1a0041c4 <__swhatbuf_r>:
1a0041c4:	b570      	push	{r4, r5, r6, lr}
1a0041c6:	460e      	mov	r6, r1
1a0041c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0041cc:	2900      	cmp	r1, #0
1a0041ce:	b096      	sub	sp, #88	; 0x58
1a0041d0:	4614      	mov	r4, r2
1a0041d2:	461d      	mov	r5, r3
1a0041d4:	da07      	bge.n	1a0041e6 <__swhatbuf_r+0x22>
1a0041d6:	2300      	movs	r3, #0
1a0041d8:	602b      	str	r3, [r5, #0]
1a0041da:	89b3      	ldrh	r3, [r6, #12]
1a0041dc:	061a      	lsls	r2, r3, #24
1a0041de:	d410      	bmi.n	1a004202 <__swhatbuf_r+0x3e>
1a0041e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0041e4:	e00e      	b.n	1a004204 <__swhatbuf_r+0x40>
1a0041e6:	466a      	mov	r2, sp
1a0041e8:	f7fc fa5d 	bl	1a0006a6 <_fstat_r>
1a0041ec:	2800      	cmp	r0, #0
1a0041ee:	dbf2      	blt.n	1a0041d6 <__swhatbuf_r+0x12>
1a0041f0:	9a01      	ldr	r2, [sp, #4]
1a0041f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0041f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0041fa:	425a      	negs	r2, r3
1a0041fc:	415a      	adcs	r2, r3
1a0041fe:	602a      	str	r2, [r5, #0]
1a004200:	e7ee      	b.n	1a0041e0 <__swhatbuf_r+0x1c>
1a004202:	2340      	movs	r3, #64	; 0x40
1a004204:	2000      	movs	r0, #0
1a004206:	6023      	str	r3, [r4, #0]
1a004208:	b016      	add	sp, #88	; 0x58
1a00420a:	bd70      	pop	{r4, r5, r6, pc}

1a00420c <__smakebuf_r>:
1a00420c:	898b      	ldrh	r3, [r1, #12]
1a00420e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004210:	079d      	lsls	r5, r3, #30
1a004212:	4606      	mov	r6, r0
1a004214:	460c      	mov	r4, r1
1a004216:	d507      	bpl.n	1a004228 <__smakebuf_r+0x1c>
1a004218:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00421c:	6023      	str	r3, [r4, #0]
1a00421e:	6123      	str	r3, [r4, #16]
1a004220:	2301      	movs	r3, #1
1a004222:	6163      	str	r3, [r4, #20]
1a004224:	b002      	add	sp, #8
1a004226:	bd70      	pop	{r4, r5, r6, pc}
1a004228:	ab01      	add	r3, sp, #4
1a00422a:	466a      	mov	r2, sp
1a00422c:	f7ff ffca 	bl	1a0041c4 <__swhatbuf_r>
1a004230:	9900      	ldr	r1, [sp, #0]
1a004232:	4605      	mov	r5, r0
1a004234:	4630      	mov	r0, r6
1a004236:	f000 f877 	bl	1a004328 <_malloc_r>
1a00423a:	b948      	cbnz	r0, 1a004250 <__smakebuf_r+0x44>
1a00423c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004240:	059a      	lsls	r2, r3, #22
1a004242:	d4ef      	bmi.n	1a004224 <__smakebuf_r+0x18>
1a004244:	f023 0303 	bic.w	r3, r3, #3
1a004248:	f043 0302 	orr.w	r3, r3, #2
1a00424c:	81a3      	strh	r3, [r4, #12]
1a00424e:	e7e3      	b.n	1a004218 <__smakebuf_r+0xc>
1a004250:	4b0d      	ldr	r3, [pc, #52]	; (1a004288 <__smakebuf_r+0x7c>)
1a004252:	62b3      	str	r3, [r6, #40]	; 0x28
1a004254:	89a3      	ldrh	r3, [r4, #12]
1a004256:	6020      	str	r0, [r4, #0]
1a004258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00425c:	81a3      	strh	r3, [r4, #12]
1a00425e:	9b00      	ldr	r3, [sp, #0]
1a004260:	6163      	str	r3, [r4, #20]
1a004262:	9b01      	ldr	r3, [sp, #4]
1a004264:	6120      	str	r0, [r4, #16]
1a004266:	b15b      	cbz	r3, 1a004280 <__smakebuf_r+0x74>
1a004268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00426c:	4630      	mov	r0, r6
1a00426e:	f7fc fa1f 	bl	1a0006b0 <_isatty_r>
1a004272:	b128      	cbz	r0, 1a004280 <__smakebuf_r+0x74>
1a004274:	89a3      	ldrh	r3, [r4, #12]
1a004276:	f023 0303 	bic.w	r3, r3, #3
1a00427a:	f043 0301 	orr.w	r3, r3, #1
1a00427e:	81a3      	strh	r3, [r4, #12]
1a004280:	89a3      	ldrh	r3, [r4, #12]
1a004282:	431d      	orrs	r5, r3
1a004284:	81a5      	strh	r5, [r4, #12]
1a004286:	e7cd      	b.n	1a004224 <__smakebuf_r+0x18>
1a004288:	1a004079 	.word	0x1a004079

1a00428c <_free_r>:
1a00428c:	b538      	push	{r3, r4, r5, lr}
1a00428e:	4605      	mov	r5, r0
1a004290:	2900      	cmp	r1, #0
1a004292:	d045      	beq.n	1a004320 <_free_r+0x94>
1a004294:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004298:	1f0c      	subs	r4, r1, #4
1a00429a:	2b00      	cmp	r3, #0
1a00429c:	bfb8      	it	lt
1a00429e:	18e4      	addlt	r4, r4, r3
1a0042a0:	f000 fbfe 	bl	1a004aa0 <__malloc_lock>
1a0042a4:	4a1f      	ldr	r2, [pc, #124]	; (1a004324 <_free_r+0x98>)
1a0042a6:	6813      	ldr	r3, [r2, #0]
1a0042a8:	4610      	mov	r0, r2
1a0042aa:	b933      	cbnz	r3, 1a0042ba <_free_r+0x2e>
1a0042ac:	6063      	str	r3, [r4, #4]
1a0042ae:	6014      	str	r4, [r2, #0]
1a0042b0:	4628      	mov	r0, r5
1a0042b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0042b6:	f000 bbf4 	b.w	1a004aa2 <__malloc_unlock>
1a0042ba:	42a3      	cmp	r3, r4
1a0042bc:	d90c      	bls.n	1a0042d8 <_free_r+0x4c>
1a0042be:	6821      	ldr	r1, [r4, #0]
1a0042c0:	1862      	adds	r2, r4, r1
1a0042c2:	4293      	cmp	r3, r2
1a0042c4:	bf04      	itt	eq
1a0042c6:	681a      	ldreq	r2, [r3, #0]
1a0042c8:	685b      	ldreq	r3, [r3, #4]
1a0042ca:	6063      	str	r3, [r4, #4]
1a0042cc:	bf04      	itt	eq
1a0042ce:	1852      	addeq	r2, r2, r1
1a0042d0:	6022      	streq	r2, [r4, #0]
1a0042d2:	6004      	str	r4, [r0, #0]
1a0042d4:	e7ec      	b.n	1a0042b0 <_free_r+0x24>
1a0042d6:	4613      	mov	r3, r2
1a0042d8:	685a      	ldr	r2, [r3, #4]
1a0042da:	b10a      	cbz	r2, 1a0042e0 <_free_r+0x54>
1a0042dc:	42a2      	cmp	r2, r4
1a0042de:	d9fa      	bls.n	1a0042d6 <_free_r+0x4a>
1a0042e0:	6819      	ldr	r1, [r3, #0]
1a0042e2:	1858      	adds	r0, r3, r1
1a0042e4:	42a0      	cmp	r0, r4
1a0042e6:	d10b      	bne.n	1a004300 <_free_r+0x74>
1a0042e8:	6820      	ldr	r0, [r4, #0]
1a0042ea:	4401      	add	r1, r0
1a0042ec:	1858      	adds	r0, r3, r1
1a0042ee:	4282      	cmp	r2, r0
1a0042f0:	6019      	str	r1, [r3, #0]
1a0042f2:	d1dd      	bne.n	1a0042b0 <_free_r+0x24>
1a0042f4:	6810      	ldr	r0, [r2, #0]
1a0042f6:	6852      	ldr	r2, [r2, #4]
1a0042f8:	605a      	str	r2, [r3, #4]
1a0042fa:	4401      	add	r1, r0
1a0042fc:	6019      	str	r1, [r3, #0]
1a0042fe:	e7d7      	b.n	1a0042b0 <_free_r+0x24>
1a004300:	d902      	bls.n	1a004308 <_free_r+0x7c>
1a004302:	230c      	movs	r3, #12
1a004304:	602b      	str	r3, [r5, #0]
1a004306:	e7d3      	b.n	1a0042b0 <_free_r+0x24>
1a004308:	6820      	ldr	r0, [r4, #0]
1a00430a:	1821      	adds	r1, r4, r0
1a00430c:	428a      	cmp	r2, r1
1a00430e:	bf04      	itt	eq
1a004310:	6811      	ldreq	r1, [r2, #0]
1a004312:	6852      	ldreq	r2, [r2, #4]
1a004314:	6062      	str	r2, [r4, #4]
1a004316:	bf04      	itt	eq
1a004318:	1809      	addeq	r1, r1, r0
1a00431a:	6021      	streq	r1, [r4, #0]
1a00431c:	605c      	str	r4, [r3, #4]
1a00431e:	e7c7      	b.n	1a0042b0 <_free_r+0x24>
1a004320:	bd38      	pop	{r3, r4, r5, pc}
1a004322:	bf00      	nop
1a004324:	10002c18 	.word	0x10002c18

1a004328 <_malloc_r>:
1a004328:	b570      	push	{r4, r5, r6, lr}
1a00432a:	1ccd      	adds	r5, r1, #3
1a00432c:	f025 0503 	bic.w	r5, r5, #3
1a004330:	3508      	adds	r5, #8
1a004332:	2d0c      	cmp	r5, #12
1a004334:	bf38      	it	cc
1a004336:	250c      	movcc	r5, #12
1a004338:	2d00      	cmp	r5, #0
1a00433a:	4606      	mov	r6, r0
1a00433c:	db01      	blt.n	1a004342 <_malloc_r+0x1a>
1a00433e:	42a9      	cmp	r1, r5
1a004340:	d903      	bls.n	1a00434a <_malloc_r+0x22>
1a004342:	230c      	movs	r3, #12
1a004344:	6033      	str	r3, [r6, #0]
1a004346:	2000      	movs	r0, #0
1a004348:	bd70      	pop	{r4, r5, r6, pc}
1a00434a:	f000 fba9 	bl	1a004aa0 <__malloc_lock>
1a00434e:	4a21      	ldr	r2, [pc, #132]	; (1a0043d4 <_malloc_r+0xac>)
1a004350:	6814      	ldr	r4, [r2, #0]
1a004352:	4621      	mov	r1, r4
1a004354:	b991      	cbnz	r1, 1a00437c <_malloc_r+0x54>
1a004356:	4c20      	ldr	r4, [pc, #128]	; (1a0043d8 <_malloc_r+0xb0>)
1a004358:	6823      	ldr	r3, [r4, #0]
1a00435a:	b91b      	cbnz	r3, 1a004364 <_malloc_r+0x3c>
1a00435c:	4630      	mov	r0, r6
1a00435e:	f7fc f9f1 	bl	1a000744 <_sbrk_r>
1a004362:	6020      	str	r0, [r4, #0]
1a004364:	4629      	mov	r1, r5
1a004366:	4630      	mov	r0, r6
1a004368:	f7fc f9ec 	bl	1a000744 <_sbrk_r>
1a00436c:	1c43      	adds	r3, r0, #1
1a00436e:	d124      	bne.n	1a0043ba <_malloc_r+0x92>
1a004370:	230c      	movs	r3, #12
1a004372:	6033      	str	r3, [r6, #0]
1a004374:	4630      	mov	r0, r6
1a004376:	f000 fb94 	bl	1a004aa2 <__malloc_unlock>
1a00437a:	e7e4      	b.n	1a004346 <_malloc_r+0x1e>
1a00437c:	680b      	ldr	r3, [r1, #0]
1a00437e:	1b5b      	subs	r3, r3, r5
1a004380:	d418      	bmi.n	1a0043b4 <_malloc_r+0x8c>
1a004382:	2b0b      	cmp	r3, #11
1a004384:	d90f      	bls.n	1a0043a6 <_malloc_r+0x7e>
1a004386:	600b      	str	r3, [r1, #0]
1a004388:	50cd      	str	r5, [r1, r3]
1a00438a:	18cc      	adds	r4, r1, r3
1a00438c:	4630      	mov	r0, r6
1a00438e:	f000 fb88 	bl	1a004aa2 <__malloc_unlock>
1a004392:	f104 000b 	add.w	r0, r4, #11
1a004396:	1d23      	adds	r3, r4, #4
1a004398:	f020 0007 	bic.w	r0, r0, #7
1a00439c:	1ac3      	subs	r3, r0, r3
1a00439e:	d0d3      	beq.n	1a004348 <_malloc_r+0x20>
1a0043a0:	425a      	negs	r2, r3
1a0043a2:	50e2      	str	r2, [r4, r3]
1a0043a4:	e7d0      	b.n	1a004348 <_malloc_r+0x20>
1a0043a6:	428c      	cmp	r4, r1
1a0043a8:	684b      	ldr	r3, [r1, #4]
1a0043aa:	bf16      	itet	ne
1a0043ac:	6063      	strne	r3, [r4, #4]
1a0043ae:	6013      	streq	r3, [r2, #0]
1a0043b0:	460c      	movne	r4, r1
1a0043b2:	e7eb      	b.n	1a00438c <_malloc_r+0x64>
1a0043b4:	460c      	mov	r4, r1
1a0043b6:	6849      	ldr	r1, [r1, #4]
1a0043b8:	e7cc      	b.n	1a004354 <_malloc_r+0x2c>
1a0043ba:	1cc4      	adds	r4, r0, #3
1a0043bc:	f024 0403 	bic.w	r4, r4, #3
1a0043c0:	42a0      	cmp	r0, r4
1a0043c2:	d005      	beq.n	1a0043d0 <_malloc_r+0xa8>
1a0043c4:	1a21      	subs	r1, r4, r0
1a0043c6:	4630      	mov	r0, r6
1a0043c8:	f7fc f9bc 	bl	1a000744 <_sbrk_r>
1a0043cc:	3001      	adds	r0, #1
1a0043ce:	d0cf      	beq.n	1a004370 <_malloc_r+0x48>
1a0043d0:	6025      	str	r5, [r4, #0]
1a0043d2:	e7db      	b.n	1a00438c <_malloc_r+0x64>
1a0043d4:	10002c18 	.word	0x10002c18
1a0043d8:	10002c1c 	.word	0x10002c1c

1a0043dc <__sfputc_r>:
1a0043dc:	6893      	ldr	r3, [r2, #8]
1a0043de:	3b01      	subs	r3, #1
1a0043e0:	2b00      	cmp	r3, #0
1a0043e2:	b410      	push	{r4}
1a0043e4:	6093      	str	r3, [r2, #8]
1a0043e6:	da08      	bge.n	1a0043fa <__sfputc_r+0x1e>
1a0043e8:	6994      	ldr	r4, [r2, #24]
1a0043ea:	42a3      	cmp	r3, r4
1a0043ec:	db01      	blt.n	1a0043f2 <__sfputc_r+0x16>
1a0043ee:	290a      	cmp	r1, #10
1a0043f0:	d103      	bne.n	1a0043fa <__sfputc_r+0x1e>
1a0043f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0043f6:	f7ff bcab 	b.w	1a003d50 <__swbuf_r>
1a0043fa:	6813      	ldr	r3, [r2, #0]
1a0043fc:	1c58      	adds	r0, r3, #1
1a0043fe:	6010      	str	r0, [r2, #0]
1a004400:	7019      	strb	r1, [r3, #0]
1a004402:	4608      	mov	r0, r1
1a004404:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004408:	4770      	bx	lr

1a00440a <__sfputs_r>:
1a00440a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00440c:	4606      	mov	r6, r0
1a00440e:	460f      	mov	r7, r1
1a004410:	4614      	mov	r4, r2
1a004412:	18d5      	adds	r5, r2, r3
1a004414:	42ac      	cmp	r4, r5
1a004416:	d101      	bne.n	1a00441c <__sfputs_r+0x12>
1a004418:	2000      	movs	r0, #0
1a00441a:	e007      	b.n	1a00442c <__sfputs_r+0x22>
1a00441c:	463a      	mov	r2, r7
1a00441e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004422:	4630      	mov	r0, r6
1a004424:	f7ff ffda 	bl	1a0043dc <__sfputc_r>
1a004428:	1c43      	adds	r3, r0, #1
1a00442a:	d1f3      	bne.n	1a004414 <__sfputs_r+0xa>
1a00442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00442e:	Address 0x000000001a00442e is out of bounds.


1a004430 <_vfiprintf_r>:
1a004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004434:	460c      	mov	r4, r1
1a004436:	b09d      	sub	sp, #116	; 0x74
1a004438:	4617      	mov	r7, r2
1a00443a:	461d      	mov	r5, r3
1a00443c:	4606      	mov	r6, r0
1a00443e:	b118      	cbz	r0, 1a004448 <_vfiprintf_r+0x18>
1a004440:	6983      	ldr	r3, [r0, #24]
1a004442:	b90b      	cbnz	r3, 1a004448 <_vfiprintf_r+0x18>
1a004444:	f7ff fe34 	bl	1a0040b0 <__sinit>
1a004448:	4b7c      	ldr	r3, [pc, #496]	; (1a00463c <_vfiprintf_r+0x20c>)
1a00444a:	429c      	cmp	r4, r3
1a00444c:	d158      	bne.n	1a004500 <_vfiprintf_r+0xd0>
1a00444e:	6874      	ldr	r4, [r6, #4]
1a004450:	89a3      	ldrh	r3, [r4, #12]
1a004452:	0718      	lsls	r0, r3, #28
1a004454:	d55e      	bpl.n	1a004514 <_vfiprintf_r+0xe4>
1a004456:	6923      	ldr	r3, [r4, #16]
1a004458:	2b00      	cmp	r3, #0
1a00445a:	d05b      	beq.n	1a004514 <_vfiprintf_r+0xe4>
1a00445c:	2300      	movs	r3, #0
1a00445e:	9309      	str	r3, [sp, #36]	; 0x24
1a004460:	2320      	movs	r3, #32
1a004462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004466:	2330      	movs	r3, #48	; 0x30
1a004468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00446c:	9503      	str	r5, [sp, #12]
1a00446e:	f04f 0b01 	mov.w	fp, #1
1a004472:	46b8      	mov	r8, r7
1a004474:	4645      	mov	r5, r8
1a004476:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00447a:	b10b      	cbz	r3, 1a004480 <_vfiprintf_r+0x50>
1a00447c:	2b25      	cmp	r3, #37	; 0x25
1a00447e:	d154      	bne.n	1a00452a <_vfiprintf_r+0xfa>
1a004480:	ebb8 0a07 	subs.w	sl, r8, r7
1a004484:	d00b      	beq.n	1a00449e <_vfiprintf_r+0x6e>
1a004486:	4653      	mov	r3, sl
1a004488:	463a      	mov	r2, r7
1a00448a:	4621      	mov	r1, r4
1a00448c:	4630      	mov	r0, r6
1a00448e:	f7ff ffbc 	bl	1a00440a <__sfputs_r>
1a004492:	3001      	adds	r0, #1
1a004494:	f000 80c2 	beq.w	1a00461c <_vfiprintf_r+0x1ec>
1a004498:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00449a:	4453      	add	r3, sl
1a00449c:	9309      	str	r3, [sp, #36]	; 0x24
1a00449e:	f898 3000 	ldrb.w	r3, [r8]
1a0044a2:	2b00      	cmp	r3, #0
1a0044a4:	f000 80ba 	beq.w	1a00461c <_vfiprintf_r+0x1ec>
1a0044a8:	2300      	movs	r3, #0
1a0044aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0044ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0044b2:	9304      	str	r3, [sp, #16]
1a0044b4:	9307      	str	r3, [sp, #28]
1a0044b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0044ba:	931a      	str	r3, [sp, #104]	; 0x68
1a0044bc:	46a8      	mov	r8, r5
1a0044be:	2205      	movs	r2, #5
1a0044c0:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0044c4:	485e      	ldr	r0, [pc, #376]	; (1a004640 <_vfiprintf_r+0x210>)
1a0044c6:	f000 fa9b 	bl	1a004a00 <memchr>
1a0044ca:	9b04      	ldr	r3, [sp, #16]
1a0044cc:	bb78      	cbnz	r0, 1a00452e <_vfiprintf_r+0xfe>
1a0044ce:	06d9      	lsls	r1, r3, #27
1a0044d0:	bf44      	itt	mi
1a0044d2:	2220      	movmi	r2, #32
1a0044d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0044d8:	071a      	lsls	r2, r3, #28
1a0044da:	bf44      	itt	mi
1a0044dc:	222b      	movmi	r2, #43	; 0x2b
1a0044de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0044e2:	782a      	ldrb	r2, [r5, #0]
1a0044e4:	2a2a      	cmp	r2, #42	; 0x2a
1a0044e6:	d02a      	beq.n	1a00453e <_vfiprintf_r+0x10e>
1a0044e8:	9a07      	ldr	r2, [sp, #28]
1a0044ea:	46a8      	mov	r8, r5
1a0044ec:	2000      	movs	r0, #0
1a0044ee:	250a      	movs	r5, #10
1a0044f0:	4641      	mov	r1, r8
1a0044f2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0044f6:	3b30      	subs	r3, #48	; 0x30
1a0044f8:	2b09      	cmp	r3, #9
1a0044fa:	d969      	bls.n	1a0045d0 <_vfiprintf_r+0x1a0>
1a0044fc:	b360      	cbz	r0, 1a004558 <_vfiprintf_r+0x128>
1a0044fe:	e024      	b.n	1a00454a <_vfiprintf_r+0x11a>
1a004500:	4b50      	ldr	r3, [pc, #320]	; (1a004644 <_vfiprintf_r+0x214>)
1a004502:	429c      	cmp	r4, r3
1a004504:	d101      	bne.n	1a00450a <_vfiprintf_r+0xda>
1a004506:	68b4      	ldr	r4, [r6, #8]
1a004508:	e7a2      	b.n	1a004450 <_vfiprintf_r+0x20>
1a00450a:	4b4f      	ldr	r3, [pc, #316]	; (1a004648 <_vfiprintf_r+0x218>)
1a00450c:	429c      	cmp	r4, r3
1a00450e:	bf08      	it	eq
1a004510:	68f4      	ldreq	r4, [r6, #12]
1a004512:	e79d      	b.n	1a004450 <_vfiprintf_r+0x20>
1a004514:	4621      	mov	r1, r4
1a004516:	4630      	mov	r0, r6
1a004518:	f7ff fc6c 	bl	1a003df4 <__swsetup_r>
1a00451c:	2800      	cmp	r0, #0
1a00451e:	d09d      	beq.n	1a00445c <_vfiprintf_r+0x2c>
1a004520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004524:	b01d      	add	sp, #116	; 0x74
1a004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00452a:	46a8      	mov	r8, r5
1a00452c:	e7a2      	b.n	1a004474 <_vfiprintf_r+0x44>
1a00452e:	4a44      	ldr	r2, [pc, #272]	; (1a004640 <_vfiprintf_r+0x210>)
1a004530:	1a80      	subs	r0, r0, r2
1a004532:	fa0b f000 	lsl.w	r0, fp, r0
1a004536:	4318      	orrs	r0, r3
1a004538:	9004      	str	r0, [sp, #16]
1a00453a:	4645      	mov	r5, r8
1a00453c:	e7be      	b.n	1a0044bc <_vfiprintf_r+0x8c>
1a00453e:	9a03      	ldr	r2, [sp, #12]
1a004540:	1d11      	adds	r1, r2, #4
1a004542:	6812      	ldr	r2, [r2, #0]
1a004544:	9103      	str	r1, [sp, #12]
1a004546:	2a00      	cmp	r2, #0
1a004548:	db01      	blt.n	1a00454e <_vfiprintf_r+0x11e>
1a00454a:	9207      	str	r2, [sp, #28]
1a00454c:	e004      	b.n	1a004558 <_vfiprintf_r+0x128>
1a00454e:	4252      	negs	r2, r2
1a004550:	f043 0302 	orr.w	r3, r3, #2
1a004554:	9207      	str	r2, [sp, #28]
1a004556:	9304      	str	r3, [sp, #16]
1a004558:	f898 3000 	ldrb.w	r3, [r8]
1a00455c:	2b2e      	cmp	r3, #46	; 0x2e
1a00455e:	d10e      	bne.n	1a00457e <_vfiprintf_r+0x14e>
1a004560:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004564:	2b2a      	cmp	r3, #42	; 0x2a
1a004566:	d138      	bne.n	1a0045da <_vfiprintf_r+0x1aa>
1a004568:	9b03      	ldr	r3, [sp, #12]
1a00456a:	1d1a      	adds	r2, r3, #4
1a00456c:	681b      	ldr	r3, [r3, #0]
1a00456e:	9203      	str	r2, [sp, #12]
1a004570:	2b00      	cmp	r3, #0
1a004572:	bfb8      	it	lt
1a004574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004578:	f108 0802 	add.w	r8, r8, #2
1a00457c:	9305      	str	r3, [sp, #20]
1a00457e:	4d33      	ldr	r5, [pc, #204]	; (1a00464c <_vfiprintf_r+0x21c>)
1a004580:	f898 1000 	ldrb.w	r1, [r8]
1a004584:	2203      	movs	r2, #3
1a004586:	4628      	mov	r0, r5
1a004588:	f000 fa3a 	bl	1a004a00 <memchr>
1a00458c:	b140      	cbz	r0, 1a0045a0 <_vfiprintf_r+0x170>
1a00458e:	2340      	movs	r3, #64	; 0x40
1a004590:	1b40      	subs	r0, r0, r5
1a004592:	fa03 f000 	lsl.w	r0, r3, r0
1a004596:	9b04      	ldr	r3, [sp, #16]
1a004598:	4303      	orrs	r3, r0
1a00459a:	f108 0801 	add.w	r8, r8, #1
1a00459e:	9304      	str	r3, [sp, #16]
1a0045a0:	f898 1000 	ldrb.w	r1, [r8]
1a0045a4:	482a      	ldr	r0, [pc, #168]	; (1a004650 <_vfiprintf_r+0x220>)
1a0045a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0045aa:	2206      	movs	r2, #6
1a0045ac:	f108 0701 	add.w	r7, r8, #1
1a0045b0:	f000 fa26 	bl	1a004a00 <memchr>
1a0045b4:	2800      	cmp	r0, #0
1a0045b6:	d037      	beq.n	1a004628 <_vfiprintf_r+0x1f8>
1a0045b8:	4b26      	ldr	r3, [pc, #152]	; (1a004654 <_vfiprintf_r+0x224>)
1a0045ba:	bb1b      	cbnz	r3, 1a004604 <_vfiprintf_r+0x1d4>
1a0045bc:	9b03      	ldr	r3, [sp, #12]
1a0045be:	3307      	adds	r3, #7
1a0045c0:	f023 0307 	bic.w	r3, r3, #7
1a0045c4:	3308      	adds	r3, #8
1a0045c6:	9303      	str	r3, [sp, #12]
1a0045c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0045ca:	444b      	add	r3, r9
1a0045cc:	9309      	str	r3, [sp, #36]	; 0x24
1a0045ce:	e750      	b.n	1a004472 <_vfiprintf_r+0x42>
1a0045d0:	fb05 3202 	mla	r2, r5, r2, r3
1a0045d4:	2001      	movs	r0, #1
1a0045d6:	4688      	mov	r8, r1
1a0045d8:	e78a      	b.n	1a0044f0 <_vfiprintf_r+0xc0>
1a0045da:	2300      	movs	r3, #0
1a0045dc:	f108 0801 	add.w	r8, r8, #1
1a0045e0:	9305      	str	r3, [sp, #20]
1a0045e2:	4619      	mov	r1, r3
1a0045e4:	250a      	movs	r5, #10
1a0045e6:	4640      	mov	r0, r8
1a0045e8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0045ec:	3a30      	subs	r2, #48	; 0x30
1a0045ee:	2a09      	cmp	r2, #9
1a0045f0:	d903      	bls.n	1a0045fa <_vfiprintf_r+0x1ca>
1a0045f2:	2b00      	cmp	r3, #0
1a0045f4:	d0c3      	beq.n	1a00457e <_vfiprintf_r+0x14e>
1a0045f6:	9105      	str	r1, [sp, #20]
1a0045f8:	e7c1      	b.n	1a00457e <_vfiprintf_r+0x14e>
1a0045fa:	fb05 2101 	mla	r1, r5, r1, r2
1a0045fe:	2301      	movs	r3, #1
1a004600:	4680      	mov	r8, r0
1a004602:	e7f0      	b.n	1a0045e6 <_vfiprintf_r+0x1b6>
1a004604:	ab03      	add	r3, sp, #12
1a004606:	9300      	str	r3, [sp, #0]
1a004608:	4622      	mov	r2, r4
1a00460a:	4b13      	ldr	r3, [pc, #76]	; (1a004658 <_vfiprintf_r+0x228>)
1a00460c:	a904      	add	r1, sp, #16
1a00460e:	4630      	mov	r0, r6
1a004610:	f3af 8000 	nop.w
1a004614:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004618:	4681      	mov	r9, r0
1a00461a:	d1d5      	bne.n	1a0045c8 <_vfiprintf_r+0x198>
1a00461c:	89a3      	ldrh	r3, [r4, #12]
1a00461e:	065b      	lsls	r3, r3, #25
1a004620:	f53f af7e 	bmi.w	1a004520 <_vfiprintf_r+0xf0>
1a004624:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004626:	e77d      	b.n	1a004524 <_vfiprintf_r+0xf4>
1a004628:	ab03      	add	r3, sp, #12
1a00462a:	9300      	str	r3, [sp, #0]
1a00462c:	4622      	mov	r2, r4
1a00462e:	4b0a      	ldr	r3, [pc, #40]	; (1a004658 <_vfiprintf_r+0x228>)
1a004630:	a904      	add	r1, sp, #16
1a004632:	4630      	mov	r0, r6
1a004634:	f000 f888 	bl	1a004748 <_printf_i>
1a004638:	e7ec      	b.n	1a004614 <_vfiprintf_r+0x1e4>
1a00463a:	bf00      	nop
1a00463c:	1a004fe8 	.word	0x1a004fe8
1a004640:	1a00502c 	.word	0x1a00502c
1a004644:	1a005008 	.word	0x1a005008
1a004648:	1a004fc8 	.word	0x1a004fc8
1a00464c:	1a005032 	.word	0x1a005032
1a004650:	1a005036 	.word	0x1a005036
1a004654:	00000000 	.word	0x00000000
1a004658:	1a00440b 	.word	0x1a00440b

1a00465c <_printf_common>:
1a00465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004660:	4691      	mov	r9, r2
1a004662:	461f      	mov	r7, r3
1a004664:	688a      	ldr	r2, [r1, #8]
1a004666:	690b      	ldr	r3, [r1, #16]
1a004668:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00466c:	4293      	cmp	r3, r2
1a00466e:	bfb8      	it	lt
1a004670:	4613      	movlt	r3, r2
1a004672:	f8c9 3000 	str.w	r3, [r9]
1a004676:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00467a:	4606      	mov	r6, r0
1a00467c:	460c      	mov	r4, r1
1a00467e:	b112      	cbz	r2, 1a004686 <_printf_common+0x2a>
1a004680:	3301      	adds	r3, #1
1a004682:	f8c9 3000 	str.w	r3, [r9]
1a004686:	6823      	ldr	r3, [r4, #0]
1a004688:	0699      	lsls	r1, r3, #26
1a00468a:	bf42      	ittt	mi
1a00468c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004690:	3302      	addmi	r3, #2
1a004692:	f8c9 3000 	strmi.w	r3, [r9]
1a004696:	6825      	ldr	r5, [r4, #0]
1a004698:	f015 0506 	ands.w	r5, r5, #6
1a00469c:	d107      	bne.n	1a0046ae <_printf_common+0x52>
1a00469e:	f104 0a19 	add.w	sl, r4, #25
1a0046a2:	68e3      	ldr	r3, [r4, #12]
1a0046a4:	f8d9 2000 	ldr.w	r2, [r9]
1a0046a8:	1a9b      	subs	r3, r3, r2
1a0046aa:	42ab      	cmp	r3, r5
1a0046ac:	dc28      	bgt.n	1a004700 <_printf_common+0xa4>
1a0046ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0046b2:	6822      	ldr	r2, [r4, #0]
1a0046b4:	3300      	adds	r3, #0
1a0046b6:	bf18      	it	ne
1a0046b8:	2301      	movne	r3, #1
1a0046ba:	0692      	lsls	r2, r2, #26
1a0046bc:	d42d      	bmi.n	1a00471a <_printf_common+0xbe>
1a0046be:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0046c2:	4639      	mov	r1, r7
1a0046c4:	4630      	mov	r0, r6
1a0046c6:	47c0      	blx	r8
1a0046c8:	3001      	adds	r0, #1
1a0046ca:	d020      	beq.n	1a00470e <_printf_common+0xb2>
1a0046cc:	6823      	ldr	r3, [r4, #0]
1a0046ce:	68e5      	ldr	r5, [r4, #12]
1a0046d0:	f8d9 2000 	ldr.w	r2, [r9]
1a0046d4:	f003 0306 	and.w	r3, r3, #6
1a0046d8:	2b04      	cmp	r3, #4
1a0046da:	bf08      	it	eq
1a0046dc:	1aad      	subeq	r5, r5, r2
1a0046de:	68a3      	ldr	r3, [r4, #8]
1a0046e0:	6922      	ldr	r2, [r4, #16]
1a0046e2:	bf0c      	ite	eq
1a0046e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0046e8:	2500      	movne	r5, #0
1a0046ea:	4293      	cmp	r3, r2
1a0046ec:	bfc4      	itt	gt
1a0046ee:	1a9b      	subgt	r3, r3, r2
1a0046f0:	18ed      	addgt	r5, r5, r3
1a0046f2:	f04f 0900 	mov.w	r9, #0
1a0046f6:	341a      	adds	r4, #26
1a0046f8:	454d      	cmp	r5, r9
1a0046fa:	d11a      	bne.n	1a004732 <_printf_common+0xd6>
1a0046fc:	2000      	movs	r0, #0
1a0046fe:	e008      	b.n	1a004712 <_printf_common+0xb6>
1a004700:	2301      	movs	r3, #1
1a004702:	4652      	mov	r2, sl
1a004704:	4639      	mov	r1, r7
1a004706:	4630      	mov	r0, r6
1a004708:	47c0      	blx	r8
1a00470a:	3001      	adds	r0, #1
1a00470c:	d103      	bne.n	1a004716 <_printf_common+0xba>
1a00470e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004716:	3501      	adds	r5, #1
1a004718:	e7c3      	b.n	1a0046a2 <_printf_common+0x46>
1a00471a:	18e1      	adds	r1, r4, r3
1a00471c:	1c5a      	adds	r2, r3, #1
1a00471e:	2030      	movs	r0, #48	; 0x30
1a004720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004724:	4422      	add	r2, r4
1a004726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00472a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00472e:	3302      	adds	r3, #2
1a004730:	e7c5      	b.n	1a0046be <_printf_common+0x62>
1a004732:	2301      	movs	r3, #1
1a004734:	4622      	mov	r2, r4
1a004736:	4639      	mov	r1, r7
1a004738:	4630      	mov	r0, r6
1a00473a:	47c0      	blx	r8
1a00473c:	3001      	adds	r0, #1
1a00473e:	d0e6      	beq.n	1a00470e <_printf_common+0xb2>
1a004740:	f109 0901 	add.w	r9, r9, #1
1a004744:	e7d8      	b.n	1a0046f8 <_printf_common+0x9c>
1a004746:	Address 0x000000001a004746 is out of bounds.


1a004748 <_printf_i>:
1a004748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00474c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a004750:	460c      	mov	r4, r1
1a004752:	7e09      	ldrb	r1, [r1, #24]
1a004754:	b085      	sub	sp, #20
1a004756:	296e      	cmp	r1, #110	; 0x6e
1a004758:	4617      	mov	r7, r2
1a00475a:	4606      	mov	r6, r0
1a00475c:	4698      	mov	r8, r3
1a00475e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004760:	f000 80b3 	beq.w	1a0048ca <_printf_i+0x182>
1a004764:	d822      	bhi.n	1a0047ac <_printf_i+0x64>
1a004766:	2963      	cmp	r1, #99	; 0x63
1a004768:	d036      	beq.n	1a0047d8 <_printf_i+0x90>
1a00476a:	d80a      	bhi.n	1a004782 <_printf_i+0x3a>
1a00476c:	2900      	cmp	r1, #0
1a00476e:	f000 80b9 	beq.w	1a0048e4 <_printf_i+0x19c>
1a004772:	2958      	cmp	r1, #88	; 0x58
1a004774:	f000 8083 	beq.w	1a00487e <_printf_i+0x136>
1a004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00477c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004780:	e032      	b.n	1a0047e8 <_printf_i+0xa0>
1a004782:	2964      	cmp	r1, #100	; 0x64
1a004784:	d001      	beq.n	1a00478a <_printf_i+0x42>
1a004786:	2969      	cmp	r1, #105	; 0x69
1a004788:	d1f6      	bne.n	1a004778 <_printf_i+0x30>
1a00478a:	6820      	ldr	r0, [r4, #0]
1a00478c:	6813      	ldr	r3, [r2, #0]
1a00478e:	0605      	lsls	r5, r0, #24
1a004790:	f103 0104 	add.w	r1, r3, #4
1a004794:	d52a      	bpl.n	1a0047ec <_printf_i+0xa4>
1a004796:	681b      	ldr	r3, [r3, #0]
1a004798:	6011      	str	r1, [r2, #0]
1a00479a:	2b00      	cmp	r3, #0
1a00479c:	da03      	bge.n	1a0047a6 <_printf_i+0x5e>
1a00479e:	222d      	movs	r2, #45	; 0x2d
1a0047a0:	425b      	negs	r3, r3
1a0047a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0047a6:	486f      	ldr	r0, [pc, #444]	; (1a004964 <_printf_i+0x21c>)
1a0047a8:	220a      	movs	r2, #10
1a0047aa:	e039      	b.n	1a004820 <_printf_i+0xd8>
1a0047ac:	2973      	cmp	r1, #115	; 0x73
1a0047ae:	f000 809d 	beq.w	1a0048ec <_printf_i+0x1a4>
1a0047b2:	d808      	bhi.n	1a0047c6 <_printf_i+0x7e>
1a0047b4:	296f      	cmp	r1, #111	; 0x6f
1a0047b6:	d020      	beq.n	1a0047fa <_printf_i+0xb2>
1a0047b8:	2970      	cmp	r1, #112	; 0x70
1a0047ba:	d1dd      	bne.n	1a004778 <_printf_i+0x30>
1a0047bc:	6823      	ldr	r3, [r4, #0]
1a0047be:	f043 0320 	orr.w	r3, r3, #32
1a0047c2:	6023      	str	r3, [r4, #0]
1a0047c4:	e003      	b.n	1a0047ce <_printf_i+0x86>
1a0047c6:	2975      	cmp	r1, #117	; 0x75
1a0047c8:	d017      	beq.n	1a0047fa <_printf_i+0xb2>
1a0047ca:	2978      	cmp	r1, #120	; 0x78
1a0047cc:	d1d4      	bne.n	1a004778 <_printf_i+0x30>
1a0047ce:	2378      	movs	r3, #120	; 0x78
1a0047d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0047d4:	4864      	ldr	r0, [pc, #400]	; (1a004968 <_printf_i+0x220>)
1a0047d6:	e055      	b.n	1a004884 <_printf_i+0x13c>
1a0047d8:	6813      	ldr	r3, [r2, #0]
1a0047da:	1d19      	adds	r1, r3, #4
1a0047dc:	681b      	ldr	r3, [r3, #0]
1a0047de:	6011      	str	r1, [r2, #0]
1a0047e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0047e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0047e8:	2301      	movs	r3, #1
1a0047ea:	e08c      	b.n	1a004906 <_printf_i+0x1be>
1a0047ec:	681b      	ldr	r3, [r3, #0]
1a0047ee:	6011      	str	r1, [r2, #0]
1a0047f0:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0047f4:	bf18      	it	ne
1a0047f6:	b21b      	sxthne	r3, r3
1a0047f8:	e7cf      	b.n	1a00479a <_printf_i+0x52>
1a0047fa:	6813      	ldr	r3, [r2, #0]
1a0047fc:	6825      	ldr	r5, [r4, #0]
1a0047fe:	1d18      	adds	r0, r3, #4
1a004800:	6010      	str	r0, [r2, #0]
1a004802:	0628      	lsls	r0, r5, #24
1a004804:	d501      	bpl.n	1a00480a <_printf_i+0xc2>
1a004806:	681b      	ldr	r3, [r3, #0]
1a004808:	e002      	b.n	1a004810 <_printf_i+0xc8>
1a00480a:	0668      	lsls	r0, r5, #25
1a00480c:	d5fb      	bpl.n	1a004806 <_printf_i+0xbe>
1a00480e:	881b      	ldrh	r3, [r3, #0]
1a004810:	4854      	ldr	r0, [pc, #336]	; (1a004964 <_printf_i+0x21c>)
1a004812:	296f      	cmp	r1, #111	; 0x6f
1a004814:	bf14      	ite	ne
1a004816:	220a      	movne	r2, #10
1a004818:	2208      	moveq	r2, #8
1a00481a:	2100      	movs	r1, #0
1a00481c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004820:	6865      	ldr	r5, [r4, #4]
1a004822:	60a5      	str	r5, [r4, #8]
1a004824:	2d00      	cmp	r5, #0
1a004826:	f2c0 8095 	blt.w	1a004954 <_printf_i+0x20c>
1a00482a:	6821      	ldr	r1, [r4, #0]
1a00482c:	f021 0104 	bic.w	r1, r1, #4
1a004830:	6021      	str	r1, [r4, #0]
1a004832:	2b00      	cmp	r3, #0
1a004834:	d13d      	bne.n	1a0048b2 <_printf_i+0x16a>
1a004836:	2d00      	cmp	r5, #0
1a004838:	f040 808e 	bne.w	1a004958 <_printf_i+0x210>
1a00483c:	4665      	mov	r5, ip
1a00483e:	2a08      	cmp	r2, #8
1a004840:	d10b      	bne.n	1a00485a <_printf_i+0x112>
1a004842:	6823      	ldr	r3, [r4, #0]
1a004844:	07db      	lsls	r3, r3, #31
1a004846:	d508      	bpl.n	1a00485a <_printf_i+0x112>
1a004848:	6923      	ldr	r3, [r4, #16]
1a00484a:	6862      	ldr	r2, [r4, #4]
1a00484c:	429a      	cmp	r2, r3
1a00484e:	bfde      	ittt	le
1a004850:	2330      	movle	r3, #48	; 0x30
1a004852:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004856:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00485a:	ebac 0305 	sub.w	r3, ip, r5
1a00485e:	6123      	str	r3, [r4, #16]
1a004860:	f8cd 8000 	str.w	r8, [sp]
1a004864:	463b      	mov	r3, r7
1a004866:	aa03      	add	r2, sp, #12
1a004868:	4621      	mov	r1, r4
1a00486a:	4630      	mov	r0, r6
1a00486c:	f7ff fef6 	bl	1a00465c <_printf_common>
1a004870:	3001      	adds	r0, #1
1a004872:	d14d      	bne.n	1a004910 <_printf_i+0x1c8>
1a004874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004878:	b005      	add	sp, #20
1a00487a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00487e:	4839      	ldr	r0, [pc, #228]	; (1a004964 <_printf_i+0x21c>)
1a004880:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004884:	6813      	ldr	r3, [r2, #0]
1a004886:	6821      	ldr	r1, [r4, #0]
1a004888:	1d1d      	adds	r5, r3, #4
1a00488a:	681b      	ldr	r3, [r3, #0]
1a00488c:	6015      	str	r5, [r2, #0]
1a00488e:	060a      	lsls	r2, r1, #24
1a004890:	d50b      	bpl.n	1a0048aa <_printf_i+0x162>
1a004892:	07ca      	lsls	r2, r1, #31
1a004894:	bf44      	itt	mi
1a004896:	f041 0120 	orrmi.w	r1, r1, #32
1a00489a:	6021      	strmi	r1, [r4, #0]
1a00489c:	b91b      	cbnz	r3, 1a0048a6 <_printf_i+0x15e>
1a00489e:	6822      	ldr	r2, [r4, #0]
1a0048a0:	f022 0220 	bic.w	r2, r2, #32
1a0048a4:	6022      	str	r2, [r4, #0]
1a0048a6:	2210      	movs	r2, #16
1a0048a8:	e7b7      	b.n	1a00481a <_printf_i+0xd2>
1a0048aa:	064d      	lsls	r5, r1, #25
1a0048ac:	bf48      	it	mi
1a0048ae:	b29b      	uxthmi	r3, r3
1a0048b0:	e7ef      	b.n	1a004892 <_printf_i+0x14a>
1a0048b2:	4665      	mov	r5, ip
1a0048b4:	fbb3 f1f2 	udiv	r1, r3, r2
1a0048b8:	fb02 3311 	mls	r3, r2, r1, r3
1a0048bc:	5cc3      	ldrb	r3, [r0, r3]
1a0048be:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0048c2:	460b      	mov	r3, r1
1a0048c4:	2900      	cmp	r1, #0
1a0048c6:	d1f5      	bne.n	1a0048b4 <_printf_i+0x16c>
1a0048c8:	e7b9      	b.n	1a00483e <_printf_i+0xf6>
1a0048ca:	6813      	ldr	r3, [r2, #0]
1a0048cc:	6825      	ldr	r5, [r4, #0]
1a0048ce:	6961      	ldr	r1, [r4, #20]
1a0048d0:	1d18      	adds	r0, r3, #4
1a0048d2:	6010      	str	r0, [r2, #0]
1a0048d4:	0628      	lsls	r0, r5, #24
1a0048d6:	681b      	ldr	r3, [r3, #0]
1a0048d8:	d501      	bpl.n	1a0048de <_printf_i+0x196>
1a0048da:	6019      	str	r1, [r3, #0]
1a0048dc:	e002      	b.n	1a0048e4 <_printf_i+0x19c>
1a0048de:	066a      	lsls	r2, r5, #25
1a0048e0:	d5fb      	bpl.n	1a0048da <_printf_i+0x192>
1a0048e2:	8019      	strh	r1, [r3, #0]
1a0048e4:	2300      	movs	r3, #0
1a0048e6:	6123      	str	r3, [r4, #16]
1a0048e8:	4665      	mov	r5, ip
1a0048ea:	e7b9      	b.n	1a004860 <_printf_i+0x118>
1a0048ec:	6813      	ldr	r3, [r2, #0]
1a0048ee:	1d19      	adds	r1, r3, #4
1a0048f0:	6011      	str	r1, [r2, #0]
1a0048f2:	681d      	ldr	r5, [r3, #0]
1a0048f4:	6862      	ldr	r2, [r4, #4]
1a0048f6:	2100      	movs	r1, #0
1a0048f8:	4628      	mov	r0, r5
1a0048fa:	f000 f881 	bl	1a004a00 <memchr>
1a0048fe:	b108      	cbz	r0, 1a004904 <_printf_i+0x1bc>
1a004900:	1b40      	subs	r0, r0, r5
1a004902:	6060      	str	r0, [r4, #4]
1a004904:	6863      	ldr	r3, [r4, #4]
1a004906:	6123      	str	r3, [r4, #16]
1a004908:	2300      	movs	r3, #0
1a00490a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00490e:	e7a7      	b.n	1a004860 <_printf_i+0x118>
1a004910:	6923      	ldr	r3, [r4, #16]
1a004912:	462a      	mov	r2, r5
1a004914:	4639      	mov	r1, r7
1a004916:	4630      	mov	r0, r6
1a004918:	47c0      	blx	r8
1a00491a:	3001      	adds	r0, #1
1a00491c:	d0aa      	beq.n	1a004874 <_printf_i+0x12c>
1a00491e:	6823      	ldr	r3, [r4, #0]
1a004920:	079b      	lsls	r3, r3, #30
1a004922:	d413      	bmi.n	1a00494c <_printf_i+0x204>
1a004924:	68e0      	ldr	r0, [r4, #12]
1a004926:	9b03      	ldr	r3, [sp, #12]
1a004928:	4298      	cmp	r0, r3
1a00492a:	bfb8      	it	lt
1a00492c:	4618      	movlt	r0, r3
1a00492e:	e7a3      	b.n	1a004878 <_printf_i+0x130>
1a004930:	2301      	movs	r3, #1
1a004932:	464a      	mov	r2, r9
1a004934:	4639      	mov	r1, r7
1a004936:	4630      	mov	r0, r6
1a004938:	47c0      	blx	r8
1a00493a:	3001      	adds	r0, #1
1a00493c:	d09a      	beq.n	1a004874 <_printf_i+0x12c>
1a00493e:	3501      	adds	r5, #1
1a004940:	68e3      	ldr	r3, [r4, #12]
1a004942:	9a03      	ldr	r2, [sp, #12]
1a004944:	1a9b      	subs	r3, r3, r2
1a004946:	42ab      	cmp	r3, r5
1a004948:	dcf2      	bgt.n	1a004930 <_printf_i+0x1e8>
1a00494a:	e7eb      	b.n	1a004924 <_printf_i+0x1dc>
1a00494c:	2500      	movs	r5, #0
1a00494e:	f104 0919 	add.w	r9, r4, #25
1a004952:	e7f5      	b.n	1a004940 <_printf_i+0x1f8>
1a004954:	2b00      	cmp	r3, #0
1a004956:	d1ac      	bne.n	1a0048b2 <_printf_i+0x16a>
1a004958:	7803      	ldrb	r3, [r0, #0]
1a00495a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00495e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004962:	e76c      	b.n	1a00483e <_printf_i+0xf6>
1a004964:	1a00503d 	.word	0x1a00503d
1a004968:	1a00504e 	.word	0x1a00504e

1a00496c <__sread>:
1a00496c:	b510      	push	{r4, lr}
1a00496e:	460c      	mov	r4, r1
1a004970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004974:	f7fb feaa 	bl	1a0006cc <_read_r>
1a004978:	2800      	cmp	r0, #0
1a00497a:	bfab      	itete	ge
1a00497c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00497e:	89a3      	ldrhlt	r3, [r4, #12]
1a004980:	181b      	addge	r3, r3, r0
1a004982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004986:	bfac      	ite	ge
1a004988:	6563      	strge	r3, [r4, #84]	; 0x54
1a00498a:	81a3      	strhlt	r3, [r4, #12]
1a00498c:	bd10      	pop	{r4, pc}

1a00498e <__swrite>:
1a00498e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004992:	461f      	mov	r7, r3
1a004994:	898b      	ldrh	r3, [r1, #12]
1a004996:	05db      	lsls	r3, r3, #23
1a004998:	4605      	mov	r5, r0
1a00499a:	460c      	mov	r4, r1
1a00499c:	4616      	mov	r6, r2
1a00499e:	d505      	bpl.n	1a0049ac <__swrite+0x1e>
1a0049a0:	2302      	movs	r3, #2
1a0049a2:	2200      	movs	r2, #0
1a0049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049a8:	f7fb fe8b 	bl	1a0006c2 <_lseek_r>
1a0049ac:	89a3      	ldrh	r3, [r4, #12]
1a0049ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0049b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0049b6:	81a3      	strh	r3, [r4, #12]
1a0049b8:	4632      	mov	r2, r6
1a0049ba:	463b      	mov	r3, r7
1a0049bc:	4628      	mov	r0, r5
1a0049be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0049c2:	f7fb beaa 	b.w	1a00071a <_write_r>

1a0049c6 <__sseek>:
1a0049c6:	b510      	push	{r4, lr}
1a0049c8:	460c      	mov	r4, r1
1a0049ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049ce:	f7fb fe78 	bl	1a0006c2 <_lseek_r>
1a0049d2:	1c43      	adds	r3, r0, #1
1a0049d4:	89a3      	ldrh	r3, [r4, #12]
1a0049d6:	bf15      	itete	ne
1a0049d8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0049da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0049de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0049e2:	81a3      	strheq	r3, [r4, #12]
1a0049e4:	bf18      	it	ne
1a0049e6:	81a3      	strhne	r3, [r4, #12]
1a0049e8:	bd10      	pop	{r4, pc}

1a0049ea <__sclose>:
1a0049ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049ee:	f7fb be55 	b.w	1a00069c <_close_r>
1a0049f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0049f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0049fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0049fe:	Address 0x000000001a0049fe is out of bounds.


1a004a00 <memchr>:
1a004a00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004a04:	2a10      	cmp	r2, #16
1a004a06:	db2b      	blt.n	1a004a60 <memchr+0x60>
1a004a08:	f010 0f07 	tst.w	r0, #7
1a004a0c:	d008      	beq.n	1a004a20 <memchr+0x20>
1a004a0e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004a12:	3a01      	subs	r2, #1
1a004a14:	428b      	cmp	r3, r1
1a004a16:	d02d      	beq.n	1a004a74 <memchr+0x74>
1a004a18:	f010 0f07 	tst.w	r0, #7
1a004a1c:	b342      	cbz	r2, 1a004a70 <memchr+0x70>
1a004a1e:	d1f6      	bne.n	1a004a0e <memchr+0xe>
1a004a20:	b4f0      	push	{r4, r5, r6, r7}
1a004a22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004a26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004a2a:	f022 0407 	bic.w	r4, r2, #7
1a004a2e:	f07f 0700 	mvns.w	r7, #0
1a004a32:	2300      	movs	r3, #0
1a004a34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004a38:	3c08      	subs	r4, #8
1a004a3a:	ea85 0501 	eor.w	r5, r5, r1
1a004a3e:	ea86 0601 	eor.w	r6, r6, r1
1a004a42:	fa85 f547 	uadd8	r5, r5, r7
1a004a46:	faa3 f587 	sel	r5, r3, r7
1a004a4a:	fa86 f647 	uadd8	r6, r6, r7
1a004a4e:	faa5 f687 	sel	r6, r5, r7
1a004a52:	b98e      	cbnz	r6, 1a004a78 <memchr+0x78>
1a004a54:	d1ee      	bne.n	1a004a34 <memchr+0x34>
1a004a56:	bcf0      	pop	{r4, r5, r6, r7}
1a004a58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004a5c:	f002 0207 	and.w	r2, r2, #7
1a004a60:	b132      	cbz	r2, 1a004a70 <memchr+0x70>
1a004a62:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004a66:	3a01      	subs	r2, #1
1a004a68:	ea83 0301 	eor.w	r3, r3, r1
1a004a6c:	b113      	cbz	r3, 1a004a74 <memchr+0x74>
1a004a6e:	d1f8      	bne.n	1a004a62 <memchr+0x62>
1a004a70:	2000      	movs	r0, #0
1a004a72:	4770      	bx	lr
1a004a74:	3801      	subs	r0, #1
1a004a76:	4770      	bx	lr
1a004a78:	2d00      	cmp	r5, #0
1a004a7a:	bf06      	itte	eq
1a004a7c:	4635      	moveq	r5, r6
1a004a7e:	3803      	subeq	r0, #3
1a004a80:	3807      	subne	r0, #7
1a004a82:	f015 0f01 	tst.w	r5, #1
1a004a86:	d107      	bne.n	1a004a98 <memchr+0x98>
1a004a88:	3001      	adds	r0, #1
1a004a8a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004a8e:	bf02      	ittt	eq
1a004a90:	3001      	addeq	r0, #1
1a004a92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004a96:	3001      	addeq	r0, #1
1a004a98:	bcf0      	pop	{r4, r5, r6, r7}
1a004a9a:	3801      	subs	r0, #1
1a004a9c:	4770      	bx	lr
1a004a9e:	bf00      	nop

1a004aa0 <__malloc_lock>:
1a004aa0:	4770      	bx	lr

1a004aa2 <__malloc_unlock>:
1a004aa2:	4770      	bx	lr
1a004aa4:	6e696c42 	.word	0x6e696c42
1a004aa8:	6320796b 	.word	0x6320796b
1a004aac:	66206e6f 	.word	0x66206e6f
1a004ab0:	52656572 	.word	0x52656572
1a004ab4:	20534f54 	.word	0x20534f54
1a004ab8:	41732079 	.word	0x41732079
1a004abc:	002e4950 	.word	0x002e4950
1a004ac0:	6b736174 	.word	0x6b736174
1a004ac4:	00000031 	.word	0x00000031
1a004ac8:	6b736174 	.word	0x6b736174
1a004acc:	ffff0032 	.word	0xffff0032
1a004ad0:	20736174 	.word	0x20736174
1a004ad4:	61682031 	.word	0x61682031
1a004ad8:	65622073 	.word	0x65622073
1a004adc:	75206e65 	.word	0x75206e65
1a004ae0:	74616470 	.word	0x74616470
1a004ae4:	0d0a6465 	.word	0x0d0a6465
1a004ae8:	ffffff00 	.word	0xffffff00
1a004aec:	6b736174 	.word	0x6b736174
1a004af0:	77203120 	.word	0x77203120
1a004af4:	75207361 	.word	0x75207361
1a004af8:	74616470 	.word	0x74616470
1a004afc:	73206465 	.word	0x73206465
1a004b00:	65636375 	.word	0x65636375
1a004b04:	75667373 	.word	0x75667373
1a004b08:	0a796c6c 	.word	0x0a796c6c
1a004b0c:	ffff000d 	.word	0xffff000d
1a004b10:	736c7550 	.word	0x736c7550
1a004b14:	726f6461 	.word	0x726f6461
1a004b18:	00003120 	.word	0x00003120
1a004b1c:	736c7550 	.word	0x736c7550
1a004b20:	726f6461 	.word	0x726f6461
1a004b24:	00003220 	.word	0x00003220
1a004b28:	736c7550 	.word	0x736c7550
1a004b2c:	726f6461 	.word	0x726f6461
1a004b30:	00003320 	.word	0x00003320
1a004b34:	736c7550 	.word	0x736c7550
1a004b38:	726f6461 	.word	0x726f6461
1a004b3c:	ff003420 	.word	0xff003420
1a004b40:	7369520a 	.word	0x7369520a
1a004b44:	20676e69 	.word	0x20676e69
1a004b48:	000a7325 	.word	0x000a7325
1a004b4c:	6572500a 	.word	0x6572500a
1a004b50:	64657373 	.word	0x64657373
1a004b54:	0a732520 	.word	0x0a732520
1a004b58:	00000000 	.word	0x00000000
1a004b5c:	6c65520a 	.word	0x6c65520a
1a004b60:	65736165 	.word	0x65736165
1a004b64:	73252064 	.word	0x73252064
1a004b68:	0000000a 	.word	0x0000000a
1a004b6c:	6568540a 	.word	0x6568540a
1a004b70:	43444120 	.word	0x43444120
1a004b74:	6c617620 	.word	0x6c617620
1a004b78:	69206575 	.word	0x69206575
1a004b7c:	25202073 	.word	0x25202073
1a004b80:	ff000a64 	.word	0xff000a64
1a004b84:	004a325b 	.word	0x004a325b
1a004b88:	0000485b 	.word	0x0000485b
1a004b8c:	73657250 	.word	0x73657250
1a004b90:	616e6f69 	.word	0x616e6f69
1a004b94:	70205420 	.word	0x70205420
1a004b98:	20617261 	.word	0x20617261
1a004b9c:	75736976 	.word	0x75736976
1a004ba0:	7a696c61 	.word	0x7a696c61
1a004ba4:	65207261 	.word	0x65207261
1a004ba8:	7365206c 	.word	0x7365206c
1a004bac:	6f646174 	.word	0x6f646174
1a004bb0:	20656420 	.word	0x20656420
1a004bb4:	20736f6c 	.word	0x20736f6c
1a004bb8:	736c7570 	.word	0x736c7570
1a004bbc:	726f6461 	.word	0x726f6461
1a004bc0:	0d0a7365 	.word	0x0d0a7365
1a004bc4:	00000000 	.word	0x00000000
1a004bc8:	73657250 	.word	0x73657250
1a004bcc:	616e6f69 	.word	0x616e6f69
1a004bd0:	70204420 	.word	0x70204420
1a004bd4:	20617261 	.word	0x20617261
1a004bd8:	72746e65 	.word	0x72746e65
1a004bdc:	61207261 	.word	0x61207261
1a004be0:	6f6d206c 	.word	0x6f6d206c
1a004be4:	41206f64 	.word	0x41206f64
1a004be8:	0d0a4344 	.word	0x0d0a4344
1a004bec:	00000000 	.word	0x00000000
1a004bf0:	73657250 	.word	0x73657250
1a004bf4:	616e6f69 	.word	0x616e6f69
1a004bf8:	6c204c20 	.word	0x6c204c20
1a004bfc:	69706d69 	.word	0x69706d69
1a004c00:	6c207261 	.word	0x6c207261
1a004c04:	61702061 	.word	0x61702061
1a004c08:	6c61746e 	.word	0x6c61746e
1a004c0c:	0d0a616c 	.word	0x0d0a616c
1a004c10:	00000000 	.word	0x00000000
1a004c14:	2a2a0a0a 	.word	0x2a2a0a0a
1a004c18:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c1c:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c20:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c24:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c28:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c2c:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c30:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c34:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c38:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c3c:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c40:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c44:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c48:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c4c:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c50:	2a2a2a2a 	.word	0x2a2a2a2a
1a004c54:	ff000d0a 	.word	0xff000d0a
1a004c58:	200a0a0a 	.word	0x200a0a0a
1a004c5c:	20202020 	.word	0x20202020
1a004c60:	20202020 	.word	0x20202020
1a004c64:	20202020 	.word	0x20202020
1a004c68:	20202020 	.word	0x20202020
1a004c6c:	20202020 	.word	0x20202020
1a004c70:	20202020 	.word	0x20202020
1a004c74:	20202020 	.word	0x20202020
1a004c78:	20202020 	.word	0x20202020
1a004c7c:	20202020 	.word	0x20202020
1a004c80:	30252020 	.word	0x30252020
1a004c84:	252f6432 	.word	0x252f6432
1a004c88:	2f643230 	.word	0x2f643230
1a004c8c:	64343025 	.word	0x64343025
1a004c90:	3230252c 	.word	0x3230252c
1a004c94:	30253a64 	.word	0x30253a64
1a004c98:	253a6432 	.word	0x253a6432
1a004c9c:	0d643230 	.word	0x0d643230
1a004ca0:	ffff000a 	.word	0xffff000a
1a004ca4:	454c4449 	.word	0x454c4449
1a004ca8:	ffffff00 	.word	0xffffff00
1a004cac:	51726d54 	.word	0x51726d54
1a004cb0:	ffffff00 	.word	0xffffff00
1a004cb4:	20726d54 	.word	0x20726d54
1a004cb8:	00637653 	.word	0x00637653

1a004cbc <ExtRateIn>:
1a004cbc:	00000000                                ....

1a004cc0 <GpioButtons>:
1a004cc0:	08000400 09010900                       ........

1a004cc8 <GpioLeds>:
1a004cc8:	01050005 0e000205 0c010b01              ............

1a004cd4 <GpioPorts>:
1a004cd4:	03030003 0f050403 05031005 07030603     ................
1a004ce4:	ffff0802                                ....

1a004ce8 <OscRateIn>:
1a004ce8:	00b71b00                                ....

1a004cec <InitClkStates>:
1a004cec:	01010f01                                ....

1a004cf0 <pinmuxing>:
1a004cf0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004d00:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004d10:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004d20:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004d30:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004d40:	00d50301 00d50401 00160107 00560207     ..............V.
1a004d50:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004d60:	00570206                                ..W.

1a004d64 <UART_BClock>:
1a004d64:	01a201c2 01620182                       ......b.

1a004d6c <UART_PClock>:
1a004d6c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004d7c:	ffff00ff                                ....

1a004d80 <periph_to_base>:
1a004d80:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004d90:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004da0:	000100e0 01000100 01200003 00060120     .......... . ...
1a004db0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004dc0:	01820013 00120182 01a201a2 01c20011     ................
1a004dd0:	001001c2 01e201e2 0202000f 000e0202     ................
1a004de0:	02220222 0223000d 001c0223              "."...#.#...

1a004dec <InitClkStates>:
1a004dec:	00010100 00010909 0001090a 01010701     ................
1a004dfc:	00010902 00010906 0101090c 0001090d     ................
1a004e0c:	0001090e 0001090f 00010910 00010911     ................
1a004e1c:	00010912 00010913 00011114 00011119     ................
1a004e2c:	0001111a 0001111b                       ........

1a004e34 <lpcUarts>:
1a004e34:	40081000 06020406 00180205 40081000     ...@...........@
1a004e44:	09070509 00180706 40082000 00000000     ......... .@....
1a004e54:	00190000 400c1000 07060107 001a0602     .......@........
1a004e64:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004e74:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a004e84:	0072656d                                mer.

1a004e88 <gpioPinsInit>:
1a004e88:	02000104 00050701 05010d03 04080100     ................
1a004e98:	02020002 02000304 00000403 04070002     ................
1a004ea8:	030c0300 09050402 05040103 04030208     ................
1a004eb8:	04020305 06040504 0802000c 03000b06     ................
1a004ec8:	00090607 07060503 060f0504 03030004     ................
1a004ed8:	02000404 00050404 06040502 04060200     ................
1a004ee8:	0c050408 05040a04 0003010e 14010a00     ................
1a004ef8:	010f0000 0d000012 00001101 0010010c     ................
1a004f08:	07070300 000f0300 01000001 00000000     ................
1a004f18:	000a0600 08060603 06100504 04030005     ................
1a004f28:	03000106 04090400 04010d05 010b0000     ................
1a004f38:	0200000f 00000001 00010104 02010800     ................
1a004f48:	01090000 09010006 05040002 04010200     ................
1a004f58:	02020105 02020504 0e00000a 01000b02     ................
1a004f68:	000c020b 00040c01 04000200 01020001     ................
1a004f78:	02000204 00030402 03070302 070b0300     ................
1a004f88:	0c030004 03000507 0006070d 01020e03     ................
1a004f98:	04010504 06020006 02000504 00040405     ................
1a004fa8:	08040402 040c0504 0d050409 05040a04     ................
1a004fb8:	0005010e ffff0801 00000a0d              ............

1a004fc4 <ultrasonicSensorsIrqMap>:
1a004fc4:	ff020100                                ....

1a004fc8 <__sf_fake_stderr>:
	...

1a004fe8 <__sf_fake_stdin>:
	...

1a005008 <__sf_fake_stdout>:
	...

1a005028 <_global_impure_ptr>:
1a005028:	10000124 2b302d23 6c680020 6665004c     $...#-0+ .hlL.ef
1a005038:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a005048:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a005058:	64636261 ff006665                       abcdef..
